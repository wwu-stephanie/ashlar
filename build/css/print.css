/**
 * @file
 * sass/print.scss
 */
/**
 * @file
 * sass/partials/_imports.scss
 *
 * Global imports.
 *
 * Importing this file must not generate any CSS.
 */
/**
 * @file
 * partials/settings/_settings.core.scss
 */
/**
 * @file
 * partials/settings/_settings.animations.scss
 */
/**
 * @file
 * partials/settings/_settings.colors.scss
 */
/**
 * @file
 * partials/settings/_settings.forms.scss
 */
/**
 * @file
 * partials/settings/_settings.typography.scss
 */
/**
 * @file
 * partials/settings/_settings.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.core.scss
 */
/**
 * @file
 * partials/tools/_tools.clearfix.scss
 */
/**
 * @file
 * partials/tools/_tools.colors.scss
 */
/**
 * @file
 * partials/tools/_tools.constants.scss
 */
/**
 * @file
 * partials/tools/_tools.font-size.scss
 */
/**
 * @file
 * partials/tools/_tools.hidden.scss
 */
/**
 * @file
 * partials/tools/_tools.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.lists.scss
 */
/**
 * @file
 * partials/tools/_tools.multicol-layout.scss
 */
/**
 * @file
 * partials/tools/_tools.sass-lists.scss
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"file":"print.css","sources":["print.scss","partials/_imports.scss","../../node_modules/singularitygs/stylesheets/_singularitygs.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_helpers.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_settings.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_find.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_sass-lists.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_columns.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_span-shared.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_directions.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_sort.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_background-grid.scss","../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_layout.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_language.scss","../../node_modules/singularitygs/stylesheets/singularitygs/language/_parse-list.scss","../../node_modules/singularitygs/stylesheets/singularitygs/language/_parse-add.scss","../../node_modules/singularitygs/stylesheets/singularitygs/language/_span.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_math.scss","../../node_modules/singularitygs/stylesheets/singularitygs/math/_columns.scss","../../node_modules/singularitygs/stylesheets/singularitygs/math/_gutters.scss","../../node_modules/singularitygs/stylesheets/singularitygs/math/_context.scss","../../node_modules/singularitygs/stylesheets/singularitygs/math/_grid.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_grids.scss","../../node_modules/singularitygs/stylesheets/singularitygs/grids/_add.scss","../../node_modules/singularitygs/stylesheets/singularitygs/grids/_find.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_gutters.scss","../../node_modules/singularitygs/stylesheets/singularitygs/gutters/_add.scss","../../node_modules/singularitygs/stylesheets/singularitygs/gutters/_find.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_gutter-styles.scss","../../node_modules/singularitygs/stylesheets/singularitygs/gutter-styles/_add.scss","../../node_modules/singularitygs/stylesheets/singularitygs/gutter-styles/_find.scss","../../node_modules/singularitygs/stylesheets/singularitygs/gutter-styles/_helpers.scss","../../node_modules/singularitygs/stylesheets/singularitygs/_api.scss","../../node_modules/singularitygs/stylesheets/singularitygs/api/_float.scss","../../node_modules/singularitygs/stylesheets/singularitygs/api/_isolation.scss","../../node_modules/singularitygs/stylesheets/singularitygs/api/_calc.scss","../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_settings.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_context.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_helpers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_parsers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_single.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/single/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_double.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default-pair.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_double-string.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_triple.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/triple/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/resolution/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_no-query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_respond-to.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_legacy-settings.scss","../../node_modules/shila-css/partials/settings/_settings.core.scss","../../node_modules/shila-css/partials/settings/_settings.animations.scss","../../node_modules/shila-css/partials/settings/_settings.colors.scss","../../node_modules/shila-css/partials/settings/_settings.forms.scss","../../node_modules/shila-css/partials/settings/_settings.typography.scss","../../node_modules/shila-css/partials/settings/_settings.layout.scss","../../node_modules/shila-css/partials/tools/_tools.core.scss","../../node_modules/shila-css/partials/tools/_tools.clearfix.scss","../../node_modules/shila-css/partials/tools/_tools.colors.scss","../../node_modules/shila-css/partials/tools/_tools.constants.scss","../../node_modules/shila-css/partials/tools/_tools.font-size.scss","../../node_modules/shila-css/partials/tools/_tools.hidden.scss","../../node_modules/shila-css/partials/tools/_tools.layout.scss","../../node_modules/shila-css/partials/tools/_tools.lists.scss","../../node_modules/shila-css/partials/tools/_tools.multicol-layout.scss","../../node_modules/shila-css/partials/tools/_tools.sass-lists.scss"],"sourcesContent":["/**\n * @file\n * sass/print.scss\n */\n\n@import 'partials/imports';\n","/**\n * @file\n * sass/partials/_imports.scss\n *\n * Global imports.\n *\n * Importing this file must not generate any CSS.\n */\n\n@import 'singularitygs';\n@import 'breakpoint';\n\n@import 'partials/settings/settings.core';\n@import 'partials/settings/settings.animations';\n\n@import 'partials/settings/settings.colors';\n\n@import 'partials/settings/settings.forms';\n@import 'partials/settings/settings.typography';\n@import 'partials/settings/settings.layout';\n@import 'partials/tools/tools.core';\n@import 'partials/tools/tools.clearfix';\n@import 'partials/tools/tools.colors';\n@import 'partials/tools/tools.constants';\n@import 'partials/tools/tools.font-size';\n@import 'partials/tools/tools.hidden';\n@import 'partials/tools/tools.layout';\n@import 'partials/tools/tools.lists';\n@import 'partials/tools/tools.multicol-layout';\n@import 'partials/tools/tools.sass-lists';\n","//////////////////////////////\n// Default Settings\n//////////////////////////////\n$Singularity-Settings: (\n  'grids': (-1px: 12),\n  'gutters': (-1px: .25),\n  'gutter styles': (-1px: 'opposite'),\n  'output': 'isolation',\n  'direction': 'ltr',\n  'mobile first': true,\n  'include border box': false,\n  'include clearfix': false,\n  'background grid color': chocolate,\n  'asymmetric output': 'isolation',\n  'calc include min-width': true,\n  'debug': false\n);\n\n//////////////////////////////\n// User Settings\n//////////////////////////////\n$singularity: () !default;\n\n//////////////////////////////\n// Import General Helpers\n//////////////////////////////\n@import \"singularitygs/helpers\";\n\n//////////////////////////////\n// Import Language Helpers\n//////////////////////////////\n@import \"singularitygs/language\";\n\n//////////////////////////////\n// Import Math\n//////////////////////////////\n@import \"singularitygs/math\";\n\n//////////////////////////////\n// Import Grid Helpers\n//////////////////////////////\n@import \"singularitygs/grids\";\n\n//////////////////////////////\n// Import Gutters Helpers\n//////////////////////////////\n@import \"singularitygs/gutters\";\n\n//////////////////////////////\n// Import Gutter Styles\n//////////////////////////////\n@import \"singularitygs/gutter-styles\";\n\n//////////////////////////////\n// Import APIs\n//////////////////////////////\n@import \"singularitygs/api\";","//////////////////////////////\n// Setting Helpers\n//////////////////////////////\n@import \"helpers/settings\";\n\n//////////////////////////////\n// Code Helpers\n//////////////////////////////\n@import \"helpers/find\";\n@import \"helpers/sass-lists\";\n@import \"helpers/columns\";\n@import \"helpers/span-shared\";\n@import \"helpers/directions\";\n@import \"helpers/sort\";\n\n//////////////////////////////\n// UI Helpers\n//////////////////////////////\n@import \"helpers/background-grid\";\n\n//////////////////////////////\n// Layout Helpers\n//////////////////////////////\n@import \"helpers/layout\";","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function sgs-has($setting) {\n  @if map-has-key($singularity, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function sgs-get($setting) {\n  @if sgs-has($setting) {\n    @return map-get($singularity, $setting);\n  }\n  @else {\n    @return map-get($Singularity-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function sgs-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Singularity settings should be spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $singularity: map-merge($singularity, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin sgs-change($setting, $value) {\n  $sgs-change: sgs-set($setting, $value);\n}\n\n@mixin sgs-set($setting, $value) {\n  @include sgs-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function sgs-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $singularity: map-remove($singularity, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin sgs-reset($settings...) {\n  $sgs-reset: sgs-reset($settings);\n}","//////////////////////////////\n// Find Object Keys\n//\n// Returns\n//////////////////////////////\n@function find-object-keys($haystack) {\n  $Keys: map-keys($haystack);\n  $List: ();\n  @each $Key in $Keys {\n    @if $Key != -1px {\n      @if unit($Key) == 'em' {\n        $Key: $Key / 1em * 16px;\n      }\n      $List: append($List, $Key);\n    }\n  }\n  @return quicksort($List);\n}\n\n//////////////////////////////\n// Find Object\n//\n// Finds relevant object\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-object($haystack, $user-object: null) {\n  // If a user object has been passed in, bypass the whole function and just return that object.\n  @if $user-object != null and $user-object != false {\n    @return $user-object;\n  }\n\n  $Length: length($haystack);\n  $Mobile-First: sgs-get('mobile first');\n\n  // Haystack must be map\n  @if type-of($haystack) != 'map' {\n    @warn \"DEPRECATION: In order to remove global variable naming conflicts, Singularity's settings have been moved into the single `$singularity` variable. Please refer to our documentation (https://github.com/Team-Sass/Singularity/wiki) on how to update your settings. In the next version of Singularity, this warning will be removed. #{nth($haystack, 1)} has been returned.\";\n    @return nth($haystack, 1);\n  }\n\n  @if $Length > 1 {\n    // Grab Breakpoint Context\n    @if not function-exists(breakpoint-get-context) {\n      @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. First item used.\";\n      @return map-get($haystack, -1px);\n    }\n    // Get Breakpoint Contexts\n    $Query-Min: breakpoint-get-context('min-width');\n    $Query-Max: breakpoint-get-context('max-width');\n\n    @if length($Query-Min) == 1 {\n      $Query-Min: nth($Query-Min, 1);\n    }\n    @else if length($Query-Min) > 1 {\n      @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\n      @return map-get($haystack, -1px);\n    }\n\n\n    @if length($Query-Max) == 1 {\n      $Query-Max: nth($Query-Max, 1);\n    }\n    @else if length($Query-Max) > 1 {\n      @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Default context is used.\";\n      @return map-get($haystack, -1px);\n    }\n\n    // If there is no min or max context, return first item\n    @if $Query-Min == false and $Query-Max == false {\n      $RETURN: map-get($haystack, -1px);\n      @return $RETURN;\n    }\n\n    // Convert to PX\n    @if $Query-Min != false and  unit($Query-Min) == 'em' {\n      $Query-Min: $Query-Min / 1em * 16px;\n    }\n    @if $Query-Max != false and unit($Query-Max) == 'em' {\n      $Query-Max: $Query-Max / 1em * 16px;\n    }\n\n    $Find-Haystack: find-object-keys($haystack);\n    $Reverse-Haystack: reverse($Find-Haystack);\n\n    $Smallest: nth($Find-Haystack, 1);\n    $Largest: nth($Reverse-Haystack, 1);\n    $Context: $Query-Min;\n\n    @if not $Mobile-First {\n      $Context: $Query-Max;\n    }\n\n    // Loop over each item in Context to find if any of the items pass.\n    @each $Query-Context in $Context {\n      @if $Query-Context != false {\n        // If it's smallest than the smallest MQ, use the 1st grid\n        @if $Query-Context < $Smallest {\n          $RETURN: map-get($haystack, -1px);\n          @return $RETURN;\n        }\n        // If it's larger than or equal to the largest MQ, use the last grid\n        @else if $Query-Context >= $Largest {\n          $RETURN: map-get($haystack, $Largest);\n          @return $RETURN;\n        }\n        // If it's in between the smallest and largest, go run a check.\n        @else {\n          // Loop through each MQ.\n          @for $j from 1 through length($Reverse-Haystack) {\n            $Query: nth($Reverse-Haystack, $j);\n\n            // If the MQ is greather than or equal to the the MQ in question, use it! (mobile first)\n            @if ($Mobile-First) {\n              @if $Query-Context >= $Query {\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\n                @return $RETURN;\n              }\n            }\n            // If the MQ is less than or equal to the the MQ in question, use it! (not mobile first)\n            @else {\n              @if $Query-Context <= $Query {\n                $RETURN: map-get($haystack, nth($Reverse-Haystack, $j));\n                @return $RETURN;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  // All else fails, return the first item\n  @else {\n    $RETURN: map-get($haystack, -1px);\n    @return $RETURN;\n  }\n}\n","// ---------------------------------------------------------------------------\n// Sass List Helpers\n//\n// - list-sum()\n// - query-list()\n\n// ---------------------------------------------------------------------------\n// Functions\n\n// Return the sum of all items in a list.\n//\n// list-sum($list)\n// - $list  : <list>\n@function list-sum($list) {\n  $sum: 0;\n  @each $item in $list {\n    $sum: $sum + $item;\n  }\n  @return $sum;\n}\n\n// Return list of index locations where a query appears in a list,\n// including unit queries.\n//\n// query-list($list, $query [, $mode])\n// - $list    : <list>\n// - $query   : <anything>\n// - $mode    : none | unit\n//            - \"none\" (default) runs a standard query.\n//            - \"unit\" finds all items with the same unit.\n@function query-list(\n  $list,\n  $query,\n  $mode: none\n) {\n  $return: ();\n\n  // loop through $list\n  @for $i from 1 through length($list) {\n    @if $mode == unit {\n      // if the list item matches the query, write where it is to the list.\n      @if unit(nth($list, $i)) == $query {\n        $return: append($return, $i);\n      }\n    }\n    @else {\n      // if the list item matches the query, write where it is to the list.\n      @if nth(nth($list, $i), 1) == $query {\n        $return: append($return, $i);\n      }\n    }\n  }\n\n  // if nothing matches then return false.\n  @if $return == () {\n    $return: false;\n  }\n\n  // return list.\n  @return $return;\n}\n\n// Reverses direction of a list\n@function reverse($list) {\n  $length: length($list);\n  $return: ();\n  @for $i from 0 to $length {\n    $return: append($return, nth($list, $length - $i));\n  }\n  @return $return;\n}","@function end-row($span, $location, $columns) {\n  @if $location == 'last' or $location == 'omega' {\n    @return true;\n  }\n  @else {\n    @if $location + ($span - 1) == column-count($columns) {\n      @return true;\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n@function start-row($location) {\n  @if $location == 'first' or $location == 'alpha' {\n    @return true;\n  }\n  @else if $location == 1 {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}","@mixin span-shared {\n  $include-border-box: sgs-get('include border box');\n  $include-clearfix: sgs-get('include clearfix');\n\n  @if $include-border-box {\n    @if mixin-exists(box-sizing) {\n      @include box-sizing(border-box);\n    }\n    @else {\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n  }\n\n  @if $include-clearfix {\n    @if mixin-exists(clearfix) {\n      @include clearfix;\n    }\n    @else {\n      &:after {\n        content: \"\";\n        display: table;\n        clear: both;\n      }\n    }\n  }\n}","//////////////////////////////\n// Find Opposite Direction\n//////////////////////////////\n@function opposite-direction($dir) {\n  @if $dir == 'left' {\n    @return right;\n  }\n  @else if  $dir == 'right' {\n    @return left;\n  }\n  @else if $dir == 'ltr' {\n    @return rtl;\n  }\n  @else if $dir == 'rtl' {\n    @return ltr;\n  }\n  @else if $dir == 'top' {\n    @return bottom;\n  }\n  @else if $dir == 'bottom' {\n    @return top;\n  }\n  @else {\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find Direction Name\n//////////////////////////////\n@function named-direction($dir) {\n  @if $dir == 'ltr' {\n    @return left;\n  }\n  @else if $dir == 'rtl' {\n    @return right;\n  }\n  @else {\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\n    @return false;\n  }\n}","//////////////////////////////\n// Quicksort\n// http://rosettacode.org/wiki/Sorting_algorithms/Quicksort\n//////////////////////////////\n@function quicksort($list) {\n\n  $QS-Less: ();\n  $QS-Equal: ();\n  $QS-Large: ();\n\n  $QS-Length: length($list);\n\n  $QS-Seed: round($QS-Length / 2);\n\n  @if $QS-Length > 1 {\n    $QS-Seed: nth($list, $QS-Seed);\n    @each $Item in $list {\n      @if $Item < $QS-Seed {\n        $QS-Less: append($QS-Less, $Item);\n      }\n      @else if $Item == $QS-Seed {\n        $QS-Equal: append($QS-Equal, $Item);\n      }\n      @else {\n        $QS-Large: append($QS-Large, $Item);\n      }\n    }\n    $QS-Less: quicksort($QS-Less);\n    $QS-Large: quicksort($QS-Large);\n\n    $QS-Return: join($QS-Less, $QS-Equal);\n    $QS-Return: join($QS-Return, $QS-Large);\n\n    @return $QS-Return;\n  }\n\n  @return $list;\n}\n\n//////////////////////////////\n// Sort Map function\n//////////////////////////////\n@function sort-map($map, $reverse: false) {\n  $Sort-Map-Keys: quicksort(map-keys($map));\n  $Sort-Map-Map: ();\n\n  @if $reverse {\n    $Sort-Map-Keys: reverse($Sort-Map-Keys);\n  }\n\n  @each $key in $Sort-Map-Keys {\n    $Sort-Map-Map: map-merge($Sort-Map-Map, ($key: map-get($map, $key)));\n  }\n\n  @return $Sort-Map-Map;\n}","// -----------------------------------------------\n// Grid Background\n\n@mixin background-grid(\n  $columns: null,\n  $gutter: null,\n  $gutter-style: null,\n  $color: null\n) {\n\n  $color: if($color != null, $color, sgs-get('background grid color'));\n\n  @if sgs-get('debug') != false {\n    $columns: if($columns != null, $columns, sgs-get('grids'));\n    $gutter: if($gutter != null, $gutter, sgs-get('gutters'));\n    $gutter-style: if($gutter-style != null, $gutter-style, sgs-get('gutter styles'));\n\n    @include background-build($columns, $gutter, $gutter-style, $color)\n  }\n}\n\n@function background-map($columns, $gutters, $gutter-styles) {\n  $Grids: ();\n  $Gutters: ();\n  $Styles: ();\n\n  @if $columns and type-of($columns) != 'map' {\n    $Grids: (-1px: $columns);\n  }\n  @else {\n    $Grids: sgs-get('grids');\n  }\n\n  @if $gutters and type-of($gutters) != 'map' {\n    $Gutters: (-1px: $gutters);\n  }\n  @else {\n    $Gutters: sgs-get('gutters');\n  }\n\n  @if $gutter-styles and type-of($gutter-styles) != 'map' {\n    $Styles: (-1px: $gutter-styles);\n  }\n  @else {\n    $Styles: sgs-get('gutter styles');\n  }\n\n  // Build 1st Depth Map\n  $Holder: ();\n\n  // Grids\n  @each $k, $v in $Grids {\n    $Holder: map-merge($Holder, ($k: ('grid': $v)));\n  }\n  // Gutters\n  @each $k, $v in $Gutters {\n    $Grid: map-get($Holder, $k);\n\n    $Map: ('gutter': $v);\n    @if $Grid != null {\n      $Grid: map-get($Grid, 'grid');\n      @if $Grid != null {\n        $Map: map-merge($Map, ('grid': $Grid));\n      }\n    }\n\n    $Holder: map-merge($Holder, ($k: $Map));\n  }\n  // Style\n  @each $k, $v in $Styles {\n    $Grid: map-get($Holder, $k);\n    $Gutter: map-get($Holder, $k);\n\n    $Map: ('style': $v);\n    @if $Grid != null {\n      $Grid: map-get($Grid, 'grid');\n      @if $Grid != null {\n        $Map: map-merge($Map, ('grid': $Grid));\n      }\n    }\n    @if $Gutter != null {\n      $Gutter: map-get($Gutter, 'gutter');\n      @if $Gutter != null {\n        $Map: map-merge($Map, ('gutter': $Gutter));\n      }\n    }\n\n    $Holder: map-merge($Holder, ($k: $Map));\n  }\n\n  $Holder: sort-map($Holder);\n  $Return: ();\n\n  // Build full stack for each breakpoint\n  @for $i from 1 through length($Holder) {\n    $Key: nth(nth($Holder, $i), 1);\n    $Value: nth(nth($Holder, $i), 2);\n\n    $Previous: ();\n    @if $i > 1 {\n      $Previous: nth(nth($Return, $i - 1), 2);\n    }\n\n    @if not map-has-key($Value, 'grid') {\n      $Sort-Grid: map-get($Previous, 'grid');\n      $Value: map-merge($Value, ('grid': $Sort-Grid));\n    }\n\n    @if not map-has-key($Value, 'gutter') {\n      $Sort-Gutter: map-get($Previous, 'gutter');\n      $Value: map-merge($Value, ('gutter': $Sort-Gutter));\n    }\n\n    @if not map-has-key($Value, 'style') {\n      $Sort-Style: map-get($Previous, 'style');\n      $Value: map-merge($Value, ('style': $Sort-Style));\n    }\n\n    $Return: map-merge($Return, ($Key: $Value));\n  }\n\n  @return $Return;\n}\n\n@mixin background-build($columns, $gutters, $gutter-styles, $color) {\n  $Background-Map: background-map($columns, $gutters, $gutter-styles);\n  $Display: true;\n\n  $Column-Color: $color;\n  $Inverse-Column-Color: mix(black, $color, 15%);\n  $Gutter-Color: mix(white, $color, 25%);\n  $Direction: named-direction(sgs-get('direction'));\n\n  $encodeMap:(\n    '%\"':'%25%22',\n    '<':'%3C',\n    ' ':'%20',\n    '=':'%3D',\n    '\\\"':'%22',\n    ':':'%3A',\n    '/':'%2F',\n    '.':'%2E',\n    '>':'%3E',\n    '#':'%23',\n    '-':'%2D'\n  );\n\n  @each $bkpt, $def in $Background-Map {\n    $Grid: map-get($def, 'grid');\n    $Gutter: map-get($def, 'gutter');\n    $Style: map-get($def, 'style');\n\n    $Grid-Count: column-count($Grid);\n\n    $SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\">';\n\n    $Gutter-Width: gutter-span($Gutter, $Grid, $Style);\n    @if unit($Gutter-Width) != '%' and unit($Gutter-Width) != '' {\n      $Gutter-Width: 0%;\n    }\n\n    @if $Style == 'fixed' {\n      $Gutter-Width: 0%;\n    }\n    $Counter-Width: 0%;\n    $holder: ();\n\n    @for $i from 1 through $Grid-Count {\n      $Holder-Gradient: ();\n      $Loop-Width: column-span(1, $i, $Grid, $Gutter, $Style);\n\n      @if index($Style, 'split') and $i == 1 {\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\n        $Counter-Width: ($Gutter-Width / 2);\n      }\n\n      $Loop-Color: $Column-Color;\n      @if (index($Style, 'fixed') or $Gutter-Width == 0%) and ($i % 2 == 0 ) {\n        $Loop-Color: $Inverse-Column-Color;\n      }\n\n      @if $i != $Grid-Count {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width;\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Gutter-Width;\n        }\n        @else {\n          $Display: false;\n        }\n\n      }\n      @else if $i == 1 {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $SVG: $SVG + '<rect x=\"#{$Loop-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width + $Gutter-Width;\n        }\n        @else {\n          $Display: false;\n        }\n\n      }\n      @else if $i == $Grid-Count and index($Style, 'split') {\n        @if unit($Counter-Width) == unit($Loop-Width) {\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n          $Counter-Width: $Counter-Width + $Loop-Width;\n          $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Gutter-Color}\" width=\"#{$Gutter-Width / 2}\" height=\"100%\"/>';\n        }\n        @else {\n          $Display: false;\n        }\n      }\n      @else {\n        $SVG: $SVG + '<rect x=\"#{$Counter-Width}\" fill=\"#{$Loop-Color}\" width=\"#{$Loop-Width}\" height=\"100%\"/>';\n      }\n    }\n\n    $SVG: $SVG + '</svg>';\n\n    @each $char, $code in $encodeMap {\n      $index: str-index($SVG, $char);\n      @while $index {\n        $index: str-index($SVG, $char);\n        $SVG: str-slice($SVG, 1, $index - 1) + $code + str-slice($SVG, $index + str-length($char));\n        $index: str-index($SVG, $char);\n      }\n    }\n\n    @if $Display {\n\n      @if $bkpt != -1px {\n        @include breakpoint($bkpt) {\n          background-image: url('data:image/svg+xml,' + $SVG);\n        }\n      }\n      @else {\n        background-image: url('data:image/svg+xml,' + $SVG);\n      }\n    }\n    @else {\n      @warn 'Cannot generate a Background Grid for grid `#{$Grid}` with gutters `#{$Gutter}` and gutter style `#{$Style}`';\n    }\n  }\n}\n","//////////////////////////////\n// Wrapper mixin for overriding the global contexts as a block\n//////////////////////////////\n@mixin layout($grid: false, $gutter: false, $output-style: false, $gutter-style: false) {\n\n  @if type-of($grid) == 'map' {\n    $layout: $grid;\n    @if map-has-key($layout, 'grid') {\n      $grid: map-get($layout, 'grid');\n    }\n\n    @if map-has-key($layout, 'gutter') {\n      $gutter: map-get($layout, 'gutter');\n    }\n\n    @if map-has-key($layout, 'output style') {\n      $output-style: map-get($layout, 'output style');\n    }\n    @if map-has-key($layout, 'output') {\n      $output-style: map-get($layout, 'output');\n    }\n\n    @if map-has-key($layout, 'gutter style') {\n      $gutter-style: map-get($layout, 'gutter style');\n    }\n  }\n\n  // Private holder for current global context\n  $layout-private-grid-holder: sgs-get('grids');\n  $layout-private-gutter-holder: sgs-get('gutters');\n  $layout-private-output-holder: sgs-get('output');\n  $layout-private-gutter-style-holder: sgs-get('gutter styles');\n\n  // Overides current global contexts, but only if needed\n  @if $grid != false {\n    @include sgs-reset('grids');\n    @if type-of($grid) != 'map' {\n      @include sgs-change('grids', (-1px: $grid));\n    }\n    @else {\n      @include sgs-change('grids', $grid);\n    }\n  }\n  @if $gutter != false {\n    @include sgs-reset('gutters');\n    @if type-of($gutter) != 'map' {\n      @include sgs-change('gutters', (-1px: $gutter));\n    }\n    @else {\n      @include sgs-change('gutters', $gutter);\n    }\n  }\n  @if $output-style != false {\n    @include sgs-reset('output');\n    @include sgs-change('output', $output-style);\n  }\n  @if $gutter-style != false {\n    @include sgs-reset('gutter styles');\n    @if type-of($gutter-style) != 'map' {\n      @include sgs-change('gutter styles', (-1px: $gutter-style));\n    }\n    @else {\n      @include sgs-change('gutter styles', $gutter-style);\n    }\n  }\n\n  // All the things!\n  @content;\n\n  // REset ALL the settings\n  @include sgs-reset('grids');\n  @include sgs-reset('gutters');\n  @include sgs-reset('output');\n  @include sgs-reset('gutter styles');\n  // Resets global contexts\n  @include sgs-change('grids', $layout-private-grid-holder);\n  @include sgs-change('gutters', $layout-private-gutter-holder);\n  @include sgs-change('output', $layout-private-output-holder);\n  @include sgs-change('gutter styles', $layout-private-gutter-style-holder);\n}\n\n//////////////////////////////\n// Layout At\n// Wrapper mixin for a combined Breakpoint/Layout call\n//////////////////////////////\n@mixin layout-at($layout, $breakpoint) {\n  @include breakpoint($breakpoint) {\n    // If a single value is passed in, assume it's a grid\n    @if type-of($layout) != map {\n      @include layout($layout) {\n        @content;\n      }\n    }\n    // If it is a map, we've got key/values to work with\n    @else {\n      $grid: false;\n      $gutter: false;\n      $output-style: false;\n      $gutter-style: false;\n\n      @if map-has-key($layout, 'grid') {\n        $grid: map-get($layout, 'grid');\n      }\n\n      @if map-has-key($layout, 'gutter') {\n        $gutter: map-get($layout, 'gutter');\n      }\n\n      @if map-has-key($layout, 'output style') {\n        $output-style: map-get($layout, 'output style');\n      }\n      @if map-has-key($layout, 'output') {\n        $output-style: map-get($layout, 'output');\n      }\n\n      @if map-has-key($layout, 'gutter style') {\n        $gutter-style: map-get($layout, 'gutter style');\n      }\n\n      @include layout($grid, $gutter, $output-style, $gutter-style) {\n        @content;\n      }\n    }\n  }\n}","@import \"language/parse-list\";\n@import \"language/parse-add\";\n@import \"language/span\";","//////////////////////////////\n// Parse natural language string\n//\n// Retrieve values from the natural language string.\n// parse-string($var, $list)\n//  $var  : <string>\n//        - 'at'/'span'/'of' or any other keywords.\n//        - 'span' queries the unprefixed span declaration.\n//        - 'at' can also query first, last, alpha, and omega.\n//        - 'grid' will return the same as 'of'\n//  $list : <list>\n//        - A list like this: last 2 of (1 1 2) push 1\n//\n//////////////////////////////\n@function parse-span-list($var, $list) {\n\n  $found: false;\n\n  $grid: ();\n\n  // Loop through list.\n  @each $item in $list {\n    // if 'span' - return the first numeric.\n    // if keyword was found - return the following item.\n    @if (type-of($item) == number and $var == span and $found != 'grid') or $found == true {\n\n      // @if $found == true\n      @return $item;\n    }\n\n    // Special handling for Grids\n    @else if ($item == $var or $item == 'grid' or $item == 'of') and ($var == 'of' or $var == 'grid') {\n      $found: 'grid';\n    }\n\n    @else if $found == 'grid' {\n      @if type-of($item) == number {\n        $grid: append($grid, $item, 'space');\n      }\n      @else {\n        @return $grid;\n      }\n    }\n\n    // Any keyword - return the following value.\n    @else if $item == $var {\n      $found: true;\n    }\n  }\n\n  // Wasn't found.\n  @return false;\n}","//////////////////////////////\n// Parse add string\n//\n// Retrieve add and media query values from a definition\n// parse-add($definition)\n//  $definition : <list>\n//        - A list like: .25 at 300px\n//\n//////////////////////////////\n@function parse-add($definition) {\n  $parse-find: ();\n  $parse-mq: null;\n  $parse-mq-find: false;\n  $Mobile-First: sgs-get('mobile first');\n\n  @each $item in $definition {\n    @if $item != 'at' and $parse-mq-find != true {\n      $parse-find: append($parse-find, $item, 'space');\n    }\n    @else if $item == 'at' {\n      $parse-mq-find: true;\n    }\n    @else {\n      $parse-mq: $item;\n    }\n  }\n\n  @if $parse-mq {\n    @if not function-exists(breakpoint) {\n      @warn \"Responsive contexts require Breakpoint (https://github.com/Team-Sass/breakpoint). Please ensure that Breakpoint is imported and available for Singularity to use. Context set to -1px.\";\n      $parse-mq: -1px;\n    }\n    @else {\n      $breakpoint-parse: breakpoint($parse-mq);\n      $breakpoint-parse: map-get($breakpoint-parse, 'context holder');\n      $breakpoint-mq: null;\n      @if $Mobile-First {\n        $breakpoint-mq: map-get($breakpoint-parse, 'min-width');\n      }\n      @else {\n        $breakpoint-mq: map-get($breakpoint-parse, 'max-width');\n      }\n\n      @if length($breakpoint-mq) > 1 {\n        @warn \"Responsive contexts are not available for `or` queries as which query to use is ambiguous. Please only use single context queries. Context set to -1px.\";\n        $parse-mq: -1px;\n      }\n      @else if length($breakpoint-mq) < 1 {\n        @warn \"No \" + if($Mobile-First, 'min-width', 'max-width') + ' context found. Please use a media query with the correct context. Context set to -1px.';\n        $parse-mq: -1px;\n      }\n      @else {\n        $parse-mq: nth($breakpoint-mq, 1);\n      }\n    }\n  }\n\n  @if $parse-mq and unit($parse-mq) == 'em' {\n    $parse-mq: $parse-mq / 1em * 16px;\n  }\n\n  @return ($parse-find $parse-mq);\n}\n","//////////////////////////////\n// \"Natural Language\" Parsing\n//\n// Keywords:\n//  span:     Column Span\n//  at:       Column Location\n//  of:       Context\n//  gutters:  Gutters\n//  output:   Output\n//////////////////////////////\n@mixin span($input) {\n  $span:      nth($input, 1);\n\n  $location:  parse-span-list('at', $input);\n  $context:   parse-span-list('of', $input);\n  $gutter:    parse-span-list('gutters', $input);\n  $output:    parse-span-list('output', $input);\n\n  @include grid-span($span, $location, $context, $gutter, $output)\n}","@import \"math/columns\";\n@import \"math/gutters\";\n@import \"math/context\";\n@import \"math/grid\";","//////////////////////////////\n// Find width, in percentages, of the column span\n//////////////////////////////\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\n  // Find the grid and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    $gutter: 0;\n  }\n\n  // @debug $grid;\n  // @debug $gutter;\n\n  // Combine the grid and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  // @debug $grid-and-gutters;\n\n  // Equal width grid are easy! Deal with them!\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    $span-and-gutters: $span + $gutter * ($span - 1);\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\n    $span-and-gutters: 0;\n\n    @if $location == 1 and $span >= 1 {\n      @for $i from 1 through $span {\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n      }\n    }\n    @else {\n      $total: $location + $span - 1;\n      @if $total != 0 {\n        @for $i from $location through $total {\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n        }\n      }\n    }\n    $span-and-gutters: $span-and-gutters - $gutter;\n\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  @else {\n    @warn \"Can't find a working set of grid! That's terrible!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find the total sum of the grid\n//////////////////////////////\n@function column-sum($grid, $gutter, $gutter-style) {\n  $split: if(index($gutter-style, 'split'), true, false);\n\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    @if $split {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\n    }\n    @else {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\n    }\n\n  }\n  @else if type-of($grid) == 'list' {\n    $sum: 0;\n    @each $column in $grid {\n      $sum: $sum + nth($column, 1);\n    }\n    @if $split {\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\n    }\n    @else {\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\n    }\n    @return $sum;\n  }\n}\n\n//////////////////////////////\n// Find the number of grid\n//////////////////////////////\n@function column-count($grid) {\n  @if type-of($grid) == 'number' {\n    @return $grid;\n  }\n  @if type-of($grid) == 'list' {\n    @if length($grid) == 1 {\n      @return nth($grid, 1);\n    }\n    @else {\n      @return length($grid);\n    }\n  }\n}","@function gutter-span($gutter: false, $grid: false, $gutter-style: false) {\n\n  // Find the columns and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    @return nth($gutter, 1);\n  }\n\n  // Combine the columns and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  @return (nth($gutter, 1) / $grid-and-gutters) * 100%\n}","@function context($primary, $secondary) {\n  @return ($primary / $secondary) * 100%;\n}","@function grid-span($span, $location, $grid: false, $gutter: false, $gutter-style: false) {\n  @return column-span($span, $location, $grid, $gutter, $gutter-style) + gutter-span($gutter, $grid, $gutter-style);\n}","@import \"grids/add\";\n@import \"grids/find\";","// Accepts a grid definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of grids and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-grid($grid-definition, $append-to-list)\n// - $grid-definition : <definition>  See documentation for syntax:\n//                                    https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\n// - $append-to-list  : [list]        A list to append to.\n//                                    Defaults to $grids if none is specified.\n@function add-grid($grid-definition, $custom-map: false) {\n  $Parsed:      parse-add($grid-definition); // Parses grid definition to grid/breakpoint\n  $Grid:        nth($Parsed, 1); // E. g. `(<grid>)`.\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First: sgs-get('mobile first');\n  $Grid-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Grid-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('grids') {\n      $Grid-Map: sgs-get('grids');\n    }\n  }\n  $Grid-Key-Length: length(map-keys($Grid-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<grid>)`\n    $Grid-Map: map-merge($Grid-Map, (-1px: $Grid));\n  }\n  // IF the list is initiated with a list of grid columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Grid-Map, -1px)) {\n      $Grid-Map: map-merge($Grid-Map, map-get($Singularity-Settings, 'grids'));\n    }\n    $Grid-Map: map-merge($Grid-Map, ($Breakpoint: $Grid));\n  }\n\n  $Grid-Map: sort-map($Grid-Map, not $Mobile-First);\n\n  @return $Grid-Map;\n}\n\n\n@mixin add-grid($grid-definition) {\n  $Add-Grid: add-grid($grid-definition);\n  $HOLDER: sgs-set('grids', $Add-Grid);\n}","//////////////////////////////\n// Find Grid\n//\n// Finds the grid that you are on.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-grid($user-columns: null) {\n\n  // We supply a default if the user hasn't set any grids and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Grids: sgs-get('grids');\n\n  $Found: find-object($Grids, $user-columns);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@import \"gutters/add\";\n@import \"gutters/find\";","// Accepts a gutter definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of gutter and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-gutter($Gutter-definition, $append-to-list)\n// - $gutter-definition : <definition>  See documentation for syntax:\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Gutters\n// - $append-to-list    : [list]        A list to append to.\n//                                      Defaults to $gutters if none is specified.\n@function add-gutter($gutter-definition, $custom-map: false) {\n  $Parsed:      parse-add($gutter-definition); // Parses Gutter definition to Gutter/breakpoint\n  $Gutter:        nth($Parsed, 1); // E. g. `(<Gutter>)`.\n  $Breakpoint:  nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First: sgs-get('mobile first');\n  $Gutter-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Gutter-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('gutters') {\n      $Gutter-Map: sgs-get('gutters');\n    }\n  }\n  $Gutter-Key-Length: length(map-keys($Gutter-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<Gutter>)`\n    $Gutter-Map: map-merge($Gutter-Map, (-1px: $Gutter));\n  }\n  // IF the list is initiated with a list of Gutter columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Gutter-Map, -1px)) {\n      $Gutter-Map: map-merge($Gutter-Map, map-get($Singularity-Settings, 'gutters'));\n    }\n    $Gutter-Map: map-merge($Gutter-Map, ($Breakpoint: $Gutter));\n  }\n\n  $Gutter-Map: sort-map($Gutter-Map, not $Mobile-First);\n\n  @return $Gutter-Map;\n}\n\n@mixin add-gutter($gutter-definition) {\n  $Add-Gutter: add-gutter($gutter-definition);\n  $HOLDER: sgs-set('gutters', $Add-Gutter);\n}","//////////////////////////////\n// Find gutter\n//\n// Finds the gutter that you are on.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-gutter($user-gutters: null) {\n\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Gutters: sgs-get('gutters');\n\n  $Found: find-object($Gutters, $user-gutters);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@import \"gutter-styles/add\";\n@import \"gutter-styles/find\";\n@import \"gutter-styles/helpers\";","// Accepts a gutter-style style definition in the human-readable format. Converts it to the internal format,\n// appends it to a list of gutter-style styles and returns the resulting list.\n//\n// Note that this function only returns a new list, it does not modify the source list.\n//\n// add-gutter-style-style($gutter-style-style-definition, $append-to-list)\n// - $gutter-style-definition : <definition>  See documentation for syntax:\n//                                      https://github.com/Team-Sass/Singularity/wiki/Creating-Grids\n// - $append-to-list    : [list]        A list to append to.\n//                                      Defaults to $gutter-styles if none is specified.\n@function add-gutter-style($gutter-style-definition, $custom-map: false) {\n  $Parsed:        parse-add($gutter-style-definition); // Parses gutter-style definition to gutter-style/breakpoint\n  $Gutter-Style:  nth($Parsed, 1); // E. g. `(<gutter-style>)`.\n  $Breakpoint:    nth($Parsed, 2); // Either `(<breakpoint>)` or false.\n  $Mobile-First:  sgs-get('mobile first');\n  $Gutter-Style-Map: ();\n\n  // Determine if a custom map or the default maps should be used.\n  @if $custom-map {\n    $Gutter-Style-Map: $custom-map;\n  }\n  @else {\n    @if sgs-has('gutter styles') {\n      $Gutter-Style-Map: sgs-get('gutter styles');\n    }\n  }\n  $Gutter-Style-Key-Length: length(map-keys($Gutter-Style-Map));\n\n  // Check whether the definition will be the first one in the list\n  // and whether it has no breakpoint specified.\n  @if $Breakpoint == null {\n    // Returns the first item of the list, e. g. `(<gutter-style>)`\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, (-1px: $Gutter-Style));\n  }\n  // IF the list is initiated with a list of gutter-style columns need to start off\n  // a comma seprated list.\n  @else {\n    @if not (map-has-key($Gutter-Style-Map, -1px)) {\n      $Gutter-Style-Map: map-merge($Gutter-Style-Map, map-get($Singularity-Settings, 'gutter styles'));\n    }\n    $Gutter-Style-Map: map-merge($Gutter-Style-Map, ($Breakpoint: $Gutter-Style));\n  }\n\n  $Gutter-Style-Map: sort-map($Gutter-Style-Map, not $Mobile-First);\n\n  @return $Gutter-Style-Map;\n}\n\n@mixin add-gutter-style($gutter-style-definition) {\n  $Add-gutter-style: add-gutter-style($gutter-style-definition);\n  $HOLDER: sgs-set('gutter styles', $Add-gutter-style);\n}","//////////////////////////////\n// Find gutter style\n//\n// Finds the gutter style that you are working with.\n// From Singularity\n// Must be using Breakpoint to work properly\n//////////////////////////////\n@function find-gutter-style($user-gutter-styles: null) {\n\n  // We supply a default if the user hasn't set any gutters and hasn't passed in a custom column set\n  // The default supplied is based on original Susy options\n  $Gutters-Styles: sgs-get('gutter styles');\n\n  $Found: find-object($Gutters-Styles, $user-gutter-styles);\n\n  @if length($Found) == 1 {\n    $Found: nth($Found, 1);\n  }\n\n  @return $Found;\n}","@function fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\n  @if index($user-gutter-style, 'fixed') {\n    // @debug 'Fixed in output style';\n    @return true;\n  }\n  @else if type-of($user-columns) == 'number' and not unitless($user-gutter) {\n    // @debug 'Equal columns with a unit based gutter';\n    @return true;\n  }\n  @else if type-of($user-columns) == 'list' {\n    @if unit(nth($user-columns, 1)) != unit($user-gutter) {\n      // @debug 'Columns and gutters are different units';\n      @return true;\n    }\n  }\n  @else {\n    @return false;\n  }\n\n  @return false;\n}\n\n@function gutter-property($user-columns, $user-gutter, $user-gutter-style) {\n  @if fixed-gutter($user-columns, $user-gutter, $user-gutter-style) {\n    @return 'padding';\n  }\n  @else {\n    @return 'margin';\n  }\n}","@import \"api/float\";\n@import \"api/isolation\";\n@import \"api/calc\";\n\n//////////////////////////////\n// Master Grid Span mixin\n//////////////////////////////\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\n\n  @if $output-style == null {\n    $output-style: sgs-get('output');\n  }\n\n  $Grid: find-grid($grid);\n  $Gutter: find-gutter($gutter);\n  $Style: find-gutter-style($gutter-style);\n\n  $Start-Row: start-row($location);\n  $End-Row: end-row($span, $location, $Grid);\n\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\n  $Split-Gutter: index($Style, 'split');\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\n\n  $Direction: sgs-get('direction');\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\n\n  $Holder: ();\n  @each $k, $v in $options {\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\n  }\n  $options: if(length($Holder) > 0, $Holder, null);\n\n  $Span-Map: (\n    'span': $span,\n    'location': $location,\n    'grid': $Grid,\n    'gutter': $Gutter,\n    'style': $Style,\n    'start row': $Start-Row,\n    'end row': $End-Row,\n    'fixed gutter': $Fixed-Gutter,\n    'split gutter': $Split-Gutter,\n    'gutter property': $Gutter-Property,\n    'options': $options\n  );\n\n  @if sgs-get('debug') != false {\n    -sgs-span-settings: inspect($Span-Map);\n  }\n\n\n  @if function-exists('output-#{$output-style}') {\n    $Left: ();\n    $Right: ();\n\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\n    }\n\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\n    }\n\n    $Left-Keys: map-keys($Left);\n    $Right-Keys: map-keys($Right);\n    $Exclude: ();\n\n    @each $key in $Left-Keys {\n      @if index($Right-Keys, $key) {\n        @if map-get($Right, $key) == map-get($Left, $key) {\n          $Exclude: append($Exclude, $key);\n        }\n      }\n    }\n\n    // Always try and print the Left value\n    @include grid-span-build-exclude($Left, $Exclude, false);\n\n    // If Direction is Both or RTL, add the RTL attribute selector\n    @if $Direction == 'both' or $Direction == 'rtl' {\n      [dir=\"rtl\"] & {\n        @include grid-span-build-exclude($Right, $Exclude, true);\n      }\n    }\n    @else {\n      @include grid-span-build-exclude($Right, $Exclude, true);\n    }\n  }\n  @else {\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\n  }\n}\n\n@mixin grid-span-build($property, $value) {\n  @if type-of($value) != 'map' {\n    #{$property}: $value;\n  }\n  @else {\n    @each $prefix, $val in $value {\n      #{$property}: $val;\n    }\n  }\n}\n\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\n  @each $property, $value in $properties {\n    @if $exclude {\n      @if not index($delta, $property) {\n        @include grid-span-build($property, $value);\n      }\n    }\n    @else {\n      @include grid-span-build($property, $value);\n    }\n  }\n}","@function output-float($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  @if $Start-Row {\n    $Location: 1;\n  }\n  @else if $End-Row {\n    $Location: column-count($Grid) - $Span + 1;\n  }\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n  $Return: map-merge($Return, ('clear': $Opp));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else if not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else if not $Fixed-Gutter {\n      @if $Start-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': 0));\n      }\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Float\n//\n// Makes working with Float easier, as it allows you to walk the grid for symmetric grids and easy applying of 'last' and 'first', as well as automatically building the verbose grid-span mixin call\n//////////////////////////////\n@mixin float-span($Span, $Location: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $row: false;\n\n  $Options: if($from, ('from': $from), null);\n\n  // Working around SASS treating a number like a list with one element\n  @if type-of($grid) == 'list' and length($grid) == 1 {\n    $grid: nth($grid, 1);\n  }\n\n  // Working with a symmetric grid\n  @if type-of($grid) == 'number' {\n    // Special treatment for non-numeric location\n    @if type-of($Location) != 'number' {\n      @if $Location == 'last' or $Location == 'omega' {\n        $Location: $grid - $Span + 1;\n      }\n      @else {\n        @if $Location == 'first' or $Location == 'alpha' {\n          $row: true;\n        }\n        $Location: 1;\n      }\n    }\n\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\n\n    @if $row {\n      clear: both;\n    }\n  }\n  // Working with an asymmetric grid, should have location provided\n  @else if type-of($grid) == 'list' and $Location != false {\n    @include grid-span($Span, $Location, $grid, $gutter, 'float', $gutter-style, $Options);\n  }\n  @else {\n    @warn 'Asymmetric Grids need a Location value as well as a span value in order to know where on the grid you are! Please include a location value!';\n  }\n}\n","@function output-isolation($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\n      }\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Isolation\n//\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': unquote($clear)));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\n}\n\n//////////////////////////////\n// Happy Syntax of Asymmetric Grids\n//\n// Makes working with asymmetric grids easier!\n//////////////////////////////\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\n\n  $Span: if($Span != false, $Span, 1);\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\n\n  $Options: ();\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n  $Options: if(length($Options) > 0, $Options, null);\n\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\n}","@function output-calc($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  @if unitless($Gutter) {\n    $ERROR-MESSAGE: \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\n    @if feature-exists(at-error) {\n      @error $ERROR-MESSAGE;\n    }\n    @else {\n      @warn $ERROR-MESSAGE;\n    }\n    @return $Return;\n  }\n\n  @if type-of($Grid) == 'number' {\n    $ERROR-MESSAGE: \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid or use another output style.\";\n    @if feature-exists(at-error) {\n      @error $ERROR-MESSAGE;\n    }\n    @else {\n      @warn $ERROR-MESSAGE;\n    }\n    @return $Return;\n  }\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Width: '';\n  $Margin: null;\n  $Min-Width: '(';\n\n  $Fixed: ();\n  $Fluid: ();\n  $Fixed-Totals: ('px': 0, 'em': 0, '%': 0);\n  $Gutter-Totals: if(str-index($Style, 'split'), $Gutter * length($Grid), $Gutter * (length($Grid) - 1));\n  $Fluid-Totals: 0;\n  $Fluid-Fixed-Sum: '';\n  $Single-Fluid: '';\n\n  @for $i from 1 through length($Grid) {\n    $Item: nth($Grid, $i);\n    @if not unitless($Item) {\n      $Fixed: map-merge($Fixed, ($i: $Item));\n    }\n    @else {\n      $Fluid: map-merge($Fluid, ($i: $Item));\n    }\n  }\n\n  @each $k, $v in $Fixed {\n    $Unit: unit($v);\n    $Running: map-get($Fixed-Totals, $Unit) + $v;\n    $Fixed-Totals: map-merge($Fixed-Totals, ($Unit: $Running));\n  }\n\n  @each $k, $v in $Fluid {\n    $Fluid-Totals: $Fluid-Totals + $v;\n  }\n\n  @each $k, $v in $Fixed-Totals {\n\n    @if $v != 0 {\n      $Fluid-Fixed-Sum: '#{$Fluid-Fixed-Sum}#{$v} + ';\n    }\n  }\n\n  // Width of a single fluid item, for calc()\n  $Single-Fluid: '((100% - (#{$Fluid-Fixed-Sum}#{$Gutter-Totals})) / (#{$Fluid-Totals}))';\n\n  // Margin Calculation\n  @if not $Start-Row or not $End-Row {\n    @if $Split-Gutter {\n      $Margin: '#{$Gutter / 2} + ';\n    }\n\n    @for $i from 1 to $Location {\n      @if unitless(nth($Grid, $i)) {\n        $Margin: '#{$Margin}(#{$Single-Fluid} * #{nth($Grid, $i)} + #{$Gutter}) + ';\n      }\n      @else {\n        $Margin: '#{$Margin}(#{nth($Grid, $i)} + #{$Gutter}) + ';\n      }\n    }\n  }\n  @if $Margin != null {\n    $Margin: str-slice($Margin, 0, -4);\n  }\n\n\n  // Width Calculation\n  @if $Span == 1 {\n    @if map-has-key($Fixed, $Location) {\n      $Return: map-merge($Return, ('width': map-get($Fixed, $Location)));\n    }\n    @else if map-has-key($Fluid, $Location) {\n      $Math: '(#{$Single-Fluid}) * #{nth($Grid, $Location)}';\n      $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Math)}), 'standard': calc(#{unquote($Math)})));\n      $Return: map-merge($Return, $Span-Map);\n    }\n  }\n  @else {\n    $Location-End: $Location + ($Span - 1);\n    $Fixed-Counter: 0;\n    @for $i from $Location through $Location-End {\n      @if unitless(nth($Grid, $i)) {\n        $Width: '#{$Width}(#{$Single-Fluid} * #{nth($Grid, $i)}';\n      }\n      @else {\n        $Fixed-Counter: $Fixed-Counter + 1;\n        $Min-Width: '#{$Min-Width}#{nth($Grid, $i)} + #{$Gutter} + ';\n        $Width: '#{$Width}(#{nth($Grid, $i)}';\n      }\n\n\n      @if $i != $Location-End {\n        $Width: '#{$Width} + #{$Gutter}) + ';\n      }\n      @else {\n        $Min-Width: str-slice($Min-Width, 0, -4);\n        @if $Fixed-Counter == 1 {\n          $Min-Width: '#{$Min-Width} - #{$Gutter}';\n        }\n        $Min-Width: '#{$Min-Width})';\n        $Width: '#{$Width})';\n      }\n    }\n\n    // Min width handling\n    @if $Min-Width != ')' {\n      $Min-Map: ('min-width': ('webkit' : -webkit-calc(#{unquote($Min-Width)}), 'standard': calc(#{unquote($Min-Width)}) ));\n\n      @if sgs-get('calc include min-width') {\n        $Return: map-merge($Return, $Min-Map);\n      }\n    }\n\n    $Span-Map: ('width': ('webkit': -webkit-calc(#{unquote($Width)}), 'standard': calc(#{unquote($Width)}) ) );\n    $Return: map-merge($Return, $Span-Map);\n  }\n\n  // Build margins and Floats\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter {\n      $Return: map-merge($Return, ('margin-#{$Opp}': $Gutter / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter / 2));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      $Margin-Map: ('margin-#{$Dir}': ('webkit': -webkit-calc(#{unquote($Margin)}), 'standard': calc(#{unquote($Margin)})));\n      $Return: map-merge($Return, $Margin-Map);\n    }\n  }\n\n  @return $Return;\n}\n\n\n\n//////////////////////////////\n// Happy Syntax for Calc\n//\n// Makes working with Calc easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin calc-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n\n  @if $gutter != false and unitless($gutter) {\n    @warn \"Calc output style uses fixed gutters (gutters with units). Please define fixed gutters to use calc\";\n  }\n\n  @if $grid != false and type-of($grid) == 'number' {\n    @warn \"Calc output style is designed to be used with asymmetric grids, especially with a mix of fixed and fluid columns. Please define an asymmetric grid.\";\n  }\n\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': $clear));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'calc', $gutter-style, $Options);\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function breakpoint-has($setting) {\n  @if map-has-key($breakpoint, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function breakpoint-get($setting) {\n  @if breakpoint-has($setting) {\n    @return map-get($breakpoint, $setting);\n  }\n  @else {\n    @return map-get($Breakpoint-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function breakpoint-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin breakpoint-change($setting, $value) {\n  $breakpoint-change: breakpoint-set($setting, $value);\n}\n\n@mixin breakpoint-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n@mixin bkpt-change($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n@mixin bkpt-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function breakpoint-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $breakpoint: map-remove($breakpoint, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin breakpoint-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}\n\n@mixin bkpt-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}","//////////////////////////////\n// Private Breakpoint Variables\n//////////////////////////////\n$private-breakpoint-context-holder: ();\n$private-breakpoint-query-count: 0 !default;\n\n//////////////////////////////\n// Breakpoint Has Context\n// Returns whether or not you are inside a Breakpoint query\n//////////////////////////////\n@function breakpoint-has-context() {\n  @if length($private-breakpoint-query-count) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Breakpoint Get Context\n// $feature: Input feature to get it's current MQ context. Returns false if no context\n//////////////////////////////\n@function breakpoint-get-context($feature) {\n  @if map-has-key($private-breakpoint-context-holder, $feature) {\n    $get: map-get($private-breakpoint-context-holder, $feature);\n    // Special handling of no-query from get side so /false/ prepends aren't returned\n    @if $feature == 'no-query' {\n      @if type-of($get) == 'list' and length($get) > 1 and nth($get, 1) == false {\n        $get: nth($get, length($get));\n      }\n    }\n    @return $get;\n  }\n  @else {\n    @if breakpoint-has-context() and $feature == 'media' {\n      @return breakpoint-get('default media');\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n//////////////////////////////\n// Private function to set context\n//////////////////////////////\n@function private-breakpoint-set-context($feature, $value) {\n  @if $value == 'monochrome' {\n    $feature: 'monochrome';\n  }\n\n  $current: map-get($private-breakpoint-context-holder, $feature);\n  @if $current and length($current) == $private-breakpoint-query-count {\n    @warn \"You have already queried against `#{$feature}`. Unexpected things may happen if you query against the same feature more than once in the same `and` query. Breakpoint is overwriting the current context with `#{$value}`\";\n  }\n\n  @if not map-has-key($private-breakpoint-context-holder, $feature) {\n    $v-holder: ();\n    @for $i from 1 to $private-breakpoint-query-count {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n  @else {\n    $v-holder: map-get($private-breakpoint-context-holder, $feature);\n    $length: length($v-holder);\n    @for $i from $length to $private-breakpoint-query-count - 1 {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n\n  @return true;\n}\n\n//////////////////////////////\n// Private function to reset context\n//////////////////////////////\n@mixin private-breakpoint-reset-contexts {\n  $private-breakpoint-context-holder: () !global;\n  $private-breakpoint-query-count: 0 !global;\n}","//////////////////////////////\n// Converts the input value to Base EMs\n//////////////////////////////\n@function breakpoint-to-base-em($value) {\n  $value-unit: unit($value);\n\n  // Will convert relative EMs into root EMs.\n  @if breakpoint-get('base font size') and type-of(breakpoint-get('base font size')) == 'number' and $value-unit == 'em' {\n    $base-unit: unit(breakpoint-get('base font size'));\n\n    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {\n      @return base-conversion($value) / base-conversion(breakpoint-get('base font size')) * 1em;\n    }\n    @else {\n      @warn '#{breakpoint-get(\\'base font size\\')} is not set in valid units for font size!';\n      @return false;\n    }\n  }\n  @else {\n    @return base-conversion($value);\n  }\n}\n\n@function base-conversion($value) {\n  $unit: unit($value);\n\n  @if $unit == 'px' {\n    @return $value / 16px * 1em;\n  }\n  @else if $unit == '%' {\n    @return $value / 100% * 1em;\n  }\n  @else if $unit == 'em' {\n    @return $value;\n  }\n  @else if $unit == 'pt' {\n    @return $value / 12pt * 1em;\n  }\n  @else {\n    @return $value;\n//    @warn 'Everything is terrible! What have you done?!';\n  }\n}\n\n//////////////////////////////\n// Returns whether the feature can have a min/max pair\n//////////////////////////////\n$breakpoint-min-max-features: 'color',\n                              'color-index',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'device-height',\n                              'device-width',\n                              'height',\n                              'monochrome',\n                              'resolution',\n                              'width';\n\n@function breakpoint-min-max($feature) {\n  @each $item in $breakpoint-min-max-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can have a string value\n//////////////////////////////\n$breakpoint-string-features:  'orientation',\n                              'scan',\n                              'color',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'pointer',\n                              'luminosity';\n\n@function breakpoint-string-value($feature) {\n  @each $item in $breakpoint-string-features {\n    @if breakpoint-min-max($item) {\n      @if $feature == 'min-#{$item}' or $feature == 'max-#{$item}' {\n        @return true;\n      }\n    }\n    @else if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature is a media type\n//////////////////////////////\n$breakpoint-media-types:  'all',\n                          'braille',\n                          'embossed',\n                          'handheld',\n                          'print',\n                          'projection',\n                          'screen',\n                          'speech',\n                          'tty',\n                          'tv';\n\n@function breakpoint-is-media($feature) {\n  @each $media in $breakpoint-media-types {\n    @if ($feature == $media) or ($feature == 'not #{$media}') or ($feature == 'only #{$media}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can stand alone\n//////////////////////////////\n$breakpoint-single-string-features: 'color',\n                                    'color-index',\n                                    'grid',\n                                    'monochrome';\n\n@function breakpoint-single-string($feature) {\n  @each $item in $breakpoint-single-string-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature\n//////////////////////////////\n@function breakpoint-is-resolution($feature) {\n  $resolutions: 'device-pixel-ratio', 'dpr';\n\n  @if breakpoint-get('transform resolutions') {\n    $resolutions: append($resolutions, 'resolution');\n  }\n\n  @each $reso in $resolutions {\n    @if index($feature, $reso) or index($feature, 'min-#{$reso}') or index($feature, 'max-#{$reso}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","//////////////////////////////\n// Import Parser Pieces\n//////////////////////////////\n@import \"parsers/query\";\n@import \"parsers/single\";\n@import \"parsers/double\";\n@import \"parsers/triple\";\n@import \"parsers/resolution\";\n\n$Memo-Exists: function-exists(memo-get) and function-exists(memo-set);\n\n//////////////////////////////\n// Breakpoint Function\n//////////////////////////////\n@function breakpoint($query, $contexts...) {\n  $run: true;\n  $return: ();\n\n  // Grab the Memo Output if Memoization can be a thing\n  @if $Memo-Exists {\n    $return: memo-get(breakpoint, breakpoint $query $contexts);\n\n    @if $return != null {\n      $run: false;\n    }\n  }\n\n  @if not $Memo-Exists or $run {\n    // Internal Variables\n    $query-string: '';\n    $query-fallback: false;\n    $return: ();\n\n    // Reserve Global Private Breakpoint Context\n    $holder-context: $private-breakpoint-context-holder;\n    $holder-query-count: $private-breakpoint-query-count;\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n\n    // Test to see if it's a comma-separated list\n    $or-list: if(list-separator($query) == 'comma', true, false);\n\n\n    @if ($or-list == false and breakpoint-get('legacy syntax') == false) {\n      $query-string: breakpoint-parse($query);\n    }\n    @else {\n      $length: length($query);\n\n      $last: nth($query, $length);\n      $query-fallback: breakpoint-no-query($last);\n\n      @if ($query-fallback != false) {\n        $length: $length - 1;\n      }\n\n      @if (breakpoint-get('legacy syntax') == true) {\n        $mq: ();\n\n        @for $i from 1 through $length {\n          $mq: append($mq, nth($query, $i), comma);\n        }\n\n        $query-string: breakpoint-parse($mq);\n      }\n      @else {\n        $query-string: '';\n        @for $i from 1 through $length {\n          $query-string: $query-string + if($i == 1, '', ', ') + breakpoint-parse(nth($query, $i));\n        }\n      }\n    }\n\n    $return: ('query': $query-string,\n        'fallback': $query-fallback,\n        'context holder': $private-breakpoint-context-holder,\n        'query count': $private-breakpoint-query-count\n    );\n    @if length($contexts) > 0 and nth($contexts, 1) != false {\n      @if $query-fallback != false {\n        $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n      }\n      $context-map: ();\n      @each $context in $contexts {\n        $context-map: map-merge($context-map, ($context: breakpoint-get-context($context)));\n      }\n      $return: map-merge($return, (context: $context-map));\n    }\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n    @if $Memo-Exists {\n      $holder: memo-set(breakpoint, breakpoint $query $contexts, $return);\n    }\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// General Breakpoint Parser\n//////////////////////////////\n@function breakpoint-parse($query) {\n  // Increase number of 'and' queries\n  $private-breakpoint-query-count: $private-breakpoint-query-count + 1 !global;\n\n  // Set up Media Type\n  $query-print: '';\n\n  $force-all: ((breakpoint-get('force all media type') == true) and (breakpoint-get('default media') == 'all'));\n  $empty-media: true;\n  @if ($force-all == true) or (breakpoint-get('default media') != 'all') {\n    // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n    $query-print: breakpoint-get('default media');\n    $empty-media: false;\n  }\n\n\n  $query-resolution: false;\n\n  $query-holder: breakpoint-parse-query($query);\n\n\n\n  // Loop over each parsed out query and write it to $query-print\n  $first: true;\n\n  @each $feature in $query-holder {\n    $length: length($feature);\n\n    // Parse a single feature\n    @if ($length == 1) {\n      // Feature is currently a list, grab the actual value\n      $feature: nth($feature, 1);\n\n      // Media Type must by convention be the first item, so it's safe to flat override $query-print, which right now should only be the default media type\n      @if (breakpoint-is-media($feature)) {\n        @if ($force-all == true) or ($feature != 'all') {\n          // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n          $query-print: $feature;\n          $empty-media: false;\n\n          // Set Context\n          $context-setter: private-breakpoint-set-context(media, $query-print);\n        }\n      }\n      @else {\n        $parsed: breakpoint-parse-single($feature, $empty-media, $first);\n        $query-print: '#{$query-print} #{$parsed}';\n        $first: false;\n      }\n    }\n    // Parse a double feature\n    @else if ($length == 2) {\n      @if (breakpoint-is-resolution($feature) != false) {\n        $query-resolution: $feature;\n      }\n      @else {\n        $parsed: null;\n        // If it's a string/number pair,\n        // we check to see if one is a single-string value,\n        // then we parse it as a normal double\n        $alpha: nth($feature, 1);\n        $beta: nth($feature, 2);\n        @if breakpoint-single-string($alpha) or breakpoint-single-string($beta) {\n          $parsed: breakpoint-parse-single($alpha, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n          $parsed: breakpoint-parse-single($beta, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n        }\n        @else {\n          $parsed: breakpoint-parse-double($feature, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n        }\n      }\n    }\n    // Parse a triple feature\n    @else if ($length == 3) {\n      $parsed: breakpoint-parse-triple($feature, $empty-media, $first);\n      $query-print: '#{$query-print} #{$parsed}';\n      $first: false;\n    }\n\n  }\n\n  @if ($query-resolution != false) {\n    $query-print: breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first);\n  }\n\n  // Loop through each feature that's been detected so far and append 'false' to the the value list to increment their counters\n  @each $f, $v in $private-breakpoint-context-holder {\n    $v-holder: $v;\n    $length: length($v-holder);\n    @if length($v-holder) < $private-breakpoint-query-count {\n      @for $i from $length to $private-breakpoint-query-count {\n        @if $f == 'media' {\n          $v-holder: append($v-holder, breakpoint-get('default media'));\n        }\n        @else {\n          $v-holder: append($v-holder, false);\n        }\n      }\n    }\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($f: $v-holder)) !global;\n  }\n\n  @return $query-print;\n}\n","@function breakpoint-parse-query($query) {\n  // Parse features out of an individual query\n  $feature-holder: ();\n  $query-holder: ();\n  $length: length($query);\n\n  @if $length == 2 {\n    // If we've got a string/number, number/string, check to see if it's a valid string/number pair or two singles\n    @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') or (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'string') {\n\n      $number: '';\n      $value: '';\n\n      @if type-of(nth($query, 1)) == 'string' {\n        $number: nth($query, 2);\n        $value: nth($query, 1);\n      }\n      @else {\n        $number: nth($query, 1);\n        $value: nth($query, 2);\n      }\n\n      // If the string value can be a single value, check to see if the number passed in is a valid input for said single value. Fortunately, all current single-value options only accept unitless numbers, so this check is easy.\n      @if breakpoint-single-string($value) {\n        @if unitless($number) {\n          $feature-holder: append($value, $number, space);\n          $query-holder: append($query-holder, $feature-holder, comma);\n          @return $query-holder;\n        }\n      }\n      // If the string is a media type, split the query\n      @if breakpoint-is-media($value) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $query-holder: append($query-holder, nth($query, 2));\n        @return $query-holder;\n      }\n      // If it's not a single feature, we're just going to assume it's a proper string/value pair, and roll with it.\n      @else {\n        $feature-holder: append($value, $number, space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n\n    }\n    // If they're both numbers, we assume it's a double and roll with that\n    @else if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {\n      $feature-holder: append(nth($query, 1), nth($query, 2), space);\n      $query-holder: append($query-holder, $feature-holder, comma);\n      @return $query-holder;\n    }\n    // If they're both strings and neither are singles, we roll with that.\n    @else if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'string') {\n      @if not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n    }\n  }\n  @else if $length == 3 {\n    // If we've got three items and none is a list, we check to see\n    @if type-of(nth($query, 1)) != 'list' and type-of(nth($query, 2)) != 'list' and type-of(nth($query, 3)) != 'list' {\n      // If none of the items are single string values and none of the values are media values, we're good.\n      @if (not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) and not breakpoint-single-string(nth($query, 3))) and  ((not breakpoint-is-media(nth($query, 1)) and not breakpoint-is-media(nth($query, 2)) and not breakpoint-is-media(nth($query, 3)))) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $feature-holder: append($feature-holder, nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n      // let's check to see if the first item is a media type\n      @else if breakpoint-is-media(nth($query, 1)) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $feature-holder: append(nth($query, 2), nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder);\n        @return $query-holder;\n      }\n    }\n  }\n\n  // If it's a single item, or if it's not a special case double or triple, we can simply return the query.\n  @return $query;\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"single/default\";\n\n@function breakpoint-parse-single($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // If it's a single feature that can stand alone, we let it\n  @if (breakpoint-single-string($feature)) {\n    $parsed: $feature;\n    // Set Context\n    $context-setter: private-breakpoint-set-context($feature, $feature);\n  }\n  // If it's not a stand alone feature, we pass it off to the default handler.\n  @else {\n    $parsed: breakpoint-parse-default($feature);\n  }\n\n  @return $leader + '(' + $parsed + ')';\n}\n","@function breakpoint-parse-default($feature) {\n  $default: breakpoint-get('default feature');\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($default, $feature);\n\n  @if (breakpoint-get('to ems') == true) and (type-of($feature) == 'number') {\n    @return '#{$default}: #{breakpoint-to-base-em($feature)}';\n  }\n  @else {\n    @return '#{$default}: #{$feature}';\n  }\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"double/default-pair\";\n@import \"double/double-string\";\n@import \"double/default\";\n\n@function breakpoint-parse-double($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  $first: nth($feature, 1);\n  $second: nth($feature, 2);\n\n  // If we've got two numbers, we know we need to use the default pair because there are no media queries that has a media feature that is a number\n  @if type-of($first) == 'number' and type-of($second) == 'number' {\n    $parsed: breakpoint-parse-default-pair($first, $second);\n  }\n  // If they are both strings, we send it through the string parser\n  @else if type-of($first) == 'string' and type-of($second) == 'string' {\n    $parsed: breakpoint-parse-double-string($first, $second);\n  }\n  // If it's a string/number pair, we parse it as a normal double\n  @else {\n    $parsed: breakpoint-parse-double-default($first, $second);\n  }\n\n  @return $leader + $parsed;\n}\n","@function breakpoint-parse-default-pair($first, $second) {\n  $default: breakpoint-get('default pair');\n  $min: '';\n  $max: '';\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$default}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$default}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$default}: #{$min}) and (max-#{$default}: #{$max})';\n}\n","@function breakpoint-parse-double-string($first, $second) {\n  $feature: '';\n  $value: '';\n\n  // Test to see which is the feature and which is the value\n  @if (breakpoint-string-value($first) == true) {\n    $feature: $first;\n    $value: $second;\n  }\n  @else if (breakpoint-string-value($second) == true) {\n    $feature: $second;\n    $value: $first;\n  }\n  @else {\n    @warn \"Neither #{$first} nor #{$second} is a valid media query name.\";\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @return '(#{$feature}: #{$value})';\n}","@function breakpoint-parse-double-default($first, $second) {\n  $feature: '';\n  $value: '';\n\n  @if type-of($first) == 'string' {\n    $feature: $first;\n    $value: $second;\n  }\n  @else {\n    $feature: $second;\n    $value: $first;\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @if (breakpoint-get('to ems') == true) {\n    $value: breakpoint-to-base-em($value);\n  }\n\n  @return '(#{$feature}: #{$value})'\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"triple/default\";\n\n@function breakpoint-parse-triple($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // separate the string features from the value numbers\n  $string: null;\n  $numbers: null;\n  @each $val in $feature {\n    @if type-of($val) == string {\n      $string: $val;\n    }\n    @else {\n      @if type-of($numbers) == 'null' {\n        $numbers: $val;\n      }\n      @else {\n        $numbers: append($numbers, $val);\n      }\n    }\n  }\n\n  $parsed: breakpoint-parse-triple-default($string, nth($numbers, 1), nth($numbers, 2));\n\n  @return $leader + $parsed;\n\n}\n","@function breakpoint-parse-triple-default($feature, $first, $second) {\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$feature}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$feature}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$feature}: #{$min}) and (max-#{$feature}: #{$max})';\n}\n","@import \"resolution/resolution\";\n\n@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  @if breakpoint-get('transform resolutions') and $query-resolution {\n    $resolutions: breakpoint-make-resolutions($query-resolution);\n    $length: length($resolutions);\n    $query-holder: '';\n\n    @for $i from 1 through $length {\n      $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';\n      @if $i == 1 {\n        $query-holder: $query;\n      }\n      @else {\n        $query-holder: '#{$query-holder}, #{$query}';\n      }\n    }\n\n    @return $query-holder;\n  }\n  @else {\n    // Return with attached resolution\n    @return $query-print;\n  }\n}\n","@function breakpoint-make-resolutions($resolution) {\n  $length: length($resolution);\n\n  $output: ();\n\n  @if $length == 2 {\n    $feature: '';\n    $value: '';\n\n    // Find which is number\n    @if type-of(nth($resolution, 1)) == 'number' {\n      $value: nth($resolution, 1);\n    }\n    @else {\n      $value: nth($resolution, 2);\n    }\n\n    // Determine min/max/standard\n    @if index($resolution, 'min-resolution') {\n      $feature: 'min-';\n    }\n    @else if index($resolution, 'max-resolution') {\n      $feature: 'max-';\n    }\n\n    $standard: '(#{$feature}resolution: #{$value})';\n\n    // If we're not dealing with dppx,\n    @if unit($value) != 'dppx' {\n      $base: 96dpi;\n      @if unit($value) == 'dpcm' {\n        $base: 243.84dpcm;\n      }\n      // Write out feature tests\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n    }\n    @else {\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';\n      $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n      $output: append($output, $fallback, space);\n    }\n\n  }\n\n  @return $output;\n}\n","@function breakpoint-no-query($query) {\n  @if type-of($query) == 'list' {\n    $keyword: nth($query, 1);\n\n    @if type-of($keyword) == 'string' and ($keyword == 'no-query' or $keyword == 'no query' or $keyword == 'fallback') {\n      @return nth($query, 2);\n    }\n    @else {\n      @return false;\n    }\n  }\n  @else {\n    @return false;\n  }\n}\n","////////////////////////\n// Default the Breakpoints variable\n////////////////////////\n$breakpoints: () !default;\n$BREAKPOINTS: () !default;\n\n////////////////////////\n// Respond-to API Mixin\n////////////////////////\n@mixin respond-to($context, $no-query: false) {\n  @if length($breakpoints) > 0 and length($BREAKPOINTS) == 0 {\n    @warn \"In order to avoid variable namespace collisions, we have updated the way to add breakpoints for respond-to. Please change all instances of `$breakpoints: add-breakpoint()` to `@include add-breakpoint()`. The `add-breakpoint()` function will be deprecated in a future release.\";\n    $BREAKPOINTS: $breakpoints !global;\n    $breakpoints: () !global;\n  }\n\n  @if type-of($BREAKPOINTS) != 'map' {\n    // Just in case someone writes gibberish to the $breakpoints variable.\n    @warn \"Your breakpoints aren't a map! `respond-to` expects a map. Please check the value of $BREAKPOINTS variable.\";\n    @content;\n  }\n  @else if map-has-key($BREAKPOINTS, $context) {\n    @include breakpoint(map-get($BREAKPOINTS, $context), $no-query) {\n      @content;\n    }\n  }\n  @else if not map-has-key($BREAKPOINTS, $context) {\n    @warn \"`#{$context}` isn't a defined breakpoint! Please add it using `$breakpoints: add-breakpoint(`#{$context}`, $value);`\";\n    @content;\n  }\n  @else {\n    @warn \"You haven't created any breakpoints yet! Make some already! `@include add-breakpoint($name, $bkpt)`\";\n    @content;\n  }\n}\n\n//////////////////////////////\n// Add Breakpoint to Breakpoints\n// TODO: Remove function in next release\n//////////////////////////////\n@function add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($breakpoints) == 0 {\n    @return $output;\n  }\n  @else {\n    @if map-has-key($breakpoints, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      @return $breakpoints;\n    }\n    @else if not map-has-key($breakpoints, $name) or $overwrite == true {\n      @return map-merge($breakpoints, $output);\n    }\n  }\n}\n\n@mixin add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($BREAKPOINTS) == 0 {\n    $BREAKPOINTS: $output !global;\n  }\n  @else {\n    @if map-has-key($BREAKPOINTS, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      $BREAKPOINTS: $BREAKPOINTS !global;\n    }\n    @else if not map-has-key($BREAKPOINTS, $name) or $overwrite == true {\n      $BREAKPOINTS: map-merge($BREAKPOINTS, $output) !global;\n    }\n  }\n}\n\n@function get-breakpoint($name: false) {\n  @if $name == false {\n    @return $BREAKPOINTS;\n  }\n  @else {\n    @return map-get($BREAKPOINTS, $name);\n  }\n}\n","@mixin legacy-settings-warning {\n  $legacyVars: (\n    'default-media': 'default media',\n    'default-feature': 'default feature',\n    'force-media-all': 'force all media type',\n    'to-ems': 'to ems',\n    'resolutions': 'transform resolutions',\n    'no-queries': 'no queries',\n    'no-query-fallbacks': 'no query fallbacks',\n    'base-font-size': 'base font size',\n    'legacy-syntax': 'legacy syntax'\n  );\n\n  @each $legacy, $new in $legacyVars {\n    @if global-variable-exists('breakpoint-' + $legacy) {\n      @warn \"In order to avoid variable namspace collisions, we have updated the way to change settings for Breakpoint. Please change all instances of `$breakpoint-#{$legacy}: {{setting}}` to `@include breakpoint-set('#{$new}', {{setting}})`. Variable settings, as well as this warning will be deprecated in a future release.\"\n    }\n  };\n\n  //////////////////////////////\n  // Hand correct each setting\n  //////////////////////////////\n  @if global-variable-exists('breakpoint-default-media') and $breakpoint-default-media != breakpoint-get('default media') {\n    @include breakpoint-set('default media', $breakpoint-default-media);\n  }\n  @if global-variable-exists('breakpoint-default-feature') and $breakpoint-default-feature != breakpoint-get('default feature') {\n    @include breakpoint-set('default feature', $breakpoint-default-feature);\n  }\n  @if global-variable-exists('breakpoint-force-media-all') and $breakpoint-force-media-all != breakpoint-get('force all media type') {\n    @include breakpoint-set('force all media type', $breakpoint-force-media-all);\n  }\n  @if global-variable-exists('breakpoint-to-ems') and $breakpoint-to-ems != breakpoint-get('to ems') {\n    @include breakpoint-set('to ems', $breakpoint-to-ems);\n  }\n  @if global-variable-exists('breakpoint-resolutions') and $breakpoint-resolutions != breakpoint-get('transform resolutions') {\n    @include breakpoint-set('transform resolutions', $breakpoint-resolutions);\n  }\n  @if global-variable-exists('breakpoint-no-queries') and $breakpoint-no-queries != breakpoint-get('no queries') {\n    @include breakpoint-set('no queries', $breakpoint-no-queries);\n  }\n  @if global-variable-exists('breakpoint-no-query-fallbacks') and $breakpoint-no-query-fallbacks != breakpoint-get('no query fallbacks') {\n    @include breakpoint-set('no query fallbacks', $breakpoint-no-query-fallbacks);\n  }\n  @if global-variable-exists('breakpoint-base-font-size') and $breakpoint-base-font-size != breakpoint-get('base font size') {\n    @include breakpoint-set('base font size', $breakpoint-base-font-size);\n  }\n  @if global-variable-exists('breakpoint-legacy-syntax') and $breakpoint-legacy-syntax != breakpoint-get('legacy syntax') {\n    @include breakpoint-set('legacy syntax', $breakpoint-legacy-syntax);\n  }\n}","/**\n * @file\n * partials/settings/_settings.core.scss\n */\n\n// Breakpoints.\n$shila-s-break: 525px !default;\n$shila-m-break: 801px !default;\n$shila-l-break: 1025px !default;\n$shila-breakpoints: (\n  's':  $shila-s-break,\n  'm':  $shila-m-break,\n  'l':  $shila-l-break,\n) !default;\n\n// The xs breakpoint is used to target xs only.\n$shila-xs-break: max-width 524px !default;\n\n// Default base font size.\n$shila-base-font-size: 16px !default;\n\n// Base font sizes for different breakpoints.\n$shila-s-font-size: 16px !default;\n$shila-m-font-size: 16px !default;\n$shila-l-font-size: 16px !default;\n$shila-breakpoint-font-sizes: (\n  's':  $shila-s-font-size,\n  'm':  $shila-m-font-size,\n  'l':  $shila-l-font-size,\n) !default;\n\n// Base line height. To keep things simple it is the same for all breakpoints.\n$shila-base-line-height: 1.3 !default;\n\n// Line height based spacing.\n$shila-base-spacing: $shila-base-line-height * 1rem !default;\n\n$shila-tiny-spacing-factor: .25 !default;\n$shila-small-spacing-factor: .5 !default;\n$shila-large-spacing-factor: 2 !default;\n$shila-huge-spacing-factor: 4 !default;\n\n$shila-tiny-spacing: $shila-base-spacing * $shila-tiny-spacing-factor;\n$shila-small-spacing: $shila-base-spacing * $shila-small-spacing-factor;\n$shila-large-spacing: $shila-base-spacing * $shila-large-spacing-factor;\n$shila-huge-spacing: $shila-base-spacing * $shila-huge-spacing-factor;\n","/**\n * @file\n * partials/settings/_settings.animations.scss\n */\n\n// Animations\n$shila-base-duration: 150ms !default;\n$shila-base-timing: ease !default;\n","/**\n * @file\n * partials/settings/_settings.colors.scss\n */\n\n// Colors\n$shila-blue: #1565c0 !default;\n$shila-white: hsl(0, 0%, 100%) !default;\n$shila-lightest-gray: hsl(0, 0%, 87.5%) !default;\n$shila-lighter-gray: hsl(0, 0%, 75%) !default;\n$shila-light-gray: hsl(0, 0%, 62.5%) !default;\n$shila-medium-gray: hsl(0, 0%, 50%) !default;\n$shila-dark-gray: hsl(0, 0%, 37.5%) !default;\n$shila-darker-gray: hsl(0, 0%, 25%) !default;\n$shila-darkest-gray: hsl(0, 0%, 12.5%) !default;\n$shila-black: hsl(0, 0%, 0%) !default;\n\n// Font Colors\n$shila-base-font-color: $shila-darkest-gray !default;\n$shila-action-color: $shila-blue !default;\n\n// Border Color\n$shila-base-border-color: $shila-lightest-gray !default;\n$shila-base-border: 1px solid $shila-base-border-color !default;\n\n// Background Colors\n$shila-base-background-color: $shila-white !default;\n$shila-content-background-color: $shila-base-background-color !default;\n","/**\n * @file\n * partials/settings/_settings.forms.scss\n */\n\n// Forms\n$shila-form-box-shadow: inset 0 1px 3px rgba(#000, 0.06) !default;\n$shila-form-box-shadow-focus: $shila-form-box-shadow, 0 0 5px adjust-color($shila-action-color, $lightness: -5%, $alpha: -0.3) !default;\n$shila-all-text-inputs: (\n  \"input[type='color']\",\n  \"input[type='date']\",\n  \"input[type='datetime']\",\n  \"input[type='datetime-local']\",\n  \"input[type='email']\",\n  \"input[type='month']\",\n  \"input[type='number']\",\n  \"input[type='password']\",\n  \"input[type='search']\",\n  \"input[type='tel']\",\n  \"input[type='text']\",\n  \"input[type='time']\",\n  \"input[type='url']\",\n  \"input[type='week']\",\n  \"input:not([type])\",\n  \"textarea\",\n) !default;\n\n// Buttons\n$shila-all-buttons: (\n  \"button\",\n  \"input[type='button']\",\n  \"input[type='reset']\",\n  \"input[type='submit']\",\n) !default;\n","/**\n * @file\n * partials/settings/_settings.typography.scss\n */\n\n// Typography\n\n$shila-font-stack-helvetica: (\n  \"Helvetica Neue\",\n  \"Helvetica\",\n  \"Arial\",\n  sans-serif,\n) !default;\n$shila-font-stack-georgia: (\n  \"Georgia\",\n  \"Times\",\n  \"Times New Roman\",\n  serif,\n) !default;\n\n$shila-base-font-family: $shila-font-stack-helvetica !default;\n$shila-heading-font-family: $shila-base-font-family !default;\n\n// Font Sizes\n\n$shila-h1-font-size: 2rem !default;\n$shila-h2-font-size: 1.5rem !default;\n$shila-h3-font-size: 1.17rem !default;\n$shila-h4-font-size: 1rem !default;\n$shila-h5-font-size: .83rem !default;\n$shila-h6-font-size: .67rem !default;\n\n$shila-heading-line-height: 1.2 !default;\n","/**\n * @file\n * partials/settings/_settings.layout.scss\n */\n\n// Default grid settings\n$shila-base-columns: 4 !default;\n$shila-s-columns:  8 !default;\n$shila-m-columns: 12 !default;\n$shila-l-columns: 16 !default;\n$shila-breakpoint-columns: (\n  's':  $shila-s-columns,\n  'm':  $shila-m-columns,\n  'l':  $shila-l-columns,\n) !default;\n$shila-gutter: 1 / 3 !default;\n$shila-debug-grid: false !default;\n$shila-background-grid-color: $shila-light-gray !default;\n\n// Set up default Singularity grid\n@include add-grid($shila-base-columns);\n@each $breakpoint-key, $columns in $shila-breakpoint-columns {\n  @include add-grid($columns at map-get($shila-breakpoints, $breakpoint-key));\n}\n@include add-gutter($shila-gutter);\n@include sgs-change('debug', $shila-debug-grid);\n\n// Horizontal layout\n$shila-max-width: 1200px !default;\n$shila-base-side-spacing: 5% !default;\n$shila-breakpoint-side-spacings: (\n  's': $shila-base-spacing,\n) !default;\n\n// Other Sizes\n$shila-base-border-radius: 3px !default;\n$shila-base-z-index: 0 !default;\n","/**\n * @file\n * partials/tools/_tools.core.scss\n */\n\n@function shila-breakpoint($breakpoint-key) {\n  @return map-get($shila-breakpoints, $breakpoint-key);\n}\n\n@function shila-base-font-size($breakpoint-key: null) {\n  @if $breakpoint-key {\n    @return map-get($shila-breakpoint-font-sizes, $breakpoint-key);\n  }\n  @return $shila-base-font-size;\n}\n\n// Calculate a pixel-based line-height.\n@function shila-pixel-line-height($breakpoint-key: null) {\n  @if breakpoint-key {\n    @return round(shila-base-font-size($breakpoint-key) * $shila-base-line-height);\n  }\n  @return round($shila-base-font-size * $shila-base-line-height);\n}\n\n@function shila-columns($breakpoint-key: null) {\n  @if $breakpoint-key {\n    @return map-get($shila-breakpoint-columns, $breakpoint-key);\n  }\n  @return $shila-base-columns;\n}\n","/**\n * @file\n * partials/tools/_tools.clearfix.scss\n */\n\n@mixin shila-clearfix {\n  &::after {\n    clear: both;\n    content: '';\n    display: table;\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.colors.scss\n */\n\n/// Checks for a valid CSS color.\n///\n/// @argument {string} $color\n///\n/// @return {boolean}\n///\n/// @access private\n\n@function _shila-is-color($color) {\n  @return (type-of($color) == color) or ($color == \"currentColor\");\n}\n\n/// Mixes a color with black.\n///\n/// @argument {color} $color\n///\n/// @argument {number (percentage)} $percent\n///   The amount of black to be mixed in.\n///\n/// @return {color}\n///\n/// @example scss\n///   .element {\n///     background-color: shade(#ffbb52, 60%);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     background-color: #664a20;\n///   }\n\n@function shila-shade(\n  $color,\n  $percent\n) {\n\n  @if not _shila-is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n           \"the `shade` mixin.\";\n  } @else {\n    @return mix(#000, $color, $percent);\n  }\n}\n\n/// Mixes a color with white.\n///\n/// @argument {color} $color\n///\n/// @argument {number (percentage)} $percent\n///   The amount of white to be mixed in.\n///\n/// @return {color}\n///\n/// @example scss\n///   .element {\n///     background-color: tint(#6ecaa6, 40%);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     background-color: #a8dfc9;\n///   }\n\n@function shila-tint(\n  $color,\n  $percent\n) {\n\n  @if not _shila-is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n           \"the `tint` mixin.\";\n  } @else {\n    @return mix(#fff, $color, $percent);\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.constants.scss\n */\n\n// Returns the opposition position for the position given.\n@function shila-opposite-position($from) {\n  @if ($from == top) {\n    @return bottom;\n  } @else if ($from == bottom) {\n    @return top;\n  } @else if ($from == left) {\n    @return right;\n  } @else if ($from == right) {\n    @return left;\n  } @else if ($from == center) {\n    @return center;\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.font-size.scss\n */\n\n// Calculate a unitless line height for the given font size.\n@function shila-line-height($font-size, $breakpoint-key: null) {\n  @return ceil($font-size / shila-pixel-line-height($breakpoint-key)) * (shila-pixel-line-height($breakpoint-key) / $font-size);\n}\n\n// Generate a font-size and baseline-compatible line-height.\n@mixin shila-font-size($font-size, $breakpoint-key: null, $line-height: auto, $important: false) {\n\n  @if (type-of($font-size) == number) {\n    @if (unit($font-size) != \"px\") {\n      @error \"`#{$font-size}` needs to be a pixel value.\";\n    }\n  } @else {\n    @error \"`#{$font-size}` needs to be a number.\";\n  }\n\n  @if ($important == true) {\n    $important: !important;\n  } @elseif ($important == false) {\n    $important: null;\n  } @else {\n    @error \"`#{$important}` needs to be `true` or `false`.\"\n  }\n\n  // We provide a `px` fallback for old IEs not supporting `rem` values.\n  font-size: $font-size $important;\n  font-size: ($font-size / shila-base-font-size($breakpoint-key)) * 1rem $important;\n\n  @if ($line-height == 'auto') {\n    line-height: shila-line-height($font-size, $breakpoint-key) $important;\n  }\n\n  @else {\n\n    @if (type-of($line-height) == number or $line-height == 'inherit' or $line-height == 'normal') {\n      line-height: $line-height $important;\n    }\n\n    @elseif ($line-height != 'none' and $line-height != false) {\n      @error \"D’oh! `#{$line-height}` is not a valid value for `$line-height`.\"\n    }\n\n  }\n\n}\n\n@mixin shila-breakpoint-font-sizes($base-font-size, $breakpoint-font-sizes: (), $line-height: auto, $important: false) {\n  @include shila-font-size($base-font-size, null, $line-height, $important);\n  $last-font-size: $base-font-size;\n  @each $breakpoint-key, $base-font-size in $shila-breakpoint-font-sizes {\n    @if (map-has-key($breakpoint-font-sizes, $breakpoint-key)) {\n      $last-font-size: map-get($breakpoint-font-sizes, $breakpoint-key);\n    }\n    @include breakpoint(shila-breakpoint($breakpoint-key)) {\n      @include shila-font-size($last-font-size, $breakpoint-key, $line-height, $important);\n    }\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.hidden.scss\n */\n\n// Hides text in an element so you can see the background.\n@mixin shila-hide-text {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}\n","/**\n * @file\n * partials/tools/_tools.layout.scss\n */\n\n// Reset the box model measurements.\n@mixin shila-reset-box-model {\n  margin: 0;\n  padding: 0;\n  border: 0;\n}\n\n@mixin shila-outer-container {\n  max-width: $shila-max-width;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n@mixin shila-side-margins {\n  margin-left: $shila-base-side-spacing;\n  margin-right: $shila-base-side-spacing;\n  @each $breakpoint-key, $side-spacing in $shila-breakpoint-side-spacings {\n    @include breakpoint(shila-breakpoint($breakpoint-key)) {\n      margin-left: $side-spacing;\n      margin-right: $side-spacing;\n    }\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.lists.scss\n */\n\n// Turn off the bullet for an element of a list\n@mixin shila-no-bullet {\n  list-style-image: none;\n  list-style-type: none;\n  margin-left: 0;\n}\n\n// turns off the bullets for an entire list\n@mixin shila-no-bullets {\n  list-style: none;\n  li {\n    @include shila-no-bullet;\n  }\n}\n\n// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.\n// This is not an inline list.\n//\n// Setting `$padding` to `false` disables the padding between list elements\n@mixin shila-horizontal-list($padding: 4px, $direction: left) {\n  @include shila-reset-box-model;\n  @include shila-clearfix;\n  li {\n    @include shila-no-bullet;\n    white-space: nowrap;\n    float: $direction;\n    @if $padding {\n      padding: {\n        left: $padding;\n        right: $padding;\n      }\n      &:first-child,\n      &.first {\n        padding-#{$direction}: 0;\n      }\n      &:last-child {\n        padding-#{shila-opposite-position($direction)}: 0;\n      }\n      &.last {\n        padding-#{shila-opposite-position($direction)}: 0;\n      }\n    }\n  }\n}\n\n@mixin shila-horizontal-nav(\n  $spacing: $shila-small-spacing,\n  $color: $shila-medium-gray,\n  $active-color: $shila-dark-gray\n) {\n  @include shila-reset-box-model;\n  text-align: center;\n  li {\n    display: inline-block;\n  }\n  li + li {\n    padding-left: $spacing;\n  }\n  a {\n    color: $color;\n    text-decoration: none;\n    transition: color $shila-base-duration $shila-base-timing;\n    &:active,\n    &:focus,\n    &:hover {\n      color: $active-color;\n    }\n  }\n  .is-active {\n    color: $active-color;\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.multicol-layout.scss\n */\n\n@mixin shila-do-multicol-layout($inner-columns: 1, $selector: &) {\n  @for $i from 1 through $inner-columns {\n    #{$selector}:nth-child(#{$inner-columns}n+#{$i}) {\n      @if ($i == 1) {\n        @include isolation-span(1, $i, both);\n      } @else {\n        @include isolation-span(1, $i, none);\n      }\n    }\n  }\n}\n\n/// Multi-column layout.\n///\n/// @param {Number} $inner-columns\n///   Number of inner columns.\n/// @param {Number} $outer-columns\n///   Number of columns in parent element.\n/// @param $selector [&]\n///   Selector to use if not targeting current parent selector.\n/// @param $gutter [$shila-gutter]\n///   Gutter size of parent element.\n@mixin shila-multicol-layout(\n  $inner-columns: 1,\n  $outer-columns: $shila-base-columns,\n  $selector: &,\n  $gutter: $shila-gutter\n) {\n  $scaled-gutter: $gutter / ($outer-columns / $inner-columns);\n  @include layout($inner-columns, $scaled-gutter) {\n    @include shila-do-multicol-layout($inner-columns, $selector);\n  }\n}\n\n/// Multi-column layout with breakpoints.\n///\n/// @param {Number} $base-inner-columns\n///   Number of inner columns [1]\n/// @param {Map} $breakpoint-inner-columns [('s': 2, 'm': 3, 'l': 4)]\n///   Number of inner columns for specified breakpoints.\n/// @param {Number} $base-outer-columns [$shila-base-columns]\n///   Number of columns in parent element.\n/// @param {Map} $breakpoint-outer-columns [$shila-breakpoint-columns]\n///   Number of columns in parent element for specified breakpoints.\n///   Must contain all the keys that are in $breakpoint-inner-columns.\n/// @param $selector [&]\n///   Selector to use if not targeting current parent selector.\n/// @param $gutter [$shila-gutter]\n///   Gutter size of parent element.\n@mixin shila-multicol-breakpoint-layout(\n  $base-inner-columns: 1,\n  $breakpoint-inner-columns: ('s': 2, 'm': 3, 'l': 4),\n  $base-outer-columns: $shila-base-columns,\n  $breakpoint-outer-columns: $shila-breakpoint-columns,\n  $selector: &,\n  $gutter: $shila-gutter\n) {\n  @include shila-multicol-layout(\n    $base-inner-columns, $base-outer-columns, $selector, $gutter\n  );\n  @each $breakpoint-key, $inner-columns in $breakpoint-inner-columns {\n    @include breakpoint(shila-breakpoint($breakpoint-key)) {\n      @include shila-multicol-layout(\n        $inner-columns,\n        map-get($breakpoint-outer-columns, $breakpoint-key),\n        $selector,\n        $gutter\n      );\n    }\n  }\n}\n","/**\n * @file\n * partials/tools/_tools.sass-lists.scss\n */\n\n// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/\n@function shila-first($list) {\n  @return nth($list, 1);\n}\n@function shila-last($list) {\n  @return nth($list, length($list));\n}\n"],"names":[],"mappings":"AAAA;;;GAGG;ACHH;;;;;;;GAOG;AsDPH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG"} */
