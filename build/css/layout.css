/**
 * @file
 * sass/layout.scss
 *
 * CSS rules that layout a page.
 */
/**
 * @file
 * sass/partials/_imports.scss
 *
 * Global imports.
 *
 * Importing this file must not generate any CSS.
 */
/**
 * @file
 * partials/settings/_settings.core.scss
 */
/**
 * @file
 * partials/settings/_settings.animations.scss
 */
/**
 * @file
 * partials/settings/_settings.colors.scss
 */
/**
 * @file
 * partials/settings/_settings.forms.scss
 */
/**
 * @file
 * partials/settings/_settings.typography.scss
 */
/**
 * @file
 * partials/settings/_settings.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.core.scss
 */
/**
 * @file
 * partials/tools/_tools.clearfix.scss
 */
/**
 * @file
 * partials/tools/_tools.colors.scss
 */
/**
 * @file
 * partials/tools/_tools.constants.scss
 */
/**
 * @file
 * partials/tools/_tools.font-size.scss
 */
/**
 * @file
 * partials/tools/_tools.hidden.scss
 */
/**
 * @file
 * partials/tools/_tools.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.lists.scss
 */
/**
 * @file
 * partials/tools/_tools.multicol-layout.scss
 */
/**
 * @file
 * partials/tools/_tools.sass-lists.scss
 */
/**
 * @file
 * molecules/components/shila-card/_shila-card-layout.scss
 */
/**
 * @file
 * organisms/global/shila-off-canvas/_shila-off-canvas-layout.scss
 *
 * Pure CSS implementation (no JavaScript required).
 */
/**
 * @file
 * organisms/sections/shila-card-list/_shila-card-list-layout.scss
 */
/**
 * @file
 * templates/_global-layout.scss
 */
.layout-container::after,
.page::after,
.page > *::after,
.region-wrapper::after,
.region::after {
  clear: both;
  content: '';
  display: table;
}

.region-wrapper {
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
}

.region:not(.region--off-canvas) {
  margin-left: 5%;
  margin-right: 5%;
}

@media (min-width: 525px) {
  .region:not(.region--off-canvas) {
    margin-left: 1.3rem;
    margin-right: 1.3rem;
  }
}

.page {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.page-header,
.page-footer {
  flex: none;
}

.page-content {
  flex: 1 0 auto;
}

.region-wrapper,
.region {
  height: 100%;
}

@media (min-width: 525px) {
  #off-canvas-checkbox,
  #off-canvas-label,
  .off-canvas {
    display: none;
  }
  .off-canvas-hidden {
    display: block;
  }
}

@media (max-width: 524px) {
  .layout-container {
    width: 100%;
    height: 100%;
    overflow-x: hidden;
  }
  #off-canvas-checkbox {
    display: block;
    position: absolute;
    top: -9999px;
    left: -9999px;
  }
  #off-canvas-label {
    display: block;
    position: fixed;
    right: 0;
    z-index: 501;
    width: 64px;
    height: 64px;
    padding: 10px;
    background-position: 10px 10px;
    background-size: 44px 44px;
    background-repeat: no-repeat;
    background-image: url("../images/menu.png");
    background-image: url("../images/menu.svg");
    cursor: pointer;
    transition: right 0.4s;
  }
  .off-canvas {
    display: block;
    position: fixed;
    height: 100%;
    overflow: hidden;
    overflow-y: auto;
    right: -80%;
    width: 80%;
    transition: right 0.4s;
  }
}

@media (max-width: 524px) and (min-width: 525px) {
  .off-canvas {
    right: -20rem;
    width: 20rem;
  }
}

@media (max-width: 524px) and (min-width: 801px) {
  .off-canvas {
    right: -20rem;
    width: 20rem;
  }
}

@media (max-width: 524px) and (min-width: 1025px) {
  .off-canvas {
    right: -20rem;
    width: 20rem;
  }
}

@media (max-width: 524px) {
  .off-canvas-hidden {
    display: none;
  }
  .page {
    position: absolute;
    right: 0;
    width: 100%;
    height: auto;
    overflow: visible;
    transition: right 0.4s;
  }
  .page-header {
    position: fixed;
    z-index: 500;
    height: 64px;
  }
  .page-content {
    margin-top: 64px;
  }
  #off-canvas-checkbox:checked ~ .page {
    position: fixed;
    height: 100%;
    overflow: hidden;
  }
  #off-canvas-checkbox:checked ~ .page .page-header {
    position: static;
  }
  #off-canvas-checkbox:checked ~ .page .page-content {
    margin-top: 0;
  }
  #off-canvas-checkbox:checked ~ #off-canvas-label,
  #off-canvas-checkbox:checked ~ .page {
    right: 80%;
  }
}

@media (max-width: 524px) and (min-width: 525px) {
  #off-canvas-checkbox:checked ~ #off-canvas-label,
  #off-canvas-checkbox:checked ~ .page {
    right: 20rem;
  }
}

@media (max-width: 524px) and (min-width: 801px) {
  #off-canvas-checkbox:checked ~ #off-canvas-label,
  #off-canvas-checkbox:checked ~ .page {
    right: 20rem;
  }
}

@media (max-width: 524px) and (min-width: 1025px) {
  #off-canvas-checkbox:checked ~ #off-canvas-label,
  #off-canvas-checkbox:checked ~ .page {
    right: 20rem;
  }
}

@media (max-width: 524px) {
  #off-canvas-checkbox:checked ~ .off-canvas {
    right: 0;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
