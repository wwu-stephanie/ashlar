/**
 * @file
 * sass/state.scss
 *
 * CSS rules that style states and are not included with components.
 */
/**
 * @file
 * sass/partials/_imports.scss
 *
 * Global imports.
 *
 * Importing this file must not generate any CSS.
 */
/**
 * @file
 * partials/settings/_settings.core.scss
 */
/**
 * @file
 * partials/settings/_settings.animations.scss
 */
/**
 * @file
 * partials/settings/_settings.colors.scss
 */
/**
 * @file
 * partials/settings/_settings.forms.scss
 */
/**
 * @file
 * partials/settings/_settings.typography.scss
 */
/**
 * @file
 * partials/settings/_settings.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.core.scss
 */
/**
 * @file
 * partials/tools/_tools.clearfix.scss
 */
/**
 * @file
 * partials/tools/_tools.colors.scss
 */
/**
 * @file
 * partials/tools/_tools.constants.scss
 */
/**
 * @file
 * partials/tools/_tools.font-size.scss
 */
/**
 * @file
 * partials/tools/_tools.hidden.scss
 */
/**
 * @file
 * partials/tools/_tools.layout.scss
 */
/**
 * @file
 * partials/tools/_tools.lists.scss
 */
/**
 * @file
 * partials/tools/_tools.multicol-layout.scss
 */
/**
 * @file
 * partials/tools/_tools.sass-lists.scss
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuY3NzIiwic291cmNlcyI6WyJzdGF0ZS5zY3NzIiwicGFydGlhbHMvX2ltcG9ydHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL19zaW5ndWxhcml0eWdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL19oZWxwZXJzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2hlbHBlcnMvX3NldHRpbmdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2hlbHBlcnMvX2ZpbmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvaGVscGVycy9fc2Fzcy1saXN0cy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9oZWxwZXJzL19jb2x1bW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2hlbHBlcnMvX3NwYW4tc2hhcmVkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2hlbHBlcnMvX2RpcmVjdGlvbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvaGVscGVycy9fc29ydC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9oZWxwZXJzL19iYWNrZ3JvdW5kLWdyaWQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvaGVscGVycy9fbGF5b3V0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL19sYW5ndWFnZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9sYW5ndWFnZS9fcGFyc2UtbGlzdC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9sYW5ndWFnZS9fcGFyc2UtYWRkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2xhbmd1YWdlL19zcGFuLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL19tYXRoLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL21hdGgvX2NvbHVtbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvbWF0aC9fZ3V0dGVycy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9tYXRoL19jb250ZXh0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL21hdGgvX2dyaWQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvX2dyaWRzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2dyaWRzL19hZGQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvZ3JpZHMvX2ZpbmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvX2d1dHRlcnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvZ3V0dGVycy9fYWRkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2d1dHRlcnMvX2ZpbmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvX2d1dHRlci1zdHlsZXMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvZ3V0dGVyLXN0eWxlcy9fYWRkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2d1dHRlci1zdHlsZXMvX2ZpbmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvZ3V0dGVyLXN0eWxlcy9faGVscGVycy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Npbmd1bGFyaXR5Z3Mvc3R5bGVzaGVldHMvc2luZ3VsYXJpdHlncy9fYXBpLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2luZ3VsYXJpdHlncy9zdHlsZXNoZWV0cy9zaW5ndWxhcml0eWdzL2FwaS9fZmxvYXQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvYXBpL19pc29sYXRpb24uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaW5ndWxhcml0eWdzL3N0eWxlc2hlZXRzL3Npbmd1bGFyaXR5Z3MvYXBpL19jYWxjLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL19icmVha3BvaW50LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvX3NldHRpbmdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvX2NvbnRleHQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9faGVscGVycy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2JyZWFrcG9pbnQtc2Fzcy9zdHlsZXNoZWV0cy9icmVha3BvaW50L19wYXJzZXJzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvcGFyc2Vycy9fcXVlcnkuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9wYXJzZXJzL19zaW5nbGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9wYXJzZXJzL3NpbmdsZS9fZGVmYXVsdC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2JyZWFrcG9pbnQtc2Fzcy9zdHlsZXNoZWV0cy9icmVha3BvaW50L3BhcnNlcnMvX2RvdWJsZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2JyZWFrcG9pbnQtc2Fzcy9zdHlsZXNoZWV0cy9icmVha3BvaW50L3BhcnNlcnMvZG91YmxlL19kZWZhdWx0LXBhaXIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9wYXJzZXJzL2RvdWJsZS9fZG91YmxlLXN0cmluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2JyZWFrcG9pbnQtc2Fzcy9zdHlsZXNoZWV0cy9icmVha3BvaW50L3BhcnNlcnMvZG91YmxlL19kZWZhdWx0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvcGFyc2Vycy9fdHJpcGxlLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvcGFyc2Vycy90cmlwbGUvX2RlZmF1bHQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9wYXJzZXJzL19yZXNvbHV0aW9uLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvcGFyc2Vycy9yZXNvbHV0aW9uL19yZXNvbHV0aW9uLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvX25vLXF1ZXJ5LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnJlYWtwb2ludC1zYXNzL3N0eWxlc2hlZXRzL2JyZWFrcG9pbnQvX3Jlc3BvbmQtdG8uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9icmVha3BvaW50LXNhc3Mvc3R5bGVzaGVldHMvYnJlYWtwb2ludC9fbGVnYWN5LXNldHRpbmdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5jb3JlLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5hbmltYXRpb25zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5jb2xvcnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvc2V0dGluZ3MvX3NldHRpbmdzLmZvcm1zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy50eXBvZ3JhcGh5LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5sYXlvdXQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvdG9vbHMvX3Rvb2xzLmNvcmUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvdG9vbHMvX3Rvb2xzLmNsZWFyZml4LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3Rvb2xzL190b29scy5jb2xvcnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvdG9vbHMvX3Rvb2xzLmNvbnN0YW50cy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3NoaWxhLWNzcy9wYXJ0aWFscy90b29scy9fdG9vbHMuZm9udC1zaXplLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2hpbGEtY3NzL3BhcnRpYWxzL3Rvb2xzL190b29scy5oaWRkZW4uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvdG9vbHMvX3Rvb2xzLmxheW91dC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3NoaWxhLWNzcy9wYXJ0aWFscy90b29scy9fdG9vbHMubGlzdHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zaGlsYS1jc3MvcGFydGlhbHMvdG9vbHMvX3Rvb2xzLm11bHRpY29sLWxheW91dC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3NoaWxhLWNzcy9wYXJ0aWFscy90b29scy9fdG9vbHMuc2Fzcy1saXN0cy5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVcbiAqIHNhc3Mvc3RhdGUuc2Nzc1xuICpcbiAqIENTUyBydWxlcyB0aGF0IHN0eWxlIHN0YXRlcyBhbmQgYXJlIG5vdCBpbmNsdWRlZCB3aXRoIGNvbXBvbmVudHMuXG4gKi9cblxuQGltcG9ydCAncGFydGlhbHMvaW1wb3J0cyc7XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBzYXNzL3BhcnRpYWxzL19pbXBvcnRzLnNjc3NcbiAqXG4gKiBHbG9iYWwgaW1wb3J0cy5cbiAqXG4gKiBJbXBvcnRpbmcgdGhpcyBmaWxlIG11c3Qgbm90IGdlbmVyYXRlIGFueSBDU1MuXG4gKi9cblxuQGltcG9ydCAnc2luZ3VsYXJpdHlncyc7XG5AaW1wb3J0ICdicmVha3BvaW50JztcblxuQGltcG9ydCAncGFydGlhbHMvc2V0dGluZ3Mvc2V0dGluZ3MuY29yZSc7XG5AaW1wb3J0ICdwYXJ0aWFscy9zZXR0aW5ncy9zZXR0aW5ncy5hbmltYXRpb25zJztcblxuQGltcG9ydCAncGFydGlhbHMvc2V0dGluZ3Mvc2V0dGluZ3MuY29sb3JzJztcblxuQGltcG9ydCAncGFydGlhbHMvc2V0dGluZ3Mvc2V0dGluZ3MuZm9ybXMnO1xuQGltcG9ydCAncGFydGlhbHMvc2V0dGluZ3Mvc2V0dGluZ3MudHlwb2dyYXBoeSc7XG5AaW1wb3J0ICdwYXJ0aWFscy9zZXR0aW5ncy9zZXR0aW5ncy5sYXlvdXQnO1xuQGltcG9ydCAncGFydGlhbHMvdG9vbHMvdG9vbHMuY29yZSc7XG5AaW1wb3J0ICdwYXJ0aWFscy90b29scy90b29scy5jbGVhcmZpeCc7XG5AaW1wb3J0ICdwYXJ0aWFscy90b29scy90b29scy5jb2xvcnMnO1xuQGltcG9ydCAncGFydGlhbHMvdG9vbHMvdG9vbHMuY29uc3RhbnRzJztcbkBpbXBvcnQgJ3BhcnRpYWxzL3Rvb2xzL3Rvb2xzLmZvbnQtc2l6ZSc7XG5AaW1wb3J0ICdwYXJ0aWFscy90b29scy90b29scy5oaWRkZW4nO1xuQGltcG9ydCAncGFydGlhbHMvdG9vbHMvdG9vbHMubGF5b3V0JztcbkBpbXBvcnQgJ3BhcnRpYWxzL3Rvb2xzL3Rvb2xzLmxpc3RzJztcbkBpbXBvcnQgJ3BhcnRpYWxzL3Rvb2xzL3Rvb2xzLm11bHRpY29sLWxheW91dCc7XG5AaW1wb3J0ICdwYXJ0aWFscy90b29scy90b29scy5zYXNzLWxpc3RzJztcbiIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRGVmYXVsdCBTZXR0aW5nc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4kU2luZ3VsYXJpdHktU2V0dGluZ3M6IChcbiAgJ2dyaWRzJzogKC0xcHg6IDEyKSxcbiAgJ2d1dHRlcnMnOiAoLTFweDogLjI1KSxcbiAgJ2d1dHRlciBzdHlsZXMnOiAoLTFweDogJ29wcG9zaXRlJyksXG4gICdvdXRwdXQnOiAnaXNvbGF0aW9uJyxcbiAgJ2RpcmVjdGlvbic6ICdsdHInLFxuICAnbW9iaWxlIGZpcnN0JzogdHJ1ZSxcbiAgJ2luY2x1ZGUgYm9yZGVyIGJveCc6IGZhbHNlLFxuICAnaW5jbHVkZSBjbGVhcmZpeCc6IGZhbHNlLFxuICAnYmFja2dyb3VuZCBncmlkIGNvbG9yJzogY2hvY29sYXRlLFxuICAnYXN5bW1ldHJpYyBvdXRwdXQnOiAnaXNvbGF0aW9uJyxcbiAgJ2NhbGMgaW5jbHVkZSBtaW4td2lkdGgnOiB0cnVlLFxuICAnZGVidWcnOiBmYWxzZVxuKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVc2VyIFNldHRpbmdzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiRzaW5ndWxhcml0eTogKCkgIWRlZmF1bHQ7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW1wb3J0IEdlbmVyYWwgSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwic2luZ3VsYXJpdHlncy9oZWxwZXJzXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW1wb3J0IExhbmd1YWdlIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcInNpbmd1bGFyaXR5Z3MvbGFuZ3VhZ2VcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJbXBvcnQgTWF0aFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwic2luZ3VsYXJpdHlncy9tYXRoXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW1wb3J0IEdyaWQgSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwic2luZ3VsYXJpdHlncy9ncmlkc1wiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEltcG9ydCBHdXR0ZXJzIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcInNpbmd1bGFyaXR5Z3MvZ3V0dGVyc1wiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEltcG9ydCBHdXR0ZXIgU3R5bGVzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBpbXBvcnQgXCJzaW5ndWxhcml0eWdzL2d1dHRlci1zdHlsZXNcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJbXBvcnQgQVBJc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwic2luZ3VsYXJpdHlncy9hcGlcIjsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNldHRpbmcgSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwiaGVscGVycy9zZXR0aW5nc1wiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENvZGUgSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwiaGVscGVycy9maW5kXCI7XG5AaW1wb3J0IFwiaGVscGVycy9zYXNzLWxpc3RzXCI7XG5AaW1wb3J0IFwiaGVscGVycy9jb2x1bW5zXCI7XG5AaW1wb3J0IFwiaGVscGVycy9zcGFuLXNoYXJlZFwiO1xuQGltcG9ydCBcImhlbHBlcnMvZGlyZWN0aW9uc1wiO1xuQGltcG9ydCBcImhlbHBlcnMvc29ydFwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVJIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcImhlbHBlcnMvYmFja2dyb3VuZC1ncmlkXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTGF5b3V0IEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcImhlbHBlcnMvbGF5b3V0XCI7IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIYXMgU2V0dGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gc2dzLWhhcygkc2V0dGluZykge1xuICBAaWYgbWFwLWhhcy1rZXkoJHNpbmd1bGFyaXR5LCAkc2V0dGluZykge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdldCBTZXR0aW5nc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gc2dzLWdldCgkc2V0dGluZykge1xuICBAaWYgc2dzLWhhcygkc2V0dGluZykge1xuICAgIEByZXR1cm4gbWFwLWdldCgkc2luZ3VsYXJpdHksICRzZXR0aW5nKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRTaW5ndWxhcml0eS1TZXR0aW5ncywgJHNldHRpbmcpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU2V0IFNldHRpbmdzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBzZ3Mtc2V0KCRzZXR0aW5nLCAkdmFsdWUpIHtcbiAgQGlmIChzdHItaW5kZXgoJHNldHRpbmcsICctJykgb3Igc3RyLWluZGV4KCRzZXR0aW5nLCAnXycpKSBhbmQgc3RyLWluZGV4KCRzZXR0aW5nLCAnICcpID09IG51bGwge1xuICAgIEB3YXJuIFwiV29yZHMgaW4gU2luZ3VsYXJpdHkgc2V0dGluZ3Mgc2hvdWxkIGJlIHNwYWNlcywgbm90IGRhc2hlcyBvciB1bmRlcnNjb3Jlcy4gUGxlYXNlIHJlcGxhY2UgZGFzaGVzIGFuZCB1bmRlcnNjb3JlcyBiZXR3ZWVuIHdvcmRzIHdpdGggc3BhY2VzLiBTZXR0aW5ncyB3aWxsIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHVudGlsIGNoYW5nZWQuXCI7XG4gIH1cbiAgJHNpbmd1bGFyaXR5OiBtYXAtbWVyZ2UoJHNpbmd1bGFyaXR5LCAoJHNldHRpbmc6ICR2YWx1ZSkpICFnbG9iYWw7XG4gIEByZXR1cm4gdHJ1ZTtcbn1cblxuQG1peGluIHNncy1jaGFuZ2UoJHNldHRpbmcsICR2YWx1ZSkge1xuICAkc2dzLWNoYW5nZTogc2dzLXNldCgkc2V0dGluZywgJHZhbHVlKTtcbn1cblxuQG1peGluIHNncy1zZXQoJHNldHRpbmcsICR2YWx1ZSkge1xuICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCRzZXR0aW5nLCAkdmFsdWUpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFJlbW92ZSBTZXR0aW5nXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBzZ3MtcmVzZXQoJHNldHRpbmdzLi4uKSB7XG4gIEBpZiBsZW5ndGgoJHNldHRpbmdzKSA9PSAxIHtcbiAgICAkc2V0dGluZ3M6IG50aCgkc2V0dGluZ3MsIDEpO1xuICB9XG5cbiAgQGVhY2ggJHNldHRpbmcgaW4gJHNldHRpbmdzIHtcbiAgICAkc2luZ3VsYXJpdHk6IG1hcC1yZW1vdmUoJHNpbmd1bGFyaXR5LCAkc2V0dGluZykgIWdsb2JhbDtcbiAgfVxuICBAcmV0dXJuIHRydWU7XG59XG5cbkBtaXhpbiBzZ3MtcmVzZXQoJHNldHRpbmdzLi4uKSB7XG4gICRzZ3MtcmVzZXQ6IHNncy1yZXNldCgkc2V0dGluZ3MpO1xufSIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRmluZCBPYmplY3QgS2V5c1xuLy9cbi8vIFJldHVybnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGZpbmQtb2JqZWN0LWtleXMoJGhheXN0YWNrKSB7XG4gICRLZXlzOiBtYXAta2V5cygkaGF5c3RhY2spO1xuICAkTGlzdDogKCk7XG4gIEBlYWNoICRLZXkgaW4gJEtleXMge1xuICAgIEBpZiAkS2V5ICE9IC0xcHgge1xuICAgICAgQGlmIHVuaXQoJEtleSkgPT0gJ2VtJyB7XG4gICAgICAgICRLZXk6ICRLZXkgLyAxZW0gKiAxNnB4O1xuICAgICAgfVxuICAgICAgJExpc3Q6IGFwcGVuZCgkTGlzdCwgJEtleSk7XG4gICAgfVxuICB9XG4gIEByZXR1cm4gcXVpY2tzb3J0KCRMaXN0KTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIE9iamVjdFxuLy9cbi8vIEZpbmRzIHJlbGV2YW50IG9iamVjdFxuLy8gTXVzdCBiZSB1c2luZyBCcmVha3BvaW50IHRvIHdvcmsgcHJvcGVybHlcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGZpbmQtb2JqZWN0KCRoYXlzdGFjaywgJHVzZXItb2JqZWN0OiBudWxsKSB7XG4gIC8vIElmIGEgdXNlciBvYmplY3QgaGFzIGJlZW4gcGFzc2VkIGluLCBieXBhc3MgdGhlIHdob2xlIGZ1bmN0aW9uIGFuZCBqdXN0IHJldHVybiB0aGF0IG9iamVjdC5cbiAgQGlmICR1c2VyLW9iamVjdCAhPSBudWxsIGFuZCAkdXNlci1vYmplY3QgIT0gZmFsc2Uge1xuICAgIEByZXR1cm4gJHVzZXItb2JqZWN0O1xuICB9XG5cbiAgJExlbmd0aDogbGVuZ3RoKCRoYXlzdGFjayk7XG4gICRNb2JpbGUtRmlyc3Q6IHNncy1nZXQoJ21vYmlsZSBmaXJzdCcpO1xuXG4gIC8vIEhheXN0YWNrIG11c3QgYmUgbWFwXG4gIEBpZiB0eXBlLW9mKCRoYXlzdGFjaykgIT0gJ21hcCcge1xuICAgIEB3YXJuIFwiREVQUkVDQVRJT046IEluIG9yZGVyIHRvIHJlbW92ZSBnbG9iYWwgdmFyaWFibGUgbmFtaW5nIGNvbmZsaWN0cywgU2luZ3VsYXJpdHkncyBzZXR0aW5ncyBoYXZlIGJlZW4gbW92ZWQgaW50byB0aGUgc2luZ2xlIGAkc2luZ3VsYXJpdHlgIHZhcmlhYmxlLiBQbGVhc2UgcmVmZXIgdG8gb3VyIGRvY3VtZW50YXRpb24gKGh0dHBzOi8vZ2l0aHViLmNvbS9UZWFtLVNhc3MvU2luZ3VsYXJpdHkvd2lraSkgb24gaG93IHRvIHVwZGF0ZSB5b3VyIHNldHRpbmdzLiBJbiB0aGUgbmV4dCB2ZXJzaW9uIG9mIFNpbmd1bGFyaXR5LCB0aGlzIHdhcm5pbmcgd2lsbCBiZSByZW1vdmVkLiAje250aCgkaGF5c3RhY2ssIDEpfSBoYXMgYmVlbiByZXR1cm5lZC5cIjtcbiAgICBAcmV0dXJuIG50aCgkaGF5c3RhY2ssIDEpO1xuICB9XG5cbiAgQGlmICRMZW5ndGggPiAxIHtcbiAgICAvLyBHcmFiIEJyZWFrcG9pbnQgQ29udGV4dFxuICAgIEBpZiBub3QgZnVuY3Rpb24tZXhpc3RzKGJyZWFrcG9pbnQtZ2V0LWNvbnRleHQpIHtcbiAgICAgIEB3YXJuIFwiUmVzcG9uc2l2ZSBjb250ZXh0cyByZXF1aXJlIEJyZWFrcG9pbnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9UZWFtLVNhc3MvYnJlYWtwb2ludCkuIFBsZWFzZSBlbnN1cmUgdGhhdCBCcmVha3BvaW50IGlzIGltcG9ydGVkIGFuZCBhdmFpbGFibGUgZm9yIFNpbmd1bGFyaXR5IHRvIHVzZS4gRmlyc3QgaXRlbSB1c2VkLlwiO1xuICAgICAgQHJldHVybiBtYXAtZ2V0KCRoYXlzdGFjaywgLTFweCk7XG4gICAgfVxuICAgIC8vIEdldCBCcmVha3BvaW50IENvbnRleHRzXG4gICAgJFF1ZXJ5LU1pbjogYnJlYWtwb2ludC1nZXQtY29udGV4dCgnbWluLXdpZHRoJyk7XG4gICAgJFF1ZXJ5LU1heDogYnJlYWtwb2ludC1nZXQtY29udGV4dCgnbWF4LXdpZHRoJyk7XG5cbiAgICBAaWYgbGVuZ3RoKCRRdWVyeS1NaW4pID09IDEge1xuICAgICAgJFF1ZXJ5LU1pbjogbnRoKCRRdWVyeS1NaW4sIDEpO1xuICAgIH1cbiAgICBAZWxzZSBpZiBsZW5ndGgoJFF1ZXJ5LU1pbikgPiAxIHtcbiAgICAgIEB3YXJuIFwiUmVzcG9uc2l2ZSBjb250ZXh0cyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgYG9yYCBxdWVyaWVzIGFzIHdoaWNoIHF1ZXJ5IHRvIHVzZSBpcyBhbWJpZ3VvdXMuIFBsZWFzZSBvbmx5IHVzZSBzaW5nbGUgY29udGV4dCBxdWVyaWVzLiBEZWZhdWx0IGNvbnRleHQgaXMgdXNlZC5cIjtcbiAgICAgIEByZXR1cm4gbWFwLWdldCgkaGF5c3RhY2ssIC0xcHgpO1xuICAgIH1cblxuXG4gICAgQGlmIGxlbmd0aCgkUXVlcnktTWF4KSA9PSAxIHtcbiAgICAgICRRdWVyeS1NYXg6IG50aCgkUXVlcnktTWF4LCAxKTtcbiAgICB9XG4gICAgQGVsc2UgaWYgbGVuZ3RoKCRRdWVyeS1NYXgpID4gMSB7XG4gICAgICBAd2FybiBcIlJlc3BvbnNpdmUgY29udGV4dHMgYXJlIG5vdCBhdmFpbGFibGUgZm9yIGBvcmAgcXVlcmllcyBhcyB3aGljaCBxdWVyeSB0byB1c2UgaXMgYW1iaWd1b3VzLiBQbGVhc2Ugb25seSB1c2Ugc2luZ2xlIGNvbnRleHQgcXVlcmllcy4gRGVmYXVsdCBjb250ZXh0IGlzIHVzZWQuXCI7XG4gICAgICBAcmV0dXJuIG1hcC1nZXQoJGhheXN0YWNrLCAtMXB4KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBtaW4gb3IgbWF4IGNvbnRleHQsIHJldHVybiBmaXJzdCBpdGVtXG4gICAgQGlmICRRdWVyeS1NaW4gPT0gZmFsc2UgYW5kICRRdWVyeS1NYXggPT0gZmFsc2Uge1xuICAgICAgJFJFVFVSTjogbWFwLWdldCgkaGF5c3RhY2ssIC0xcHgpO1xuICAgICAgQHJldHVybiAkUkVUVVJOO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgdG8gUFhcbiAgICBAaWYgJFF1ZXJ5LU1pbiAhPSBmYWxzZSBhbmQgIHVuaXQoJFF1ZXJ5LU1pbikgPT0gJ2VtJyB7XG4gICAgICAkUXVlcnktTWluOiAkUXVlcnktTWluIC8gMWVtICogMTZweDtcbiAgICB9XG4gICAgQGlmICRRdWVyeS1NYXggIT0gZmFsc2UgYW5kIHVuaXQoJFF1ZXJ5LU1heCkgPT0gJ2VtJyB7XG4gICAgICAkUXVlcnktTWF4OiAkUXVlcnktTWF4IC8gMWVtICogMTZweDtcbiAgICB9XG5cbiAgICAkRmluZC1IYXlzdGFjazogZmluZC1vYmplY3Qta2V5cygkaGF5c3RhY2spO1xuICAgICRSZXZlcnNlLUhheXN0YWNrOiByZXZlcnNlKCRGaW5kLUhheXN0YWNrKTtcblxuICAgICRTbWFsbGVzdDogbnRoKCRGaW5kLUhheXN0YWNrLCAxKTtcbiAgICAkTGFyZ2VzdDogbnRoKCRSZXZlcnNlLUhheXN0YWNrLCAxKTtcbiAgICAkQ29udGV4dDogJFF1ZXJ5LU1pbjtcblxuICAgIEBpZiBub3QgJE1vYmlsZS1GaXJzdCB7XG4gICAgICAkQ29udGV4dDogJFF1ZXJ5LU1heDtcbiAgICB9XG5cbiAgICAvLyBMb29wIG92ZXIgZWFjaCBpdGVtIGluIENvbnRleHQgdG8gZmluZCBpZiBhbnkgb2YgdGhlIGl0ZW1zIHBhc3MuXG4gICAgQGVhY2ggJFF1ZXJ5LUNvbnRleHQgaW4gJENvbnRleHQge1xuICAgICAgQGlmICRRdWVyeS1Db250ZXh0ICE9IGZhbHNlIHtcbiAgICAgICAgLy8gSWYgaXQncyBzbWFsbGVzdCB0aGFuIHRoZSBzbWFsbGVzdCBNUSwgdXNlIHRoZSAxc3QgZ3JpZFxuICAgICAgICBAaWYgJFF1ZXJ5LUNvbnRleHQgPCAkU21hbGxlc3Qge1xuICAgICAgICAgICRSRVRVUk46IG1hcC1nZXQoJGhheXN0YWNrLCAtMXB4KTtcbiAgICAgICAgICBAcmV0dXJuICRSRVRVUk47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgaXQncyBsYXJnZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgbGFyZ2VzdCBNUSwgdXNlIHRoZSBsYXN0IGdyaWRcbiAgICAgICAgQGVsc2UgaWYgJFF1ZXJ5LUNvbnRleHQgPj0gJExhcmdlc3Qge1xuICAgICAgICAgICRSRVRVUk46IG1hcC1nZXQoJGhheXN0YWNrLCAkTGFyZ2VzdCk7XG4gICAgICAgICAgQHJldHVybiAkUkVUVVJOO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGl0J3MgaW4gYmV0d2VlbiB0aGUgc21hbGxlc3QgYW5kIGxhcmdlc3QsIGdvIHJ1biBhIGNoZWNrLlxuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggTVEuXG4gICAgICAgICAgQGZvciAkaiBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJFJldmVyc2UtSGF5c3RhY2spIHtcbiAgICAgICAgICAgICRRdWVyeTogbnRoKCRSZXZlcnNlLUhheXN0YWNrLCAkaik7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBNUSBpcyBncmVhdGhlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSB0aGUgTVEgaW4gcXVlc3Rpb24sIHVzZSBpdCEgKG1vYmlsZSBmaXJzdClcbiAgICAgICAgICAgIEBpZiAoJE1vYmlsZS1GaXJzdCkge1xuICAgICAgICAgICAgICBAaWYgJFF1ZXJ5LUNvbnRleHQgPj0gJFF1ZXJ5IHtcbiAgICAgICAgICAgICAgICAkUkVUVVJOOiBtYXAtZ2V0KCRoYXlzdGFjaywgbnRoKCRSZXZlcnNlLUhheXN0YWNrLCAkaikpO1xuICAgICAgICAgICAgICAgIEByZXR1cm4gJFJFVFVSTjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIE1RIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdGhlIE1RIGluIHF1ZXN0aW9uLCB1c2UgaXQhIChub3QgbW9iaWxlIGZpcnN0KVxuICAgICAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgICBAaWYgJFF1ZXJ5LUNvbnRleHQgPD0gJFF1ZXJ5IHtcbiAgICAgICAgICAgICAgICAkUkVUVVJOOiBtYXAtZ2V0KCRoYXlzdGFjaywgbnRoKCRSZXZlcnNlLUhheXN0YWNrLCAkaikpO1xuICAgICAgICAgICAgICAgIEByZXR1cm4gJFJFVFVSTjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBBbGwgZWxzZSBmYWlscywgcmV0dXJuIHRoZSBmaXJzdCBpdGVtXG4gIEBlbHNlIHtcbiAgICAkUkVUVVJOOiBtYXAtZ2V0KCRoYXlzdGFjaywgLTFweCk7XG4gICAgQHJldHVybiAkUkVUVVJOO1xuICB9XG59XG4iLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNhc3MgTGlzdCBIZWxwZXJzXG4vL1xuLy8gLSBsaXN0LXN1bSgpXG4vLyAtIHF1ZXJ5LWxpc3QoKVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEZ1bmN0aW9uc1xuXG4vLyBSZXR1cm4gdGhlIHN1bSBvZiBhbGwgaXRlbXMgaW4gYSBsaXN0LlxuLy9cbi8vIGxpc3Qtc3VtKCRsaXN0KVxuLy8gLSAkbGlzdCAgOiA8bGlzdD5cbkBmdW5jdGlvbiBsaXN0LXN1bSgkbGlzdCkge1xuICAkc3VtOiAwO1xuICBAZWFjaCAkaXRlbSBpbiAkbGlzdCB7XG4gICAgJHN1bTogJHN1bSArICRpdGVtO1xuICB9XG4gIEByZXR1cm4gJHN1bTtcbn1cblxuLy8gUmV0dXJuIGxpc3Qgb2YgaW5kZXggbG9jYXRpb25zIHdoZXJlIGEgcXVlcnkgYXBwZWFycyBpbiBhIGxpc3QsXG4vLyBpbmNsdWRpbmcgdW5pdCBxdWVyaWVzLlxuLy9cbi8vIHF1ZXJ5LWxpc3QoJGxpc3QsICRxdWVyeSBbLCAkbW9kZV0pXG4vLyAtICRsaXN0ICAgIDogPGxpc3Q+XG4vLyAtICRxdWVyeSAgIDogPGFueXRoaW5nPlxuLy8gLSAkbW9kZSAgICA6IG5vbmUgfCB1bml0XG4vLyAgICAgICAgICAgIC0gXCJub25lXCIgKGRlZmF1bHQpIHJ1bnMgYSBzdGFuZGFyZCBxdWVyeS5cbi8vICAgICAgICAgICAgLSBcInVuaXRcIiBmaW5kcyBhbGwgaXRlbXMgd2l0aCB0aGUgc2FtZSB1bml0LlxuQGZ1bmN0aW9uIHF1ZXJ5LWxpc3QoXG4gICRsaXN0LFxuICAkcXVlcnksXG4gICRtb2RlOiBub25lXG4pIHtcbiAgJHJldHVybjogKCk7XG5cbiAgLy8gbG9vcCB0aHJvdWdoICRsaXN0XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XG4gICAgQGlmICRtb2RlID09IHVuaXQge1xuICAgICAgLy8gaWYgdGhlIGxpc3QgaXRlbSBtYXRjaGVzIHRoZSBxdWVyeSwgd3JpdGUgd2hlcmUgaXQgaXMgdG8gdGhlIGxpc3QuXG4gICAgICBAaWYgdW5pdChudGgoJGxpc3QsICRpKSkgPT0gJHF1ZXJ5IHtcbiAgICAgICAgJHJldHVybjogYXBwZW5kKCRyZXR1cm4sICRpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgLy8gaWYgdGhlIGxpc3QgaXRlbSBtYXRjaGVzIHRoZSBxdWVyeSwgd3JpdGUgd2hlcmUgaXQgaXMgdG8gdGhlIGxpc3QuXG4gICAgICBAaWYgbnRoKG50aCgkbGlzdCwgJGkpLCAxKSA9PSAkcXVlcnkge1xuICAgICAgICAkcmV0dXJuOiBhcHBlbmQoJHJldHVybiwgJGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGlmIG5vdGhpbmcgbWF0Y2hlcyB0aGVuIHJldHVybiBmYWxzZS5cbiAgQGlmICRyZXR1cm4gPT0gKCkge1xuICAgICRyZXR1cm46IGZhbHNlO1xuICB9XG5cbiAgLy8gcmV0dXJuIGxpc3QuXG4gIEByZXR1cm4gJHJldHVybjtcbn1cblxuLy8gUmV2ZXJzZXMgZGlyZWN0aW9uIG9mIGEgbGlzdFxuQGZ1bmN0aW9uIHJldmVyc2UoJGxpc3QpIHtcbiAgJGxlbmd0aDogbGVuZ3RoKCRsaXN0KTtcbiAgJHJldHVybjogKCk7XG4gIEBmb3IgJGkgZnJvbSAwIHRvICRsZW5ndGgge1xuICAgICRyZXR1cm46IGFwcGVuZCgkcmV0dXJuLCBudGgoJGxpc3QsICRsZW5ndGggLSAkaSkpO1xuICB9XG4gIEByZXR1cm4gJHJldHVybjtcbn0iLCJAZnVuY3Rpb24gZW5kLXJvdygkc3BhbiwgJGxvY2F0aW9uLCAkY29sdW1ucykge1xuICBAaWYgJGxvY2F0aW9uID09ICdsYXN0JyBvciAkbG9jYXRpb24gPT0gJ29tZWdhJyB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAaWYgJGxvY2F0aW9uICsgKCRzcGFuIC0gMSkgPT0gY29sdW1uLWNvdW50KCRjb2x1bW5zKSB7XG4gICAgICBAcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIEByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbkBmdW5jdGlvbiBzdGFydC1yb3coJGxvY2F0aW9uKSB7XG4gIEBpZiAkbG9jYXRpb24gPT0gJ2ZpcnN0JyBvciAkbG9jYXRpb24gPT0gJ2FscGhhJyB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG4gIEBlbHNlIGlmICRsb2NhdGlvbiA9PSAxIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn0iLCJAbWl4aW4gc3Bhbi1zaGFyZWQge1xuICAkaW5jbHVkZS1ib3JkZXItYm94OiBzZ3MtZ2V0KCdpbmNsdWRlIGJvcmRlciBib3gnKTtcbiAgJGluY2x1ZGUtY2xlYXJmaXg6IHNncy1nZXQoJ2luY2x1ZGUgY2xlYXJmaXgnKTtcblxuICBAaWYgJGluY2x1ZGUtYm9yZGVyLWJveCB7XG4gICAgQGlmIG1peGluLWV4aXN0cyhib3gtc2l6aW5nKSB7XG4gICAgICBAaW5jbHVkZSBib3gtc2l6aW5nKGJvcmRlci1ib3gpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIH1cbiAgfVxuXG4gIEBpZiAkaW5jbHVkZS1jbGVhcmZpeCB7XG4gICAgQGlmIG1peGluLWV4aXN0cyhjbGVhcmZpeCkge1xuICAgICAgQGluY2x1ZGUgY2xlYXJmaXg7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICAgICAgY2xlYXI6IGJvdGg7XG4gICAgICB9XG4gICAgfVxuICB9XG59IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIE9wcG9zaXRlIERpcmVjdGlvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gb3Bwb3NpdGUtZGlyZWN0aW9uKCRkaXIpIHtcbiAgQGlmICRkaXIgPT0gJ2xlZnQnIHtcbiAgICBAcmV0dXJuIHJpZ2h0O1xuICB9XG4gIEBlbHNlIGlmICAkZGlyID09ICdyaWdodCcge1xuICAgIEByZXR1cm4gbGVmdDtcbiAgfVxuICBAZWxzZSBpZiAkZGlyID09ICdsdHInIHtcbiAgICBAcmV0dXJuIHJ0bDtcbiAgfVxuICBAZWxzZSBpZiAkZGlyID09ICdydGwnIHtcbiAgICBAcmV0dXJuIGx0cjtcbiAgfVxuICBAZWxzZSBpZiAkZGlyID09ICd0b3AnIHtcbiAgICBAcmV0dXJuIGJvdHRvbTtcbiAgfVxuICBAZWxzZSBpZiAkZGlyID09ICdib3R0b20nIHtcbiAgICBAcmV0dXJuIHRvcDtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHdhcm4gXCIjeyRkaXJ9IGlzIG5vdCBhIGRpcmVjdGlvbiEgTWFrZSBzdXJlIHlvdXIgZGlyZWN0aW9uIGlzIGFsbCBsb3dlcmNhc2UhXCI7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZpbmQgRGlyZWN0aW9uIE5hbWVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIG5hbWVkLWRpcmVjdGlvbigkZGlyKSB7XG4gIEBpZiAkZGlyID09ICdsdHInIHtcbiAgICBAcmV0dXJuIGxlZnQ7XG4gIH1cbiAgQGVsc2UgaWYgJGRpciA9PSAncnRsJyB7XG4gICAgQHJldHVybiByaWdodDtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHdhcm4gXCIjeyRkaXJ9IGlzIG5vdCBhIHZhbGlkIEhUTUwgZGlyZWN0aW9uISBNYWtlIHN1cmUgeW91IGFyZSB1c2luZyBhIHZhbGlkIEhUTUwgZGlyZWN0aW9uXCI7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufSIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUXVpY2tzb3J0XG4vLyBodHRwOi8vcm9zZXR0YWNvZGUub3JnL3dpa2kvU29ydGluZ19hbGdvcml0aG1zL1F1aWNrc29ydFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gcXVpY2tzb3J0KCRsaXN0KSB7XG5cbiAgJFFTLUxlc3M6ICgpO1xuICAkUVMtRXF1YWw6ICgpO1xuICAkUVMtTGFyZ2U6ICgpO1xuXG4gICRRUy1MZW5ndGg6IGxlbmd0aCgkbGlzdCk7XG5cbiAgJFFTLVNlZWQ6IHJvdW5kKCRRUy1MZW5ndGggLyAyKTtcblxuICBAaWYgJFFTLUxlbmd0aCA+IDEge1xuICAgICRRUy1TZWVkOiBudGgoJGxpc3QsICRRUy1TZWVkKTtcbiAgICBAZWFjaCAkSXRlbSBpbiAkbGlzdCB7XG4gICAgICBAaWYgJEl0ZW0gPCAkUVMtU2VlZCB7XG4gICAgICAgICRRUy1MZXNzOiBhcHBlbmQoJFFTLUxlc3MsICRJdGVtKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIGlmICRJdGVtID09ICRRUy1TZWVkIHtcbiAgICAgICAgJFFTLUVxdWFsOiBhcHBlbmQoJFFTLUVxdWFsLCAkSXRlbSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgICRRUy1MYXJnZTogYXBwZW5kKCRRUy1MYXJnZSwgJEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICAkUVMtTGVzczogcXVpY2tzb3J0KCRRUy1MZXNzKTtcbiAgICAkUVMtTGFyZ2U6IHF1aWNrc29ydCgkUVMtTGFyZ2UpO1xuXG4gICAgJFFTLVJldHVybjogam9pbigkUVMtTGVzcywgJFFTLUVxdWFsKTtcbiAgICAkUVMtUmV0dXJuOiBqb2luKCRRUy1SZXR1cm4sICRRUy1MYXJnZSk7XG5cbiAgICBAcmV0dXJuICRRUy1SZXR1cm47XG4gIH1cblxuICBAcmV0dXJuICRsaXN0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNvcnQgTWFwIGZ1bmN0aW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBzb3J0LW1hcCgkbWFwLCAkcmV2ZXJzZTogZmFsc2UpIHtcbiAgJFNvcnQtTWFwLUtleXM6IHF1aWNrc29ydChtYXAta2V5cygkbWFwKSk7XG4gICRTb3J0LU1hcC1NYXA6ICgpO1xuXG4gIEBpZiAkcmV2ZXJzZSB7XG4gICAgJFNvcnQtTWFwLUtleXM6IHJldmVyc2UoJFNvcnQtTWFwLUtleXMpO1xuICB9XG5cbiAgQGVhY2ggJGtleSBpbiAkU29ydC1NYXAtS2V5cyB7XG4gICAgJFNvcnQtTWFwLU1hcDogbWFwLW1lcmdlKCRTb3J0LU1hcC1NYXAsICgka2V5OiBtYXAtZ2V0KCRtYXAsICRrZXkpKSk7XG4gIH1cblxuICBAcmV0dXJuICRTb3J0LU1hcC1NYXA7XG59IiwiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEdyaWQgQmFja2dyb3VuZFxuXG5AbWl4aW4gYmFja2dyb3VuZC1ncmlkKFxuICAkY29sdW1uczogbnVsbCxcbiAgJGd1dHRlcjogbnVsbCxcbiAgJGd1dHRlci1zdHlsZTogbnVsbCxcbiAgJGNvbG9yOiBudWxsXG4pIHtcblxuICAkY29sb3I6IGlmKCRjb2xvciAhPSBudWxsLCAkY29sb3IsIHNncy1nZXQoJ2JhY2tncm91bmQgZ3JpZCBjb2xvcicpKTtcblxuICBAaWYgc2dzLWdldCgnZGVidWcnKSAhPSBmYWxzZSB7XG4gICAgJGNvbHVtbnM6IGlmKCRjb2x1bW5zICE9IG51bGwsICRjb2x1bW5zLCBzZ3MtZ2V0KCdncmlkcycpKTtcbiAgICAkZ3V0dGVyOiBpZigkZ3V0dGVyICE9IG51bGwsICRndXR0ZXIsIHNncy1nZXQoJ2d1dHRlcnMnKSk7XG4gICAgJGd1dHRlci1zdHlsZTogaWYoJGd1dHRlci1zdHlsZSAhPSBudWxsLCAkZ3V0dGVyLXN0eWxlLCBzZ3MtZ2V0KCdndXR0ZXIgc3R5bGVzJykpO1xuXG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1idWlsZCgkY29sdW1ucywgJGd1dHRlciwgJGd1dHRlci1zdHlsZSwgJGNvbG9yKVxuICB9XG59XG5cbkBmdW5jdGlvbiBiYWNrZ3JvdW5kLW1hcCgkY29sdW1ucywgJGd1dHRlcnMsICRndXR0ZXItc3R5bGVzKSB7XG4gICRHcmlkczogKCk7XG4gICRHdXR0ZXJzOiAoKTtcbiAgJFN0eWxlczogKCk7XG5cbiAgQGlmICRjb2x1bW5zIGFuZCB0eXBlLW9mKCRjb2x1bW5zKSAhPSAnbWFwJyB7XG4gICAgJEdyaWRzOiAoLTFweDogJGNvbHVtbnMpO1xuICB9XG4gIEBlbHNlIHtcbiAgICAkR3JpZHM6IHNncy1nZXQoJ2dyaWRzJyk7XG4gIH1cblxuICBAaWYgJGd1dHRlcnMgYW5kIHR5cGUtb2YoJGd1dHRlcnMpICE9ICdtYXAnIHtcbiAgICAkR3V0dGVyczogKC0xcHg6ICRndXR0ZXJzKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgJEd1dHRlcnM6IHNncy1nZXQoJ2d1dHRlcnMnKTtcbiAgfVxuXG4gIEBpZiAkZ3V0dGVyLXN0eWxlcyBhbmQgdHlwZS1vZigkZ3V0dGVyLXN0eWxlcykgIT0gJ21hcCcge1xuICAgICRTdHlsZXM6ICgtMXB4OiAkZ3V0dGVyLXN0eWxlcyk7XG4gIH1cbiAgQGVsc2Uge1xuICAgICRTdHlsZXM6IHNncy1nZXQoJ2d1dHRlciBzdHlsZXMnKTtcbiAgfVxuXG4gIC8vIEJ1aWxkIDFzdCBEZXB0aCBNYXBcbiAgJEhvbGRlcjogKCk7XG5cbiAgLy8gR3JpZHNcbiAgQGVhY2ggJGssICR2IGluICRHcmlkcyB7XG4gICAgJEhvbGRlcjogbWFwLW1lcmdlKCRIb2xkZXIsICgkazogKCdncmlkJzogJHYpKSk7XG4gIH1cbiAgLy8gR3V0dGVyc1xuICBAZWFjaCAkaywgJHYgaW4gJEd1dHRlcnMge1xuICAgICRHcmlkOiBtYXAtZ2V0KCRIb2xkZXIsICRrKTtcblxuICAgICRNYXA6ICgnZ3V0dGVyJzogJHYpO1xuICAgIEBpZiAkR3JpZCAhPSBudWxsIHtcbiAgICAgICRHcmlkOiBtYXAtZ2V0KCRHcmlkLCAnZ3JpZCcpO1xuICAgICAgQGlmICRHcmlkICE9IG51bGwge1xuICAgICAgICAkTWFwOiBtYXAtbWVyZ2UoJE1hcCwgKCdncmlkJzogJEdyaWQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkSG9sZGVyOiBtYXAtbWVyZ2UoJEhvbGRlciwgKCRrOiAkTWFwKSk7XG4gIH1cbiAgLy8gU3R5bGVcbiAgQGVhY2ggJGssICR2IGluICRTdHlsZXMge1xuICAgICRHcmlkOiBtYXAtZ2V0KCRIb2xkZXIsICRrKTtcbiAgICAkR3V0dGVyOiBtYXAtZ2V0KCRIb2xkZXIsICRrKTtcblxuICAgICRNYXA6ICgnc3R5bGUnOiAkdik7XG4gICAgQGlmICRHcmlkICE9IG51bGwge1xuICAgICAgJEdyaWQ6IG1hcC1nZXQoJEdyaWQsICdncmlkJyk7XG4gICAgICBAaWYgJEdyaWQgIT0gbnVsbCB7XG4gICAgICAgICRNYXA6IG1hcC1tZXJnZSgkTWFwLCAoJ2dyaWQnOiAkR3JpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBAaWYgJEd1dHRlciAhPSBudWxsIHtcbiAgICAgICRHdXR0ZXI6IG1hcC1nZXQoJEd1dHRlciwgJ2d1dHRlcicpO1xuICAgICAgQGlmICRHdXR0ZXIgIT0gbnVsbCB7XG4gICAgICAgICRNYXA6IG1hcC1tZXJnZSgkTWFwLCAoJ2d1dHRlcic6ICRHdXR0ZXIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkSG9sZGVyOiBtYXAtbWVyZ2UoJEhvbGRlciwgKCRrOiAkTWFwKSk7XG4gIH1cblxuICAkSG9sZGVyOiBzb3J0LW1hcCgkSG9sZGVyKTtcbiAgJFJldHVybjogKCk7XG5cbiAgLy8gQnVpbGQgZnVsbCBzdGFjayBmb3IgZWFjaCBicmVha3BvaW50XG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRIb2xkZXIpIHtcbiAgICAkS2V5OiBudGgobnRoKCRIb2xkZXIsICRpKSwgMSk7XG4gICAgJFZhbHVlOiBudGgobnRoKCRIb2xkZXIsICRpKSwgMik7XG5cbiAgICAkUHJldmlvdXM6ICgpO1xuICAgIEBpZiAkaSA+IDEge1xuICAgICAgJFByZXZpb3VzOiBudGgobnRoKCRSZXR1cm4sICRpIC0gMSksIDIpO1xuICAgIH1cblxuICAgIEBpZiBub3QgbWFwLWhhcy1rZXkoJFZhbHVlLCAnZ3JpZCcpIHtcbiAgICAgICRTb3J0LUdyaWQ6IG1hcC1nZXQoJFByZXZpb3VzLCAnZ3JpZCcpO1xuICAgICAgJFZhbHVlOiBtYXAtbWVyZ2UoJFZhbHVlLCAoJ2dyaWQnOiAkU29ydC1HcmlkKSk7XG4gICAgfVxuXG4gICAgQGlmIG5vdCBtYXAtaGFzLWtleSgkVmFsdWUsICdndXR0ZXInKSB7XG4gICAgICAkU29ydC1HdXR0ZXI6IG1hcC1nZXQoJFByZXZpb3VzLCAnZ3V0dGVyJyk7XG4gICAgICAkVmFsdWU6IG1hcC1tZXJnZSgkVmFsdWUsICgnZ3V0dGVyJzogJFNvcnQtR3V0dGVyKSk7XG4gICAgfVxuXG4gICAgQGlmIG5vdCBtYXAtaGFzLWtleSgkVmFsdWUsICdzdHlsZScpIHtcbiAgICAgICRTb3J0LVN0eWxlOiBtYXAtZ2V0KCRQcmV2aW91cywgJ3N0eWxlJyk7XG4gICAgICAkVmFsdWU6IG1hcC1tZXJnZSgkVmFsdWUsICgnc3R5bGUnOiAkU29ydC1TdHlsZSkpO1xuICAgIH1cblxuICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJEtleTogJFZhbHVlKSk7XG4gIH1cblxuICBAcmV0dXJuICRSZXR1cm47XG59XG5cbkBtaXhpbiBiYWNrZ3JvdW5kLWJ1aWxkKCRjb2x1bW5zLCAkZ3V0dGVycywgJGd1dHRlci1zdHlsZXMsICRjb2xvcikge1xuICAkQmFja2dyb3VuZC1NYXA6IGJhY2tncm91bmQtbWFwKCRjb2x1bW5zLCAkZ3V0dGVycywgJGd1dHRlci1zdHlsZXMpO1xuICAkRGlzcGxheTogdHJ1ZTtcblxuICAkQ29sdW1uLUNvbG9yOiAkY29sb3I7XG4gICRJbnZlcnNlLUNvbHVtbi1Db2xvcjogbWl4KGJsYWNrLCAkY29sb3IsIDE1JSk7XG4gICRHdXR0ZXItQ29sb3I6IG1peCh3aGl0ZSwgJGNvbG9yLCAyNSUpO1xuICAkRGlyZWN0aW9uOiBuYW1lZC1kaXJlY3Rpb24oc2dzLWdldCgnZGlyZWN0aW9uJykpO1xuXG4gICRlbmNvZGVNYXA6KFxuICAgICclXCInOiclMjUlMjInLFxuICAgICc8JzonJTNDJyxcbiAgICAnICc6JyUyMCcsXG4gICAgJz0nOiclM0QnLFxuICAgICdcXFwiJzonJTIyJyxcbiAgICAnOic6JyUzQScsXG4gICAgJy8nOiclMkYnLFxuICAgICcuJzonJTJFJyxcbiAgICAnPic6JyUzRScsXG4gICAgJyMnOiclMjMnLFxuICAgICctJzonJTJEJ1xuICApO1xuXG4gIEBlYWNoICRia3B0LCAkZGVmIGluICRCYWNrZ3JvdW5kLU1hcCB7XG4gICAgJEdyaWQ6IG1hcC1nZXQoJGRlZiwgJ2dyaWQnKTtcbiAgICAkR3V0dGVyOiBtYXAtZ2V0KCRkZWYsICdndXR0ZXInKTtcbiAgICAkU3R5bGU6IG1hcC1nZXQoJGRlZiwgJ3N0eWxlJyk7XG5cbiAgICAkR3JpZC1Db3VudDogY29sdW1uLWNvdW50KCRHcmlkKTtcblxuICAgICRTVkc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nO1xuXG4gICAgJEd1dHRlci1XaWR0aDogZ3V0dGVyLXNwYW4oJEd1dHRlciwgJEdyaWQsICRTdHlsZSk7XG4gICAgQGlmIHVuaXQoJEd1dHRlci1XaWR0aCkgIT0gJyUnIGFuZCB1bml0KCRHdXR0ZXItV2lkdGgpICE9ICcnIHtcbiAgICAgICRHdXR0ZXItV2lkdGg6IDAlO1xuICAgIH1cblxuICAgIEBpZiAkU3R5bGUgPT0gJ2ZpeGVkJyB7XG4gICAgICAkR3V0dGVyLVdpZHRoOiAwJTtcbiAgICB9XG4gICAgJENvdW50ZXItV2lkdGg6IDAlO1xuICAgICRob2xkZXI6ICgpO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkR3JpZC1Db3VudCB7XG4gICAgICAkSG9sZGVyLUdyYWRpZW50OiAoKTtcbiAgICAgICRMb29wLVdpZHRoOiBjb2x1bW4tc3BhbigxLCAkaSwgJEdyaWQsICRHdXR0ZXIsICRTdHlsZSk7XG5cbiAgICAgIEBpZiBpbmRleCgkU3R5bGUsICdzcGxpdCcpIGFuZCAkaSA9PSAxIHtcbiAgICAgICAgJFNWRzogJFNWRyArICc8cmVjdCB4PVwiI3skQ291bnRlci1XaWR0aH1cIiBmaWxsPVwiI3skR3V0dGVyLUNvbG9yfVwiIHdpZHRoPVwiI3skR3V0dGVyLVdpZHRoIC8gMn1cIiBoZWlnaHQ9XCIxMDAlXCIvPic7XG4gICAgICAgICRDb3VudGVyLVdpZHRoOiAoJEd1dHRlci1XaWR0aCAvIDIpO1xuICAgICAgfVxuXG4gICAgICAkTG9vcC1Db2xvcjogJENvbHVtbi1Db2xvcjtcbiAgICAgIEBpZiAoaW5kZXgoJFN0eWxlLCAnZml4ZWQnKSBvciAkR3V0dGVyLVdpZHRoID09IDAlKSBhbmQgKCRpICUgMiA9PSAwICkge1xuICAgICAgICAkTG9vcC1Db2xvcjogJEludmVyc2UtQ29sdW1uLUNvbG9yO1xuICAgICAgfVxuXG4gICAgICBAaWYgJGkgIT0gJEdyaWQtQ291bnQge1xuICAgICAgICBAaWYgdW5pdCgkQ291bnRlci1XaWR0aCkgPT0gdW5pdCgkTG9vcC1XaWR0aCkge1xuICAgICAgICAgICRTVkc6ICRTVkcgKyAnPHJlY3QgeD1cIiN7JENvdW50ZXItV2lkdGh9XCIgZmlsbD1cIiN7JExvb3AtQ29sb3J9XCIgd2lkdGg9XCIjeyRMb29wLVdpZHRofVwiIGhlaWdodD1cIjEwMCVcIi8+JztcbiAgICAgICAgICAkQ291bnRlci1XaWR0aDogJENvdW50ZXItV2lkdGggKyAkTG9vcC1XaWR0aDtcbiAgICAgICAgICAkU1ZHOiAkU1ZHICsgJzxyZWN0IHg9XCIjeyRDb3VudGVyLVdpZHRofVwiIGZpbGw9XCIjeyRHdXR0ZXItQ29sb3J9XCIgd2lkdGg9XCIjeyRHdXR0ZXItV2lkdGh9XCIgaGVpZ2h0PVwiMTAwJVwiLz4nO1xuICAgICAgICAgICRDb3VudGVyLVdpZHRoOiAkQ291bnRlci1XaWR0aCArICRHdXR0ZXItV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICREaXNwbGF5OiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICBAZWxzZSBpZiAkaSA9PSAxIHtcbiAgICAgICAgQGlmIHVuaXQoJENvdW50ZXItV2lkdGgpID09IHVuaXQoJExvb3AtV2lkdGgpIHtcbiAgICAgICAgICAkU1ZHOiAkU1ZHICsgJzxyZWN0IHg9XCIjeyRDb3VudGVyLVdpZHRofVwiIGZpbGw9XCIjeyRMb29wLUNvbG9yfVwiIHdpZHRoPVwiI3skTG9vcC1XaWR0aH1cIiBoZWlnaHQ9XCIxMDAlXCIvPic7XG4gICAgICAgICAgJFNWRzogJFNWRyArICc8cmVjdCB4PVwiI3skTG9vcC1XaWR0aH1cIiBmaWxsPVwiI3skR3V0dGVyLUNvbG9yfVwiIHdpZHRoPVwiI3skR3V0dGVyLVdpZHRofVwiIGhlaWdodD1cIjEwMCVcIi8+JztcbiAgICAgICAgICAkQ291bnRlci1XaWR0aDogJENvdW50ZXItV2lkdGggKyAkTG9vcC1XaWR0aCArICRHdXR0ZXItV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICREaXNwbGF5OiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICBAZWxzZSBpZiAkaSA9PSAkR3JpZC1Db3VudCBhbmQgaW5kZXgoJFN0eWxlLCAnc3BsaXQnKSB7XG4gICAgICAgIEBpZiB1bml0KCRDb3VudGVyLVdpZHRoKSA9PSB1bml0KCRMb29wLVdpZHRoKSB7XG4gICAgICAgICAgJFNWRzogJFNWRyArICc8cmVjdCB4PVwiI3skQ291bnRlci1XaWR0aH1cIiBmaWxsPVwiI3skTG9vcC1Db2xvcn1cIiB3aWR0aD1cIiN7JExvb3AtV2lkdGh9XCIgaGVpZ2h0PVwiMTAwJVwiLz4nO1xuICAgICAgICAgICRDb3VudGVyLVdpZHRoOiAkQ291bnRlci1XaWR0aCArICRMb29wLVdpZHRoO1xuICAgICAgICAgICRTVkc6ICRTVkcgKyAnPHJlY3QgeD1cIiN7JENvdW50ZXItV2lkdGh9XCIgZmlsbD1cIiN7JEd1dHRlci1Db2xvcn1cIiB3aWR0aD1cIiN7JEd1dHRlci1XaWR0aCAvIDJ9XCIgaGVpZ2h0PVwiMTAwJVwiLz4nO1xuICAgICAgICB9XG4gICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAkRGlzcGxheTogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJFNWRzogJFNWRyArICc8cmVjdCB4PVwiI3skQ291bnRlci1XaWR0aH1cIiBmaWxsPVwiI3skTG9vcC1Db2xvcn1cIiB3aWR0aD1cIiN7JExvb3AtV2lkdGh9XCIgaGVpZ2h0PVwiMTAwJVwiLz4nO1xuICAgICAgfVxuICAgIH1cblxuICAgICRTVkc6ICRTVkcgKyAnPC9zdmc+JztcblxuICAgIEBlYWNoICRjaGFyLCAkY29kZSBpbiAkZW5jb2RlTWFwIHtcbiAgICAgICRpbmRleDogc3RyLWluZGV4KCRTVkcsICRjaGFyKTtcbiAgICAgIEB3aGlsZSAkaW5kZXgge1xuICAgICAgICAkaW5kZXg6IHN0ci1pbmRleCgkU1ZHLCAkY2hhcik7XG4gICAgICAgICRTVkc6IHN0ci1zbGljZSgkU1ZHLCAxLCAkaW5kZXggLSAxKSArICRjb2RlICsgc3RyLXNsaWNlKCRTVkcsICRpbmRleCArIHN0ci1sZW5ndGgoJGNoYXIpKTtcbiAgICAgICAgJGluZGV4OiBzdHItaW5kZXgoJFNWRywgJGNoYXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAkRGlzcGxheSB7XG5cbiAgICAgIEBpZiAkYmtwdCAhPSAtMXB4IHtcbiAgICAgICAgQGluY2x1ZGUgYnJlYWtwb2ludCgkYmtwdCkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnZGF0YTppbWFnZS9zdmcreG1sLCcgKyAkU1ZHKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCwnICsgJFNWRyk7XG4gICAgICB9XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIEB3YXJuICdDYW5ub3QgZ2VuZXJhdGUgYSBCYWNrZ3JvdW5kIEdyaWQgZm9yIGdyaWQgYCN7JEdyaWR9YCB3aXRoIGd1dHRlcnMgYCN7JEd1dHRlcn1gIGFuZCBndXR0ZXIgc3R5bGUgYCN7JFN0eWxlfWAnO1xuICAgIH1cbiAgfVxufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXcmFwcGVyIG1peGluIGZvciBvdmVycmlkaW5nIHRoZSBnbG9iYWwgY29udGV4dHMgYXMgYSBibG9ja1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AbWl4aW4gbGF5b3V0KCRncmlkOiBmYWxzZSwgJGd1dHRlcjogZmFsc2UsICRvdXRwdXQtc3R5bGU6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSkge1xuXG4gIEBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbWFwJyB7XG4gICAgJGxheW91dDogJGdyaWQ7XG4gICAgQGlmIG1hcC1oYXMta2V5KCRsYXlvdXQsICdncmlkJykge1xuICAgICAgJGdyaWQ6IG1hcC1nZXQoJGxheW91dCwgJ2dyaWQnKTtcbiAgICB9XG5cbiAgICBAaWYgbWFwLWhhcy1rZXkoJGxheW91dCwgJ2d1dHRlcicpIHtcbiAgICAgICRndXR0ZXI6IG1hcC1nZXQoJGxheW91dCwgJ2d1dHRlcicpO1xuICAgIH1cblxuICAgIEBpZiBtYXAtaGFzLWtleSgkbGF5b3V0LCAnb3V0cHV0IHN0eWxlJykge1xuICAgICAgJG91dHB1dC1zdHlsZTogbWFwLWdldCgkbGF5b3V0LCAnb3V0cHV0IHN0eWxlJyk7XG4gICAgfVxuICAgIEBpZiBtYXAtaGFzLWtleSgkbGF5b3V0LCAnb3V0cHV0Jykge1xuICAgICAgJG91dHB1dC1zdHlsZTogbWFwLWdldCgkbGF5b3V0LCAnb3V0cHV0Jyk7XG4gICAgfVxuXG4gICAgQGlmIG1hcC1oYXMta2V5KCRsYXlvdXQsICdndXR0ZXIgc3R5bGUnKSB7XG4gICAgICAkZ3V0dGVyLXN0eWxlOiBtYXAtZ2V0KCRsYXlvdXQsICdndXR0ZXIgc3R5bGUnKTtcbiAgICB9XG4gIH1cblxuICAvLyBQcml2YXRlIGhvbGRlciBmb3IgY3VycmVudCBnbG9iYWwgY29udGV4dFxuICAkbGF5b3V0LXByaXZhdGUtZ3JpZC1ob2xkZXI6IHNncy1nZXQoJ2dyaWRzJyk7XG4gICRsYXlvdXQtcHJpdmF0ZS1ndXR0ZXItaG9sZGVyOiBzZ3MtZ2V0KCdndXR0ZXJzJyk7XG4gICRsYXlvdXQtcHJpdmF0ZS1vdXRwdXQtaG9sZGVyOiBzZ3MtZ2V0KCdvdXRwdXQnKTtcbiAgJGxheW91dC1wcml2YXRlLWd1dHRlci1zdHlsZS1ob2xkZXI6IHNncy1nZXQoJ2d1dHRlciBzdHlsZXMnKTtcblxuICAvLyBPdmVyaWRlcyBjdXJyZW50IGdsb2JhbCBjb250ZXh0cywgYnV0IG9ubHkgaWYgbmVlZGVkXG4gIEBpZiAkZ3JpZCAhPSBmYWxzZSB7XG4gICAgQGluY2x1ZGUgc2dzLXJlc2V0KCdncmlkcycpO1xuICAgIEBpZiB0eXBlLW9mKCRncmlkKSAhPSAnbWFwJyB7XG4gICAgICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCdncmlkcycsICgtMXB4OiAkZ3JpZCkpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCdncmlkcycsICRncmlkKTtcbiAgICB9XG4gIH1cbiAgQGlmICRndXR0ZXIgIT0gZmFsc2Uge1xuICAgIEBpbmNsdWRlIHNncy1yZXNldCgnZ3V0dGVycycpO1xuICAgIEBpZiB0eXBlLW9mKCRndXR0ZXIpICE9ICdtYXAnIHtcbiAgICAgIEBpbmNsdWRlIHNncy1jaGFuZ2UoJ2d1dHRlcnMnLCAoLTFweDogJGd1dHRlcikpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCdndXR0ZXJzJywgJGd1dHRlcik7XG4gICAgfVxuICB9XG4gIEBpZiAkb3V0cHV0LXN0eWxlICE9IGZhbHNlIHtcbiAgICBAaW5jbHVkZSBzZ3MtcmVzZXQoJ291dHB1dCcpO1xuICAgIEBpbmNsdWRlIHNncy1jaGFuZ2UoJ291dHB1dCcsICRvdXRwdXQtc3R5bGUpO1xuICB9XG4gIEBpZiAkZ3V0dGVyLXN0eWxlICE9IGZhbHNlIHtcbiAgICBAaW5jbHVkZSBzZ3MtcmVzZXQoJ2d1dHRlciBzdHlsZXMnKTtcbiAgICBAaWYgdHlwZS1vZigkZ3V0dGVyLXN0eWxlKSAhPSAnbWFwJyB7XG4gICAgICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCdndXR0ZXIgc3R5bGVzJywgKC0xcHg6ICRndXR0ZXItc3R5bGUpKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgQGluY2x1ZGUgc2dzLWNoYW5nZSgnZ3V0dGVyIHN0eWxlcycsICRndXR0ZXItc3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFsbCB0aGUgdGhpbmdzIVxuICBAY29udGVudDtcblxuICAvLyBSRXNldCBBTEwgdGhlIHNldHRpbmdzXG4gIEBpbmNsdWRlIHNncy1yZXNldCgnZ3JpZHMnKTtcbiAgQGluY2x1ZGUgc2dzLXJlc2V0KCdndXR0ZXJzJyk7XG4gIEBpbmNsdWRlIHNncy1yZXNldCgnb3V0cHV0Jyk7XG4gIEBpbmNsdWRlIHNncy1yZXNldCgnZ3V0dGVyIHN0eWxlcycpO1xuICAvLyBSZXNldHMgZ2xvYmFsIGNvbnRleHRzXG4gIEBpbmNsdWRlIHNncy1jaGFuZ2UoJ2dyaWRzJywgJGxheW91dC1wcml2YXRlLWdyaWQtaG9sZGVyKTtcbiAgQGluY2x1ZGUgc2dzLWNoYW5nZSgnZ3V0dGVycycsICRsYXlvdXQtcHJpdmF0ZS1ndXR0ZXItaG9sZGVyKTtcbiAgQGluY2x1ZGUgc2dzLWNoYW5nZSgnb3V0cHV0JywgJGxheW91dC1wcml2YXRlLW91dHB1dC1ob2xkZXIpO1xuICBAaW5jbHVkZSBzZ3MtY2hhbmdlKCdndXR0ZXIgc3R5bGVzJywgJGxheW91dC1wcml2YXRlLWd1dHRlci1zdHlsZS1ob2xkZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIExheW91dCBBdFxuLy8gV3JhcHBlciBtaXhpbiBmb3IgYSBjb21iaW5lZCBCcmVha3BvaW50L0xheW91dCBjYWxsXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBtaXhpbiBsYXlvdXQtYXQoJGxheW91dCwgJGJyZWFrcG9pbnQpIHtcbiAgQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJlYWtwb2ludCkge1xuICAgIC8vIElmIGEgc2luZ2xlIHZhbHVlIGlzIHBhc3NlZCBpbiwgYXNzdW1lIGl0J3MgYSBncmlkXG4gICAgQGlmIHR5cGUtb2YoJGxheW91dCkgIT0gbWFwIHtcbiAgICAgIEBpbmNsdWRlIGxheW91dCgkbGF5b3V0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiBpdCBpcyBhIG1hcCwgd2UndmUgZ290IGtleS92YWx1ZXMgdG8gd29yayB3aXRoXG4gICAgQGVsc2Uge1xuICAgICAgJGdyaWQ6IGZhbHNlO1xuICAgICAgJGd1dHRlcjogZmFsc2U7XG4gICAgICAkb3V0cHV0LXN0eWxlOiBmYWxzZTtcbiAgICAgICRndXR0ZXItc3R5bGU6IGZhbHNlO1xuXG4gICAgICBAaWYgbWFwLWhhcy1rZXkoJGxheW91dCwgJ2dyaWQnKSB7XG4gICAgICAgICRncmlkOiBtYXAtZ2V0KCRsYXlvdXQsICdncmlkJyk7XG4gICAgICB9XG5cbiAgICAgIEBpZiBtYXAtaGFzLWtleSgkbGF5b3V0LCAnZ3V0dGVyJykge1xuICAgICAgICAkZ3V0dGVyOiBtYXAtZ2V0KCRsYXlvdXQsICdndXR0ZXInKTtcbiAgICAgIH1cblxuICAgICAgQGlmIG1hcC1oYXMta2V5KCRsYXlvdXQsICdvdXRwdXQgc3R5bGUnKSB7XG4gICAgICAgICRvdXRwdXQtc3R5bGU6IG1hcC1nZXQoJGxheW91dCwgJ291dHB1dCBzdHlsZScpO1xuICAgICAgfVxuICAgICAgQGlmIG1hcC1oYXMta2V5KCRsYXlvdXQsICdvdXRwdXQnKSB7XG4gICAgICAgICRvdXRwdXQtc3R5bGU6IG1hcC1nZXQoJGxheW91dCwgJ291dHB1dCcpO1xuICAgICAgfVxuXG4gICAgICBAaWYgbWFwLWhhcy1rZXkoJGxheW91dCwgJ2d1dHRlciBzdHlsZScpIHtcbiAgICAgICAgJGd1dHRlci1zdHlsZTogbWFwLWdldCgkbGF5b3V0LCAnZ3V0dGVyIHN0eWxlJyk7XG4gICAgICB9XG5cbiAgICAgIEBpbmNsdWRlIGxheW91dCgkZ3JpZCwgJGd1dHRlciwgJG91dHB1dC1zdHlsZSwgJGd1dHRlci1zdHlsZSkge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iLCJAaW1wb3J0IFwibGFuZ3VhZ2UvcGFyc2UtbGlzdFwiO1xuQGltcG9ydCBcImxhbmd1YWdlL3BhcnNlLWFkZFwiO1xuQGltcG9ydCBcImxhbmd1YWdlL3NwYW5cIjsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBhcnNlIG5hdHVyYWwgbGFuZ3VhZ2Ugc3RyaW5nXG4vL1xuLy8gUmV0cmlldmUgdmFsdWVzIGZyb20gdGhlIG5hdHVyYWwgbGFuZ3VhZ2Ugc3RyaW5nLlxuLy8gcGFyc2Utc3RyaW5nKCR2YXIsICRsaXN0KVxuLy8gICR2YXIgIDogPHN0cmluZz5cbi8vICAgICAgICAtICdhdCcvJ3NwYW4nLydvZicgb3IgYW55IG90aGVyIGtleXdvcmRzLlxuLy8gICAgICAgIC0gJ3NwYW4nIHF1ZXJpZXMgdGhlIHVucHJlZml4ZWQgc3BhbiBkZWNsYXJhdGlvbi5cbi8vICAgICAgICAtICdhdCcgY2FuIGFsc28gcXVlcnkgZmlyc3QsIGxhc3QsIGFscGhhLCBhbmQgb21lZ2EuXG4vLyAgICAgICAgLSAnZ3JpZCcgd2lsbCByZXR1cm4gdGhlIHNhbWUgYXMgJ29mJ1xuLy8gICRsaXN0IDogPGxpc3Q+XG4vLyAgICAgICAgLSBBIGxpc3QgbGlrZSB0aGlzOiBsYXN0IDIgb2YgKDEgMSAyKSBwdXNoIDFcbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBwYXJzZS1zcGFuLWxpc3QoJHZhciwgJGxpc3QpIHtcblxuICAkZm91bmQ6IGZhbHNlO1xuXG4gICRncmlkOiAoKTtcblxuICAvLyBMb29wIHRocm91Z2ggbGlzdC5cbiAgQGVhY2ggJGl0ZW0gaW4gJGxpc3Qge1xuICAgIC8vIGlmICdzcGFuJyAtIHJldHVybiB0aGUgZmlyc3QgbnVtZXJpYy5cbiAgICAvLyBpZiBrZXl3b3JkIHdhcyBmb3VuZCAtIHJldHVybiB0aGUgZm9sbG93aW5nIGl0ZW0uXG4gICAgQGlmICh0eXBlLW9mKCRpdGVtKSA9PSBudW1iZXIgYW5kICR2YXIgPT0gc3BhbiBhbmQgJGZvdW5kICE9ICdncmlkJykgb3IgJGZvdW5kID09IHRydWUge1xuXG4gICAgICAvLyBAaWYgJGZvdW5kID09IHRydWVcbiAgICAgIEByZXR1cm4gJGl0ZW07XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgR3JpZHNcbiAgICBAZWxzZSBpZiAoJGl0ZW0gPT0gJHZhciBvciAkaXRlbSA9PSAnZ3JpZCcgb3IgJGl0ZW0gPT0gJ29mJykgYW5kICgkdmFyID09ICdvZicgb3IgJHZhciA9PSAnZ3JpZCcpIHtcbiAgICAgICRmb3VuZDogJ2dyaWQnO1xuICAgIH1cblxuICAgIEBlbHNlIGlmICRmb3VuZCA9PSAnZ3JpZCcge1xuICAgICAgQGlmIHR5cGUtb2YoJGl0ZW0pID09IG51bWJlciB7XG4gICAgICAgICRncmlkOiBhcHBlbmQoJGdyaWQsICRpdGVtLCAnc3BhY2UnKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgQHJldHVybiAkZ3JpZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbnkga2V5d29yZCAtIHJldHVybiB0aGUgZm9sbG93aW5nIHZhbHVlLlxuICAgIEBlbHNlIGlmICRpdGVtID09ICR2YXIge1xuICAgICAgJGZvdW5kOiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdhc24ndCBmb3VuZC5cbiAgQHJldHVybiBmYWxzZTtcbn0iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBhcnNlIGFkZCBzdHJpbmdcbi8vXG4vLyBSZXRyaWV2ZSBhZGQgYW5kIG1lZGlhIHF1ZXJ5IHZhbHVlcyBmcm9tIGEgZGVmaW5pdGlvblxuLy8gcGFyc2UtYWRkKCRkZWZpbml0aW9uKVxuLy8gICRkZWZpbml0aW9uIDogPGxpc3Q+XG4vLyAgICAgICAgLSBBIGxpc3QgbGlrZTogLjI1IGF0IDMwMHB4XG4vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gcGFyc2UtYWRkKCRkZWZpbml0aW9uKSB7XG4gICRwYXJzZS1maW5kOiAoKTtcbiAgJHBhcnNlLW1xOiBudWxsO1xuICAkcGFyc2UtbXEtZmluZDogZmFsc2U7XG4gICRNb2JpbGUtRmlyc3Q6IHNncy1nZXQoJ21vYmlsZSBmaXJzdCcpO1xuXG4gIEBlYWNoICRpdGVtIGluICRkZWZpbml0aW9uIHtcbiAgICBAaWYgJGl0ZW0gIT0gJ2F0JyBhbmQgJHBhcnNlLW1xLWZpbmQgIT0gdHJ1ZSB7XG4gICAgICAkcGFyc2UtZmluZDogYXBwZW5kKCRwYXJzZS1maW5kLCAkaXRlbSwgJ3NwYWNlJyk7XG4gICAgfVxuICAgIEBlbHNlIGlmICRpdGVtID09ICdhdCcge1xuICAgICAgJHBhcnNlLW1xLWZpbmQ6IHRydWU7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRwYXJzZS1tcTogJGl0ZW07XG4gICAgfVxuICB9XG5cbiAgQGlmICRwYXJzZS1tcSB7XG4gICAgQGlmIG5vdCBmdW5jdGlvbi1leGlzdHMoYnJlYWtwb2ludCkge1xuICAgICAgQHdhcm4gXCJSZXNwb25zaXZlIGNvbnRleHRzIHJlcXVpcmUgQnJlYWtwb2ludCAoaHR0cHM6Ly9naXRodWIuY29tL1RlYW0tU2Fzcy9icmVha3BvaW50KS4gUGxlYXNlIGVuc3VyZSB0aGF0IEJyZWFrcG9pbnQgaXMgaW1wb3J0ZWQgYW5kIGF2YWlsYWJsZSBmb3IgU2luZ3VsYXJpdHkgdG8gdXNlLiBDb250ZXh0IHNldCB0byAtMXB4LlwiO1xuICAgICAgJHBhcnNlLW1xOiAtMXB4O1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAkYnJlYWtwb2ludC1wYXJzZTogYnJlYWtwb2ludCgkcGFyc2UtbXEpO1xuICAgICAgJGJyZWFrcG9pbnQtcGFyc2U6IG1hcC1nZXQoJGJyZWFrcG9pbnQtcGFyc2UsICdjb250ZXh0IGhvbGRlcicpO1xuICAgICAgJGJyZWFrcG9pbnQtbXE6IG51bGw7XG4gICAgICBAaWYgJE1vYmlsZS1GaXJzdCB7XG4gICAgICAgICRicmVha3BvaW50LW1xOiBtYXAtZ2V0KCRicmVha3BvaW50LXBhcnNlLCAnbWluLXdpZHRoJyk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgICRicmVha3BvaW50LW1xOiBtYXAtZ2V0KCRicmVha3BvaW50LXBhcnNlLCAnbWF4LXdpZHRoJyk7XG4gICAgICB9XG5cbiAgICAgIEBpZiBsZW5ndGgoJGJyZWFrcG9pbnQtbXEpID4gMSB7XG4gICAgICAgIEB3YXJuIFwiUmVzcG9uc2l2ZSBjb250ZXh0cyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgYG9yYCBxdWVyaWVzIGFzIHdoaWNoIHF1ZXJ5IHRvIHVzZSBpcyBhbWJpZ3VvdXMuIFBsZWFzZSBvbmx5IHVzZSBzaW5nbGUgY29udGV4dCBxdWVyaWVzLiBDb250ZXh0IHNldCB0byAtMXB4LlwiO1xuICAgICAgICAkcGFyc2UtbXE6IC0xcHg7XG4gICAgICB9XG4gICAgICBAZWxzZSBpZiBsZW5ndGgoJGJyZWFrcG9pbnQtbXEpIDwgMSB7XG4gICAgICAgIEB3YXJuIFwiTm8gXCIgKyBpZigkTW9iaWxlLUZpcnN0LCAnbWluLXdpZHRoJywgJ21heC13aWR0aCcpICsgJyBjb250ZXh0IGZvdW5kLiBQbGVhc2UgdXNlIGEgbWVkaWEgcXVlcnkgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0LiBDb250ZXh0IHNldCB0byAtMXB4Lic7XG4gICAgICAgICRwYXJzZS1tcTogLTFweDtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHBhcnNlLW1xOiBudGgoJGJyZWFrcG9pbnQtbXEsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiAkcGFyc2UtbXEgYW5kIHVuaXQoJHBhcnNlLW1xKSA9PSAnZW0nIHtcbiAgICAkcGFyc2UtbXE6ICRwYXJzZS1tcSAvIDFlbSAqIDE2cHg7XG4gIH1cblxuICBAcmV0dXJuICgkcGFyc2UtZmluZCAkcGFyc2UtbXEpO1xufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBcIk5hdHVyYWwgTGFuZ3VhZ2VcIiBQYXJzaW5nXG4vL1xuLy8gS2V5d29yZHM6XG4vLyAgc3BhbjogICAgIENvbHVtbiBTcGFuXG4vLyAgYXQ6ICAgICAgIENvbHVtbiBMb2NhdGlvblxuLy8gIG9mOiAgICAgICBDb250ZXh0XG4vLyAgZ3V0dGVyczogIEd1dHRlcnNcbi8vICBvdXRwdXQ6ICAgT3V0cHV0XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBtaXhpbiBzcGFuKCRpbnB1dCkge1xuICAkc3BhbjogICAgICBudGgoJGlucHV0LCAxKTtcblxuICAkbG9jYXRpb246ICBwYXJzZS1zcGFuLWxpc3QoJ2F0JywgJGlucHV0KTtcbiAgJGNvbnRleHQ6ICAgcGFyc2Utc3Bhbi1saXN0KCdvZicsICRpbnB1dCk7XG4gICRndXR0ZXI6ICAgIHBhcnNlLXNwYW4tbGlzdCgnZ3V0dGVycycsICRpbnB1dCk7XG4gICRvdXRwdXQ6ICAgIHBhcnNlLXNwYW4tbGlzdCgnb3V0cHV0JywgJGlucHV0KTtcblxuICBAaW5jbHVkZSBncmlkLXNwYW4oJHNwYW4sICRsb2NhdGlvbiwgJGNvbnRleHQsICRndXR0ZXIsICRvdXRwdXQpXG59IiwiQGltcG9ydCBcIm1hdGgvY29sdW1uc1wiO1xuQGltcG9ydCBcIm1hdGgvZ3V0dGVyc1wiO1xuQGltcG9ydCBcIm1hdGgvY29udGV4dFwiO1xuQGltcG9ydCBcIm1hdGgvZ3JpZFwiOyIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRmluZCB3aWR0aCwgaW4gcGVyY2VudGFnZXMsIG9mIHRoZSBjb2x1bW4gc3BhblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gY29sdW1uLXNwYW4oJHNwYW4sICRsb2NhdGlvbiwgJGdyaWQ6IG51bGwsICRndXR0ZXI6IG51bGwsICRndXR0ZXItc3R5bGU6IG51bGwpIHtcbiAgLy8gRmluZCB0aGUgZ3JpZCBhbmQgZ3V0dGVyc1xuICAkZ3JpZDogZmluZC1ncmlkKCRncmlkKTtcbiAgJGd1dHRlcjogZmluZC1ndXR0ZXIoJGd1dHRlcik7XG4gICRndXR0ZXItc3R5bGU6IGZpbmQtZ3V0dGVyLXN0eWxlKCRndXR0ZXItc3R5bGUpO1xuXG4gIEBpZiBmaXhlZC1ndXR0ZXIoJGdyaWQsICRndXR0ZXIsICRndXR0ZXItc3R5bGUpIHtcbiAgICAkZ3V0dGVyOiAwO1xuICB9XG5cbiAgLy8gQGRlYnVnICRncmlkO1xuICAvLyBAZGVidWcgJGd1dHRlcjtcblxuICAvLyBDb21iaW5lIHRoZSBncmlkIGFuZCBndXR0ZXJzXG4gICRncmlkLWFuZC1ndXR0ZXJzOiBjb2x1bW4tc3VtKCRncmlkLCAkZ3V0dGVyLCAkZ3V0dGVyLXN0eWxlKTtcblxuICAvLyBAZGVidWcgJGdyaWQtYW5kLWd1dHRlcnM7XG5cbiAgLy8gRXF1YWwgd2lkdGggZ3JpZCBhcmUgZWFzeSEgRGVhbCB3aXRoIHRoZW0hXG4gIEBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbnVtYmVyJyBvciBsZW5ndGgoJGdyaWQpID09IDEge1xuICAgICRzcGFuLWFuZC1ndXR0ZXJzOiAkc3BhbiArICRndXR0ZXIgKiAoJHNwYW4gLSAxKTtcbiAgICBAcmV0dXJuICRzcGFuLWFuZC1ndXR0ZXJzIC8gJGdyaWQtYW5kLWd1dHRlcnMgKiAxMDAlO1xuICB9XG4gIC8vIEFzeW1tZXRyaWMgbGlzdHMgYXJlIGhhcmRlciwgc28gd2UncmUgZ29pbmcgdG8gdHJlYXQgdGhlbSBhcyB0aGVpciBvd24gZ3JpZFxuICBAZWxzZSBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbGlzdCcgb3IgbGVuZ3RoKCRncmlkKSA+IDEge1xuICAgICRzcGFuLWFuZC1ndXR0ZXJzOiAwO1xuXG4gICAgQGlmICRsb2NhdGlvbiA9PSAxIGFuZCAkc3BhbiA+PSAxIHtcbiAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJHNwYW4ge1xuICAgICAgICAkc3Bhbi1hbmQtZ3V0dGVyczogJHNwYW4tYW5kLWd1dHRlcnMgKyBudGgoJGdyaWQsICRpKSArICRndXR0ZXI7XG4gICAgICB9XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICR0b3RhbDogJGxvY2F0aW9uICsgJHNwYW4gLSAxO1xuICAgICAgQGlmICR0b3RhbCAhPSAwIHtcbiAgICAgICAgQGZvciAkaSBmcm9tICRsb2NhdGlvbiB0aHJvdWdoICR0b3RhbCB7XG4gICAgICAgICAgJHNwYW4tYW5kLWd1dHRlcnM6ICRzcGFuLWFuZC1ndXR0ZXJzICsgbnRoKCRncmlkLCAkaSkgKyAkZ3V0dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICRzcGFuLWFuZC1ndXR0ZXJzOiAkc3Bhbi1hbmQtZ3V0dGVycyAtICRndXR0ZXI7XG5cbiAgICBAcmV0dXJuICRzcGFuLWFuZC1ndXR0ZXJzIC8gJGdyaWQtYW5kLWd1dHRlcnMgKiAxMDAlO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAd2FybiBcIkNhbid0IGZpbmQgYSB3b3JraW5nIHNldCBvZiBncmlkISBUaGF0J3MgdGVycmlibGUhXCI7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZpbmQgdGhlIHRvdGFsIHN1bSBvZiB0aGUgZ3JpZFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gY29sdW1uLXN1bSgkZ3JpZCwgJGd1dHRlciwgJGd1dHRlci1zdHlsZSkge1xuICAkc3BsaXQ6IGlmKGluZGV4KCRndXR0ZXItc3R5bGUsICdzcGxpdCcpLCB0cnVlLCBmYWxzZSk7XG5cbiAgQGlmIHR5cGUtb2YoJGdyaWQpID09ICdudW1iZXInIG9yIGxlbmd0aCgkZ3JpZCkgPT0gMSB7XG4gICAgQGlmICRzcGxpdCB7XG4gICAgICBAcmV0dXJuIG50aCgkZ3JpZCwgMSkgKyAoKGNvbHVtbi1jb3VudChudGgoJGdyaWQsIDEpKSkgKiBudGgoJGd1dHRlciwgMSkpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAcmV0dXJuIG50aCgkZ3JpZCwgMSkgKyAoKGNvbHVtbi1jb3VudChudGgoJGdyaWQsIDEpKSAtIDEpICogbnRoKCRndXR0ZXIsIDEpKTtcbiAgICB9XG5cbiAgfVxuICBAZWxzZSBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbGlzdCcge1xuICAgICRzdW06IDA7XG4gICAgQGVhY2ggJGNvbHVtbiBpbiAkZ3JpZCB7XG4gICAgICAkc3VtOiAkc3VtICsgbnRoKCRjb2x1bW4sIDEpO1xuICAgIH1cbiAgICBAaWYgJHNwbGl0IHtcbiAgICAgICRzdW06ICRzdW0gKyAoY29sdW1uLWNvdW50KCRncmlkKSkgKiBudGgoJGd1dHRlciwgMSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRzdW06ICRzdW0gKyAoY29sdW1uLWNvdW50KCRncmlkKSAtIDEpICogbnRoKCRndXR0ZXIsIDEpO1xuICAgIH1cbiAgICBAcmV0dXJuICRzdW07XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIHRoZSBudW1iZXIgb2YgZ3JpZFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gY29sdW1uLWNvdW50KCRncmlkKSB7XG4gIEBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbnVtYmVyJyB7XG4gICAgQHJldHVybiAkZ3JpZDtcbiAgfVxuICBAaWYgdHlwZS1vZigkZ3JpZCkgPT0gJ2xpc3QnIHtcbiAgICBAaWYgbGVuZ3RoKCRncmlkKSA9PSAxIHtcbiAgICAgIEByZXR1cm4gbnRoKCRncmlkLCAxKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgQHJldHVybiBsZW5ndGgoJGdyaWQpO1xuICAgIH1cbiAgfVxufSIsIkBmdW5jdGlvbiBndXR0ZXItc3BhbigkZ3V0dGVyOiBmYWxzZSwgJGdyaWQ6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSkge1xuXG4gIC8vIEZpbmQgdGhlIGNvbHVtbnMgYW5kIGd1dHRlcnNcbiAgJGdyaWQ6IGZpbmQtZ3JpZCgkZ3JpZCk7XG4gICRndXR0ZXI6IGZpbmQtZ3V0dGVyKCRndXR0ZXIpO1xuICAkZ3V0dGVyLXN0eWxlOiBmaW5kLWd1dHRlci1zdHlsZSgkZ3V0dGVyLXN0eWxlKTtcblxuICBAaWYgZml4ZWQtZ3V0dGVyKCRncmlkLCAkZ3V0dGVyLCAkZ3V0dGVyLXN0eWxlKSB7XG4gICAgQHJldHVybiBudGgoJGd1dHRlciwgMSk7XG4gIH1cblxuICAvLyBDb21iaW5lIHRoZSBjb2x1bW5zIGFuZCBndXR0ZXJzXG4gICRncmlkLWFuZC1ndXR0ZXJzOiBjb2x1bW4tc3VtKCRncmlkLCAkZ3V0dGVyLCAkZ3V0dGVyLXN0eWxlKTtcblxuICBAcmV0dXJuIChudGgoJGd1dHRlciwgMSkgLyAkZ3JpZC1hbmQtZ3V0dGVycykgKiAxMDAlXG59IiwiQGZ1bmN0aW9uIGNvbnRleHQoJHByaW1hcnksICRzZWNvbmRhcnkpIHtcbiAgQHJldHVybiAoJHByaW1hcnkgLyAkc2Vjb25kYXJ5KSAqIDEwMCU7XG59IiwiQGZ1bmN0aW9uIGdyaWQtc3Bhbigkc3BhbiwgJGxvY2F0aW9uLCAkZ3JpZDogZmFsc2UsICRndXR0ZXI6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSkge1xuICBAcmV0dXJuIGNvbHVtbi1zcGFuKCRzcGFuLCAkbG9jYXRpb24sICRncmlkLCAkZ3V0dGVyLCAkZ3V0dGVyLXN0eWxlKSArIGd1dHRlci1zcGFuKCRndXR0ZXIsICRncmlkLCAkZ3V0dGVyLXN0eWxlKTtcbn0iLCJAaW1wb3J0IFwiZ3JpZHMvYWRkXCI7XG5AaW1wb3J0IFwiZ3JpZHMvZmluZFwiOyIsIi8vIEFjY2VwdHMgYSBncmlkIGRlZmluaXRpb24gaW4gdGhlIGh1bWFuLXJlYWRhYmxlIGZvcm1hdC4gQ29udmVydHMgaXQgdG8gdGhlIGludGVybmFsIGZvcm1hdCxcbi8vIGFwcGVuZHMgaXQgdG8gYSBsaXN0IG9mIGdyaWRzIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgbGlzdC5cbi8vXG4vLyBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBvbmx5IHJldHVybnMgYSBuZXcgbGlzdCwgaXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBzb3VyY2UgbGlzdC5cbi8vXG4vLyBhZGQtZ3JpZCgkZ3JpZC1kZWZpbml0aW9uLCAkYXBwZW5kLXRvLWxpc3QpXG4vLyAtICRncmlkLWRlZmluaXRpb24gOiA8ZGVmaW5pdGlvbj4gIFNlZSBkb2N1bWVudGF0aW9uIGZvciBzeW50YXg6XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9UZWFtLVNhc3MvU2luZ3VsYXJpdHkvd2lraS9DcmVhdGluZy1Hcmlkc1xuLy8gLSAkYXBwZW5kLXRvLWxpc3QgIDogW2xpc3RdICAgICAgICBBIGxpc3QgdG8gYXBwZW5kIHRvLlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byAkZ3JpZHMgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG5AZnVuY3Rpb24gYWRkLWdyaWQoJGdyaWQtZGVmaW5pdGlvbiwgJGN1c3RvbS1tYXA6IGZhbHNlKSB7XG4gICRQYXJzZWQ6ICAgICAgcGFyc2UtYWRkKCRncmlkLWRlZmluaXRpb24pOyAvLyBQYXJzZXMgZ3JpZCBkZWZpbml0aW9uIHRvIGdyaWQvYnJlYWtwb2ludFxuICAkR3JpZDogICAgICAgIG50aCgkUGFyc2VkLCAxKTsgLy8gRS4gZy4gYCg8Z3JpZD4pYC5cbiAgJEJyZWFrcG9pbnQ6ICBudGgoJFBhcnNlZCwgMik7IC8vIEVpdGhlciBgKDxicmVha3BvaW50PilgIG9yIGZhbHNlLlxuICAkTW9iaWxlLUZpcnN0OiBzZ3MtZ2V0KCdtb2JpbGUgZmlyc3QnKTtcbiAgJEdyaWQtTWFwOiAoKTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYSBjdXN0b20gbWFwIG9yIHRoZSBkZWZhdWx0IG1hcHMgc2hvdWxkIGJlIHVzZWQuXG4gIEBpZiAkY3VzdG9tLW1hcCB7XG4gICAgJEdyaWQtTWFwOiAkY3VzdG9tLW1hcDtcbiAgfVxuICBAZWxzZSB7XG4gICAgQGlmIHNncy1oYXMoJ2dyaWRzJykge1xuICAgICAgJEdyaWQtTWFwOiBzZ3MtZ2V0KCdncmlkcycpO1xuICAgIH1cbiAgfVxuICAkR3JpZC1LZXktTGVuZ3RoOiBsZW5ndGgobWFwLWtleXMoJEdyaWQtTWFwKSk7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGVmaW5pdGlvbiB3aWxsIGJlIHRoZSBmaXJzdCBvbmUgaW4gdGhlIGxpc3RcbiAgLy8gYW5kIHdoZXRoZXIgaXQgaGFzIG5vIGJyZWFrcG9pbnQgc3BlY2lmaWVkLlxuICBAaWYgJEJyZWFrcG9pbnQgPT0gbnVsbCB7XG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgbGlzdCwgZS4gZy4gYCg8Z3JpZD4pYFxuICAgICRHcmlkLU1hcDogbWFwLW1lcmdlKCRHcmlkLU1hcCwgKC0xcHg6ICRHcmlkKSk7XG4gIH1cbiAgLy8gSUYgdGhlIGxpc3QgaXMgaW5pdGlhdGVkIHdpdGggYSBsaXN0IG9mIGdyaWQgY29sdW1ucyBuZWVkIHRvIHN0YXJ0IG9mZlxuICAvLyBhIGNvbW1hIHNlcHJhdGVkIGxpc3QuXG4gIEBlbHNlIHtcbiAgICBAaWYgbm90IChtYXAtaGFzLWtleSgkR3JpZC1NYXAsIC0xcHgpKSB7XG4gICAgICAkR3JpZC1NYXA6IG1hcC1tZXJnZSgkR3JpZC1NYXAsIG1hcC1nZXQoJFNpbmd1bGFyaXR5LVNldHRpbmdzLCAnZ3JpZHMnKSk7XG4gICAgfVxuICAgICRHcmlkLU1hcDogbWFwLW1lcmdlKCRHcmlkLU1hcCwgKCRCcmVha3BvaW50OiAkR3JpZCkpO1xuICB9XG5cbiAgJEdyaWQtTWFwOiBzb3J0LW1hcCgkR3JpZC1NYXAsIG5vdCAkTW9iaWxlLUZpcnN0KTtcblxuICBAcmV0dXJuICRHcmlkLU1hcDtcbn1cblxuXG5AbWl4aW4gYWRkLWdyaWQoJGdyaWQtZGVmaW5pdGlvbikge1xuICAkQWRkLUdyaWQ6IGFkZC1ncmlkKCRncmlkLWRlZmluaXRpb24pO1xuICAkSE9MREVSOiBzZ3Mtc2V0KCdncmlkcycsICRBZGQtR3JpZCk7XG59IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIEdyaWRcbi8vXG4vLyBGaW5kcyB0aGUgZ3JpZCB0aGF0IHlvdSBhcmUgb24uXG4vLyBGcm9tIFNpbmd1bGFyaXR5XG4vLyBNdXN0IGJlIHVzaW5nIEJyZWFrcG9pbnQgdG8gd29yayBwcm9wZXJseVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gZmluZC1ncmlkKCR1c2VyLWNvbHVtbnM6IG51bGwpIHtcblxuICAvLyBXZSBzdXBwbHkgYSBkZWZhdWx0IGlmIHRoZSB1c2VyIGhhc24ndCBzZXQgYW55IGdyaWRzIGFuZCBoYXNuJ3QgcGFzc2VkIGluIGEgY3VzdG9tIGNvbHVtbiBzZXRcbiAgLy8gVGhlIGRlZmF1bHQgc3VwcGxpZWQgaXMgYmFzZWQgb24gb3JpZ2luYWwgU3VzeSBvcHRpb25zXG4gICRHcmlkczogc2dzLWdldCgnZ3JpZHMnKTtcblxuICAkRm91bmQ6IGZpbmQtb2JqZWN0KCRHcmlkcywgJHVzZXItY29sdW1ucyk7XG5cbiAgQGlmIGxlbmd0aCgkRm91bmQpID09IDEge1xuICAgICRGb3VuZDogbnRoKCRGb3VuZCwgMSk7XG4gIH1cblxuICBAcmV0dXJuICRGb3VuZDtcbn0iLCJAaW1wb3J0IFwiZ3V0dGVycy9hZGRcIjtcbkBpbXBvcnQgXCJndXR0ZXJzL2ZpbmRcIjsiLCIvLyBBY2NlcHRzIGEgZ3V0dGVyIGRlZmluaXRpb24gaW4gdGhlIGh1bWFuLXJlYWRhYmxlIGZvcm1hdC4gQ29udmVydHMgaXQgdG8gdGhlIGludGVybmFsIGZvcm1hdCxcbi8vIGFwcGVuZHMgaXQgdG8gYSBsaXN0IG9mIGd1dHRlciBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGxpc3QuXG4vL1xuLy8gTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gb25seSByZXR1cm5zIGEgbmV3IGxpc3QsIGl0IGRvZXMgbm90IG1vZGlmeSB0aGUgc291cmNlIGxpc3QuXG4vL1xuLy8gYWRkLWd1dHRlcigkR3V0dGVyLWRlZmluaXRpb24sICRhcHBlbmQtdG8tbGlzdClcbi8vIC0gJGd1dHRlci1kZWZpbml0aW9uIDogPGRlZmluaXRpb24+ICBTZWUgZG9jdW1lbnRhdGlvbiBmb3Igc3ludGF4OlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9UZWFtLVNhc3MvU2luZ3VsYXJpdHkvd2lraS9DcmVhdGluZy1HdXR0ZXJzXG4vLyAtICRhcHBlbmQtdG8tbGlzdCAgICA6IFtsaXN0XSAgICAgICAgQSBsaXN0IHRvIGFwcGVuZCB0by5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byAkZ3V0dGVycyBpZiBub25lIGlzIHNwZWNpZmllZC5cbkBmdW5jdGlvbiBhZGQtZ3V0dGVyKCRndXR0ZXItZGVmaW5pdGlvbiwgJGN1c3RvbS1tYXA6IGZhbHNlKSB7XG4gICRQYXJzZWQ6ICAgICAgcGFyc2UtYWRkKCRndXR0ZXItZGVmaW5pdGlvbik7IC8vIFBhcnNlcyBHdXR0ZXIgZGVmaW5pdGlvbiB0byBHdXR0ZXIvYnJlYWtwb2ludFxuICAkR3V0dGVyOiAgICAgICAgbnRoKCRQYXJzZWQsIDEpOyAvLyBFLiBnLiBgKDxHdXR0ZXI+KWAuXG4gICRCcmVha3BvaW50OiAgbnRoKCRQYXJzZWQsIDIpOyAvLyBFaXRoZXIgYCg8YnJlYWtwb2ludD4pYCBvciBmYWxzZS5cbiAgJE1vYmlsZS1GaXJzdDogc2dzLWdldCgnbW9iaWxlIGZpcnN0Jyk7XG4gICRHdXR0ZXItTWFwOiAoKTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYSBjdXN0b20gbWFwIG9yIHRoZSBkZWZhdWx0IG1hcHMgc2hvdWxkIGJlIHVzZWQuXG4gIEBpZiAkY3VzdG9tLW1hcCB7XG4gICAgJEd1dHRlci1NYXA6ICRjdXN0b20tbWFwO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAaWYgc2dzLWhhcygnZ3V0dGVycycpIHtcbiAgICAgICRHdXR0ZXItTWFwOiBzZ3MtZ2V0KCdndXR0ZXJzJyk7XG4gICAgfVxuICB9XG4gICRHdXR0ZXItS2V5LUxlbmd0aDogbGVuZ3RoKG1hcC1rZXlzKCRHdXR0ZXItTWFwKSk7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGVmaW5pdGlvbiB3aWxsIGJlIHRoZSBmaXJzdCBvbmUgaW4gdGhlIGxpc3RcbiAgLy8gYW5kIHdoZXRoZXIgaXQgaGFzIG5vIGJyZWFrcG9pbnQgc3BlY2lmaWVkLlxuICBAaWYgJEJyZWFrcG9pbnQgPT0gbnVsbCB7XG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgbGlzdCwgZS4gZy4gYCg8R3V0dGVyPilgXG4gICAgJEd1dHRlci1NYXA6IG1hcC1tZXJnZSgkR3V0dGVyLU1hcCwgKC0xcHg6ICRHdXR0ZXIpKTtcbiAgfVxuICAvLyBJRiB0aGUgbGlzdCBpcyBpbml0aWF0ZWQgd2l0aCBhIGxpc3Qgb2YgR3V0dGVyIGNvbHVtbnMgbmVlZCB0byBzdGFydCBvZmZcbiAgLy8gYSBjb21tYSBzZXByYXRlZCBsaXN0LlxuICBAZWxzZSB7XG4gICAgQGlmIG5vdCAobWFwLWhhcy1rZXkoJEd1dHRlci1NYXAsIC0xcHgpKSB7XG4gICAgICAkR3V0dGVyLU1hcDogbWFwLW1lcmdlKCRHdXR0ZXItTWFwLCBtYXAtZ2V0KCRTaW5ndWxhcml0eS1TZXR0aW5ncywgJ2d1dHRlcnMnKSk7XG4gICAgfVxuICAgICRHdXR0ZXItTWFwOiBtYXAtbWVyZ2UoJEd1dHRlci1NYXAsICgkQnJlYWtwb2ludDogJEd1dHRlcikpO1xuICB9XG5cbiAgJEd1dHRlci1NYXA6IHNvcnQtbWFwKCRHdXR0ZXItTWFwLCBub3QgJE1vYmlsZS1GaXJzdCk7XG5cbiAgQHJldHVybiAkR3V0dGVyLU1hcDtcbn1cblxuQG1peGluIGFkZC1ndXR0ZXIoJGd1dHRlci1kZWZpbml0aW9uKSB7XG4gICRBZGQtR3V0dGVyOiBhZGQtZ3V0dGVyKCRndXR0ZXItZGVmaW5pdGlvbik7XG4gICRIT0xERVI6IHNncy1zZXQoJ2d1dHRlcnMnLCAkQWRkLUd1dHRlcik7XG59IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIGd1dHRlclxuLy9cbi8vIEZpbmRzIHRoZSBndXR0ZXIgdGhhdCB5b3UgYXJlIG9uLlxuLy8gRnJvbSBTaW5ndWxhcml0eVxuLy8gTXVzdCBiZSB1c2luZyBCcmVha3BvaW50IHRvIHdvcmsgcHJvcGVybHlcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGZpbmQtZ3V0dGVyKCR1c2VyLWd1dHRlcnM6IG51bGwpIHtcblxuICAvLyBXZSBzdXBwbHkgYSBkZWZhdWx0IGlmIHRoZSB1c2VyIGhhc24ndCBzZXQgYW55IGd1dHRlcnMgYW5kIGhhc24ndCBwYXNzZWQgaW4gYSBjdXN0b20gY29sdW1uIHNldFxuICAvLyBUaGUgZGVmYXVsdCBzdXBwbGllZCBpcyBiYXNlZCBvbiBvcmlnaW5hbCBTdXN5IG9wdGlvbnNcbiAgJEd1dHRlcnM6IHNncy1nZXQoJ2d1dHRlcnMnKTtcblxuICAkRm91bmQ6IGZpbmQtb2JqZWN0KCRHdXR0ZXJzLCAkdXNlci1ndXR0ZXJzKTtcblxuICBAaWYgbGVuZ3RoKCRGb3VuZCkgPT0gMSB7XG4gICAgJEZvdW5kOiBudGgoJEZvdW5kLCAxKTtcbiAgfVxuXG4gIEByZXR1cm4gJEZvdW5kO1xufSIsIkBpbXBvcnQgXCJndXR0ZXItc3R5bGVzL2FkZFwiO1xuQGltcG9ydCBcImd1dHRlci1zdHlsZXMvZmluZFwiO1xuQGltcG9ydCBcImd1dHRlci1zdHlsZXMvaGVscGVyc1wiOyIsIi8vIEFjY2VwdHMgYSBndXR0ZXItc3R5bGUgc3R5bGUgZGVmaW5pdGlvbiBpbiB0aGUgaHVtYW4tcmVhZGFibGUgZm9ybWF0LiBDb252ZXJ0cyBpdCB0byB0aGUgaW50ZXJuYWwgZm9ybWF0LFxuLy8gYXBwZW5kcyBpdCB0byBhIGxpc3Qgb2YgZ3V0dGVyLXN0eWxlIHN0eWxlcyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGxpc3QuXG4vL1xuLy8gTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gb25seSByZXR1cm5zIGEgbmV3IGxpc3QsIGl0IGRvZXMgbm90IG1vZGlmeSB0aGUgc291cmNlIGxpc3QuXG4vL1xuLy8gYWRkLWd1dHRlci1zdHlsZS1zdHlsZSgkZ3V0dGVyLXN0eWxlLXN0eWxlLWRlZmluaXRpb24sICRhcHBlbmQtdG8tbGlzdClcbi8vIC0gJGd1dHRlci1zdHlsZS1kZWZpbml0aW9uIDogPGRlZmluaXRpb24+ICBTZWUgZG9jdW1lbnRhdGlvbiBmb3Igc3ludGF4OlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9UZWFtLVNhc3MvU2luZ3VsYXJpdHkvd2lraS9DcmVhdGluZy1Hcmlkc1xuLy8gLSAkYXBwZW5kLXRvLWxpc3QgICAgOiBbbGlzdF0gICAgICAgIEEgbGlzdCB0byBhcHBlbmQgdG8uXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gJGd1dHRlci1zdHlsZXMgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG5AZnVuY3Rpb24gYWRkLWd1dHRlci1zdHlsZSgkZ3V0dGVyLXN0eWxlLWRlZmluaXRpb24sICRjdXN0b20tbWFwOiBmYWxzZSkge1xuICAkUGFyc2VkOiAgICAgICAgcGFyc2UtYWRkKCRndXR0ZXItc3R5bGUtZGVmaW5pdGlvbik7IC8vIFBhcnNlcyBndXR0ZXItc3R5bGUgZGVmaW5pdGlvbiB0byBndXR0ZXItc3R5bGUvYnJlYWtwb2ludFxuICAkR3V0dGVyLVN0eWxlOiAgbnRoKCRQYXJzZWQsIDEpOyAvLyBFLiBnLiBgKDxndXR0ZXItc3R5bGU+KWAuXG4gICRCcmVha3BvaW50OiAgICBudGgoJFBhcnNlZCwgMik7IC8vIEVpdGhlciBgKDxicmVha3BvaW50PilgIG9yIGZhbHNlLlxuICAkTW9iaWxlLUZpcnN0OiAgc2dzLWdldCgnbW9iaWxlIGZpcnN0Jyk7XG4gICRHdXR0ZXItU3R5bGUtTWFwOiAoKTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYSBjdXN0b20gbWFwIG9yIHRoZSBkZWZhdWx0IG1hcHMgc2hvdWxkIGJlIHVzZWQuXG4gIEBpZiAkY3VzdG9tLW1hcCB7XG4gICAgJEd1dHRlci1TdHlsZS1NYXA6ICRjdXN0b20tbWFwO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAaWYgc2dzLWhhcygnZ3V0dGVyIHN0eWxlcycpIHtcbiAgICAgICRHdXR0ZXItU3R5bGUtTWFwOiBzZ3MtZ2V0KCdndXR0ZXIgc3R5bGVzJyk7XG4gICAgfVxuICB9XG4gICRHdXR0ZXItU3R5bGUtS2V5LUxlbmd0aDogbGVuZ3RoKG1hcC1rZXlzKCRHdXR0ZXItU3R5bGUtTWFwKSk7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGVmaW5pdGlvbiB3aWxsIGJlIHRoZSBmaXJzdCBvbmUgaW4gdGhlIGxpc3RcbiAgLy8gYW5kIHdoZXRoZXIgaXQgaGFzIG5vIGJyZWFrcG9pbnQgc3BlY2lmaWVkLlxuICBAaWYgJEJyZWFrcG9pbnQgPT0gbnVsbCB7XG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgbGlzdCwgZS4gZy4gYCg8Z3V0dGVyLXN0eWxlPilgXG4gICAgJEd1dHRlci1TdHlsZS1NYXA6IG1hcC1tZXJnZSgkR3V0dGVyLVN0eWxlLU1hcCwgKC0xcHg6ICRHdXR0ZXItU3R5bGUpKTtcbiAgfVxuICAvLyBJRiB0aGUgbGlzdCBpcyBpbml0aWF0ZWQgd2l0aCBhIGxpc3Qgb2YgZ3V0dGVyLXN0eWxlIGNvbHVtbnMgbmVlZCB0byBzdGFydCBvZmZcbiAgLy8gYSBjb21tYSBzZXByYXRlZCBsaXN0LlxuICBAZWxzZSB7XG4gICAgQGlmIG5vdCAobWFwLWhhcy1rZXkoJEd1dHRlci1TdHlsZS1NYXAsIC0xcHgpKSB7XG4gICAgICAkR3V0dGVyLVN0eWxlLU1hcDogbWFwLW1lcmdlKCRHdXR0ZXItU3R5bGUtTWFwLCBtYXAtZ2V0KCRTaW5ndWxhcml0eS1TZXR0aW5ncywgJ2d1dHRlciBzdHlsZXMnKSk7XG4gICAgfVxuICAgICRHdXR0ZXItU3R5bGUtTWFwOiBtYXAtbWVyZ2UoJEd1dHRlci1TdHlsZS1NYXAsICgkQnJlYWtwb2ludDogJEd1dHRlci1TdHlsZSkpO1xuICB9XG5cbiAgJEd1dHRlci1TdHlsZS1NYXA6IHNvcnQtbWFwKCRHdXR0ZXItU3R5bGUtTWFwLCBub3QgJE1vYmlsZS1GaXJzdCk7XG5cbiAgQHJldHVybiAkR3V0dGVyLVN0eWxlLU1hcDtcbn1cblxuQG1peGluIGFkZC1ndXR0ZXItc3R5bGUoJGd1dHRlci1zdHlsZS1kZWZpbml0aW9uKSB7XG4gICRBZGQtZ3V0dGVyLXN0eWxlOiBhZGQtZ3V0dGVyLXN0eWxlKCRndXR0ZXItc3R5bGUtZGVmaW5pdGlvbik7XG4gICRIT0xERVI6IHNncy1zZXQoJ2d1dHRlciBzdHlsZXMnLCAkQWRkLWd1dHRlci1zdHlsZSk7XG59IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGaW5kIGd1dHRlciBzdHlsZVxuLy9cbi8vIEZpbmRzIHRoZSBndXR0ZXIgc3R5bGUgdGhhdCB5b3UgYXJlIHdvcmtpbmcgd2l0aC5cbi8vIEZyb20gU2luZ3VsYXJpdHlcbi8vIE11c3QgYmUgdXNpbmcgQnJlYWtwb2ludCB0byB3b3JrIHByb3Blcmx5XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBmaW5kLWd1dHRlci1zdHlsZSgkdXNlci1ndXR0ZXItc3R5bGVzOiBudWxsKSB7XG5cbiAgLy8gV2Ugc3VwcGx5IGEgZGVmYXVsdCBpZiB0aGUgdXNlciBoYXNuJ3Qgc2V0IGFueSBndXR0ZXJzIGFuZCBoYXNuJ3QgcGFzc2VkIGluIGEgY3VzdG9tIGNvbHVtbiBzZXRcbiAgLy8gVGhlIGRlZmF1bHQgc3VwcGxpZWQgaXMgYmFzZWQgb24gb3JpZ2luYWwgU3VzeSBvcHRpb25zXG4gICRHdXR0ZXJzLVN0eWxlczogc2dzLWdldCgnZ3V0dGVyIHN0eWxlcycpO1xuXG4gICRGb3VuZDogZmluZC1vYmplY3QoJEd1dHRlcnMtU3R5bGVzLCAkdXNlci1ndXR0ZXItc3R5bGVzKTtcblxuICBAaWYgbGVuZ3RoKCRGb3VuZCkgPT0gMSB7XG4gICAgJEZvdW5kOiBudGgoJEZvdW5kLCAxKTtcbiAgfVxuXG4gIEByZXR1cm4gJEZvdW5kO1xufSIsIkBmdW5jdGlvbiBmaXhlZC1ndXR0ZXIoJHVzZXItY29sdW1ucywgJHVzZXItZ3V0dGVyLCAkdXNlci1ndXR0ZXItc3R5bGUpIHtcbiAgQGlmIGluZGV4KCR1c2VyLWd1dHRlci1zdHlsZSwgJ2ZpeGVkJykge1xuICAgIC8vIEBkZWJ1ZyAnRml4ZWQgaW4gb3V0cHV0IHN0eWxlJztcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgQGVsc2UgaWYgdHlwZS1vZigkdXNlci1jb2x1bW5zKSA9PSAnbnVtYmVyJyBhbmQgbm90IHVuaXRsZXNzKCR1c2VyLWd1dHRlcikge1xuICAgIC8vIEBkZWJ1ZyAnRXF1YWwgY29sdW1ucyB3aXRoIGEgdW5pdCBiYXNlZCBndXR0ZXInO1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuICBAZWxzZSBpZiB0eXBlLW9mKCR1c2VyLWNvbHVtbnMpID09ICdsaXN0JyB7XG4gICAgQGlmIHVuaXQobnRoKCR1c2VyLWNvbHVtbnMsIDEpKSAhPSB1bml0KCR1c2VyLWd1dHRlcikge1xuICAgICAgLy8gQGRlYnVnICdDb2x1bW5zIGFuZCBndXR0ZXJzIGFyZSBkaWZmZXJlbnQgdW5pdHMnO1xuICAgICAgQHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbkBmdW5jdGlvbiBndXR0ZXItcHJvcGVydHkoJHVzZXItY29sdW1ucywgJHVzZXItZ3V0dGVyLCAkdXNlci1ndXR0ZXItc3R5bGUpIHtcbiAgQGlmIGZpeGVkLWd1dHRlcigkdXNlci1jb2x1bW5zLCAkdXNlci1ndXR0ZXIsICR1c2VyLWd1dHRlci1zdHlsZSkge1xuICAgIEByZXR1cm4gJ3BhZGRpbmcnO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAcmV0dXJuICdtYXJnaW4nO1xuICB9XG59IiwiQGltcG9ydCBcImFwaS9mbG9hdFwiO1xuQGltcG9ydCBcImFwaS9pc29sYXRpb25cIjtcbkBpbXBvcnQgXCJhcGkvY2FsY1wiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIE1hc3RlciBHcmlkIFNwYW4gbWl4aW5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQG1peGluIGdyaWQtc3Bhbigkc3BhbiwgJGxvY2F0aW9uOiAxLCAkZ3JpZDogbnVsbCwgJGd1dHRlcjogbnVsbCwgJG91dHB1dC1zdHlsZTogbnVsbCwgJGd1dHRlci1zdHlsZTogbnVsbCwgJG9wdGlvbnM6IG51bGwpIHtcblxuICBAaWYgJG91dHB1dC1zdHlsZSA9PSBudWxsIHtcbiAgICAkb3V0cHV0LXN0eWxlOiBzZ3MtZ2V0KCdvdXRwdXQnKTtcbiAgfVxuXG4gICRHcmlkOiBmaW5kLWdyaWQoJGdyaWQpO1xuICAkR3V0dGVyOiBmaW5kLWd1dHRlcigkZ3V0dGVyKTtcbiAgJFN0eWxlOiBmaW5kLWd1dHRlci1zdHlsZSgkZ3V0dGVyLXN0eWxlKTtcblxuICAkU3RhcnQtUm93OiBzdGFydC1yb3coJGxvY2F0aW9uKTtcbiAgJEVuZC1Sb3c6IGVuZC1yb3coJHNwYW4sICRsb2NhdGlvbiwgJEdyaWQpO1xuXG4gICRGaXhlZC1HdXR0ZXI6IGZpeGVkLWd1dHRlcigkR3JpZCwgJEd1dHRlciwgJFN0eWxlKTtcbiAgJFNwbGl0LUd1dHRlcjogaW5kZXgoJFN0eWxlLCAnc3BsaXQnKTtcbiAgJEd1dHRlci1Qcm9wZXJ0eTogZ3V0dGVyLXByb3BlcnR5KCRHcmlkLCAkR3V0dGVyLCAkU3R5bGUpO1xuXG4gICREaXJlY3Rpb246IHNncy1nZXQoJ2RpcmVjdGlvbicpO1xuICAkRnJvbTogaWYoJG9wdGlvbnMgYW5kIHR5cGUtb2YoJG9wdGlvbnMpID09ICdtYXAnLCBpZihtYXAtZ2V0KCRvcHRpb25zLCAnZnJvbScpLCBtYXAtZ2V0KCRvcHRpb25zLCAnZnJvbScpLCAkRGlyZWN0aW9uKSwgJERpcmVjdGlvbik7XG4gICRGcm9tOiBpZigkRnJvbSA9PSAnbHRyJyBvciAkRnJvbSA9PSAncnRsJywgbmFtZWQtZGlyZWN0aW9uKCRGcm9tKSwgJEZyb20pO1xuXG4gICRIb2xkZXI6ICgpO1xuICBAZWFjaCAkaywgJHYgaW4gJG9wdGlvbnMge1xuICAgICRIb2xkZXI6IGlmKCRrID09ICdmcm9tJywgJEhvbGRlciwgbWFwLW1lcmdlKCRIb2xkZXIsICgkazogJHYpKSk7XG4gIH1cbiAgJG9wdGlvbnM6IGlmKGxlbmd0aCgkSG9sZGVyKSA+IDAsICRIb2xkZXIsIG51bGwpO1xuXG4gICRTcGFuLU1hcDogKFxuICAgICdzcGFuJzogJHNwYW4sXG4gICAgJ2xvY2F0aW9uJzogJGxvY2F0aW9uLFxuICAgICdncmlkJzogJEdyaWQsXG4gICAgJ2d1dHRlcic6ICRHdXR0ZXIsXG4gICAgJ3N0eWxlJzogJFN0eWxlLFxuICAgICdzdGFydCByb3cnOiAkU3RhcnQtUm93LFxuICAgICdlbmQgcm93JzogJEVuZC1Sb3csXG4gICAgJ2ZpeGVkIGd1dHRlcic6ICRGaXhlZC1HdXR0ZXIsXG4gICAgJ3NwbGl0IGd1dHRlcic6ICRTcGxpdC1HdXR0ZXIsXG4gICAgJ2d1dHRlciBwcm9wZXJ0eSc6ICRHdXR0ZXItUHJvcGVydHksXG4gICAgJ29wdGlvbnMnOiAkb3B0aW9uc1xuICApO1xuXG4gIEBpZiBzZ3MtZ2V0KCdkZWJ1ZycpICE9IGZhbHNlIHtcbiAgICAtc2dzLXNwYW4tc2V0dGluZ3M6IGluc3BlY3QoJFNwYW4tTWFwKTtcbiAgfVxuXG5cbiAgQGlmIGZ1bmN0aW9uLWV4aXN0cygnb3V0cHV0LSN7JG91dHB1dC1zdHlsZX0nKSB7XG4gICAgJExlZnQ6ICgpO1xuICAgICRSaWdodDogKCk7XG5cbiAgICBAaWYgJERpcmVjdGlvbiA9PSAnYm90aCcgb3IgJEZyb20gPT0gJ2xlZnQnIG9yICgkRGlyZWN0aW9uID09ICdydGwnIGFuZCAkRnJvbSA9PSAnb3Bwb3NpdGUnKSB7XG4gICAgICAkTGVmdDogY2FsbCgnb3V0cHV0LSN7JG91dHB1dC1zdHlsZX0nLCBtYXAtbWVyZ2UoJFNwYW4tTWFwLCAoJ2RpcmVjdGlvbic6IGxlZnQpKSk7XG4gICAgfVxuXG4gICAgQGlmICREaXJlY3Rpb24gPT0gJ2JvdGgnIG9yICRGcm9tID09ICdyaWdodCcgb3IgKCREaXJlY3Rpb24gPT0gJ2x0cicgYW5kICRGcm9tID09ICdvcHBvc2l0ZScpIHtcbiAgICAgICRSaWdodDogY2FsbCgnb3V0cHV0LSN7JG91dHB1dC1zdHlsZX0nLCBtYXAtbWVyZ2UoJFNwYW4tTWFwLCAoJ2RpcmVjdGlvbic6IHJpZ2h0KSkpO1xuICAgIH1cblxuICAgICRMZWZ0LUtleXM6IG1hcC1rZXlzKCRMZWZ0KTtcbiAgICAkUmlnaHQtS2V5czogbWFwLWtleXMoJFJpZ2h0KTtcbiAgICAkRXhjbHVkZTogKCk7XG5cbiAgICBAZWFjaCAka2V5IGluICRMZWZ0LUtleXMge1xuICAgICAgQGlmIGluZGV4KCRSaWdodC1LZXlzLCAka2V5KSB7XG4gICAgICAgIEBpZiBtYXAtZ2V0KCRSaWdodCwgJGtleSkgPT0gbWFwLWdldCgkTGVmdCwgJGtleSkge1xuICAgICAgICAgICRFeGNsdWRlOiBhcHBlbmQoJEV4Y2x1ZGUsICRrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHRyeSBhbmQgcHJpbnQgdGhlIExlZnQgdmFsdWVcbiAgICBAaW5jbHVkZSBncmlkLXNwYW4tYnVpbGQtZXhjbHVkZSgkTGVmdCwgJEV4Y2x1ZGUsIGZhbHNlKTtcblxuICAgIC8vIElmIERpcmVjdGlvbiBpcyBCb3RoIG9yIFJUTCwgYWRkIHRoZSBSVEwgYXR0cmlidXRlIHNlbGVjdG9yXG4gICAgQGlmICREaXJlY3Rpb24gPT0gJ2JvdGgnIG9yICREaXJlY3Rpb24gPT0gJ3J0bCcge1xuICAgICAgW2Rpcj1cInJ0bFwiXSAmIHtcbiAgICAgICAgQGluY2x1ZGUgZ3JpZC1zcGFuLWJ1aWxkLWV4Y2x1ZGUoJFJpZ2h0LCAkRXhjbHVkZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIEBpbmNsdWRlIGdyaWQtc3Bhbi1idWlsZC1leGNsdWRlKCRSaWdodCwgJEV4Y2x1ZGUsIHRydWUpO1xuICAgIH1cbiAgfVxuICBAZWxzZSB7XG4gICAgQHdhcm4gXCJUaGVyZSBkb2Vzbid0IGFwcGVhciB0byBiZSBhbiBvdXRwdXQgc3R5bGUgbmFtZWQgYCN7JG91dHB1dC1zdHlsZX1gLiBQbGVhc2UgZW5zdXJlIHRoYXQgdGhlIGZ1bmN0aW9uIGBvdXRwdXQtI3skb3V0cHV0LXN0eWxlfWAgYW5kIHRoYXQgdGhlIG91dHB1dCBzdHlsZSBgI3skb3V0cHV0LXN0eWxlfWAgYXJlIGJvdGggYXZhaWxhYmxlIGJlZm9yZSB0cnlpbmcgdG8gdXNlIHRoZW0uXCI7XG4gIH1cbn1cblxuQG1peGluIGdyaWQtc3Bhbi1idWlsZCgkcHJvcGVydHksICR2YWx1ZSkge1xuICBAaWYgdHlwZS1vZigkdmFsdWUpICE9ICdtYXAnIHtcbiAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcbiAgfVxuICBAZWxzZSB7XG4gICAgQGVhY2ggJHByZWZpeCwgJHZhbCBpbiAkdmFsdWUge1xuICAgICAgI3skcHJvcGVydHl9OiAkdmFsO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gZ3JpZC1zcGFuLWJ1aWxkLWV4Y2x1ZGUoJHByb3BlcnRpZXMsICRkZWx0YSwgJGV4Y2x1ZGU6IGZhbHNlKSB7XG4gIEBlYWNoICRwcm9wZXJ0eSwgJHZhbHVlIGluICRwcm9wZXJ0aWVzIHtcbiAgICBAaWYgJGV4Y2x1ZGUge1xuICAgICAgQGlmIG5vdCBpbmRleCgkZGVsdGEsICRwcm9wZXJ0eSkge1xuICAgICAgICBAaW5jbHVkZSBncmlkLXNwYW4tYnVpbGQoJHByb3BlcnR5LCAkdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAaW5jbHVkZSBncmlkLXNwYW4tYnVpbGQoJHByb3BlcnR5LCAkdmFsdWUpO1xuICAgIH1cbiAgfVxufSIsIkBmdW5jdGlvbiBvdXRwdXQtZmxvYXQoJFNwYW4tTWFwKSB7XG4gIC8vIFNldCB1cCBMZWZ0L1JpZ2h0IG1hcHNcbiAgJFJldHVybjogKCk7XG5cbiAgJFNwYW46IG1hcC1nZXQoJFNwYW4tTWFwLCAnc3BhbicpO1xuICAkTG9jYXRpb246IG1hcC1nZXQoJFNwYW4tTWFwLCAnbG9jYXRpb24nKTtcblxuICAkR3JpZDogbWFwLWdldCgkU3Bhbi1NYXAsICdncmlkJyk7XG4gICRHdXR0ZXI6IG1hcC1nZXQoJFNwYW4tTWFwLCAnZ3V0dGVyJyk7XG4gICRTdHlsZTogbWFwLWdldCgkU3Bhbi1NYXAsICdzdHlsZScpO1xuXG4gICRTdGFydC1Sb3c6IG1hcC1nZXQoJFNwYW4tTWFwLCAnc3RhcnQgcm93Jyk7XG4gICRFbmQtUm93OiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2VuZCByb3cnKTtcblxuICAkRml4ZWQtR3V0dGVyOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2ZpeGVkIGd1dHRlcicpO1xuICAkU3BsaXQtR3V0dGVyOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ3NwbGl0IGd1dHRlcicpO1xuICAkR3V0dGVyLVByb3BlcnR5OiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2d1dHRlciBwcm9wZXJ0eScpO1xuXG4gICREaXJlY3Rpb246IG1hcC1nZXQoJFNwYW4tTWFwLCAnZGlyZWN0aW9uJyk7XG4gICRPcHRpb25zOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ29wdGlvbnMnKTtcblxuICBAaWYgJFN0YXJ0LVJvdyB7XG4gICAgJExvY2F0aW9uOiAxO1xuICB9XG4gIEBlbHNlIGlmICRFbmQtUm93IHtcbiAgICAkTG9jYXRpb246IGNvbHVtbi1jb3VudCgkR3JpZCkgLSAkU3BhbiArIDE7XG4gIH1cblxuICAkV2lkdGg6IGNvbHVtbi1zcGFuKCRTcGFuLCAkTG9jYXRpb24sICRHcmlkLCAkR3V0dGVyLCAkU3R5bGUpO1xuICAkTWFyZ2luLVNwYW46IGNvbHVtbi1zcGFuKCgkTG9jYXRpb24gLSAxKSwgMSwgJEdyaWQsICRHdXR0ZXIsICRTdHlsZSk7XG4gICRHdXR0ZXItU3BhbjogZ3V0dGVyLXNwYW4oJEd1dHRlciwgJEdyaWQpO1xuXG4gIC8vIEJhY2t3YXJkcyBDb21wYXRpYmlsaXR5IGZvciBPcHRpb25zXG4gIEBpZiB0eXBlLW9mKCRPcHRpb25zKSAhPSAnbWFwJyBhbmQgJE9wdGlvbnMgIT0gbnVsbCB7XG4gICAgJE9wdGlvbnM6ICgnY2xlYXInOiB1bnF1b3RlKG50aCgkT3B0aW9ucywgMSkpKTtcbiAgfVxuXG4gICREaXI6ICREaXJlY3Rpb247XG4gICRPcHA6IG9wcG9zaXRlLWRpcmVjdGlvbigkRGlyKTtcblxuICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCd3aWR0aCc6ICRXaWR0aCkpO1xuICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdjbGVhcic6ICRPcHApKTtcblxuICBAaWYgKCRFbmQtUm93KSB7XG4gICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnZmxvYXQnOiAkT3BwKSk7XG5cbiAgICBAaWYgJFNwbGl0LUd1dHRlciBhbmQgbm90ICRGaXhlZC1HdXR0ZXIge1xuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyREaXJ9JzogMCkpO1xuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyRPcHB9JzogJEd1dHRlci1TcGFuIC8gMikpO1xuICAgIH1cbiAgICBAZWxzZSBpZiBub3QgJEZpeGVkLUd1dHRlciB7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JE9wcH0nOiAwKSk7XG4gICAgfVxuICB9XG4gIEBlbHNlIHtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdmbG9hdCc6ICREaXIpKTtcblxuICAgIEBpZiAkU3BsaXQtR3V0dGVyIGFuZCBub3QgJEZpeGVkLUd1dHRlciB7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JERpcn0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JE9wcH0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgfVxuICAgIEBlbHNlIGlmIG5vdCAkRml4ZWQtR3V0dGVyIHtcbiAgICAgIEBpZiAkU3RhcnQtUm93IHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyREaXJ9JzogMCkpO1xuICAgICAgfVxuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyRPcHB9JzogJEd1dHRlci1TcGFuKSk7XG4gICAgfVxuICB9XG4gIC8vIElmIG9wdGlvbnMgYXJlIHNldCwgd2UgbWVyZ2UgdGhlbSBpbiFcbiAgQGlmICgkT3B0aW9ucykge1xuICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAkT3B0aW9ucyk7XG4gIH1cblxuICAvLyBJZiBDTGVhciBpc24ndCBhbHJlYWR5IGF2YWlsYWJsZSwgc2V0IGl0IVxuICBAaWYgbm90IG1hcC1oYXMta2V5KCRSZXR1cm4sICdjbGVhcicpIHtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdjbGVhcic6IG5vbmUpKTtcbiAgfVxuXG4gIC8vIExlZnQgRml4ZWQgR3V0dGVyc1xuICBAaWYgJEZpeGVkLUd1dHRlciB7XG4gICAgQGlmIGluZGV4KCRTdHlsZSwgJ3NwbGl0Jykge1xuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyREaXJ9JzogJEd1dHRlci1TcGFuIC8gMikpO1xuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyRPcHB9JzogJEd1dHRlci1TcGFuIC8gMikpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAaWYgbm90ICRFbmQtUm93IHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyRPcHB9JzogJEd1dHRlci1TcGFuKSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJyN7JEd1dHRlci1Qcm9wZXJ0eX0tI3skT3BwfSc6IDApKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRSZXR1cm47XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSGFwcHkgU3ludGF4IGZvciBGbG9hdFxuLy9cbi8vIE1ha2VzIHdvcmtpbmcgd2l0aCBGbG9hdCBlYXNpZXIsIGFzIGl0IGFsbG93cyB5b3UgdG8gd2FsayB0aGUgZ3JpZCBmb3Igc3ltbWV0cmljIGdyaWRzIGFuZCBlYXN5IGFwcGx5aW5nIG9mICdsYXN0JyBhbmQgJ2ZpcnN0JywgYXMgd2VsbCBhcyBhdXRvbWF0aWNhbGx5IGJ1aWxkaW5nIHRoZSB2ZXJib3NlIGdyaWQtc3BhbiBtaXhpbiBjYWxsXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBtaXhpbiBmbG9hdC1zcGFuKCRTcGFuLCAkTG9jYXRpb246IGZhbHNlLCAkZ3JpZDogZmFsc2UsICRndXR0ZXI6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSwgJGZyb206IGZhbHNlKSB7XG4gICRncmlkOiBmaW5kLWdyaWQoJGdyaWQpO1xuICAkZ3V0dGVyOiBmaW5kLWd1dHRlcigkZ3V0dGVyKTtcbiAgJHJvdzogZmFsc2U7XG5cbiAgJE9wdGlvbnM6IGlmKCRmcm9tLCAoJ2Zyb20nOiAkZnJvbSksIG51bGwpO1xuXG4gIC8vIFdvcmtpbmcgYXJvdW5kIFNBU1MgdHJlYXRpbmcgYSBudW1iZXIgbGlrZSBhIGxpc3Qgd2l0aCBvbmUgZWxlbWVudFxuICBAaWYgdHlwZS1vZigkZ3JpZCkgPT0gJ2xpc3QnIGFuZCBsZW5ndGgoJGdyaWQpID09IDEge1xuICAgICRncmlkOiBudGgoJGdyaWQsIDEpO1xuICB9XG5cbiAgLy8gV29ya2luZyB3aXRoIGEgc3ltbWV0cmljIGdyaWRcbiAgQGlmIHR5cGUtb2YoJGdyaWQpID09ICdudW1iZXInIHtcbiAgICAvLyBTcGVjaWFsIHRyZWF0bWVudCBmb3Igbm9uLW51bWVyaWMgbG9jYXRpb25cbiAgICBAaWYgdHlwZS1vZigkTG9jYXRpb24pICE9ICdudW1iZXInIHtcbiAgICAgIEBpZiAkTG9jYXRpb24gPT0gJ2xhc3QnIG9yICRMb2NhdGlvbiA9PSAnb21lZ2EnIHtcbiAgICAgICAgJExvY2F0aW9uOiAkZ3JpZCAtICRTcGFuICsgMTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgQGlmICRMb2NhdGlvbiA9PSAnZmlyc3QnIG9yICRMb2NhdGlvbiA9PSAnYWxwaGEnIHtcbiAgICAgICAgICAkcm93OiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICRMb2NhdGlvbjogMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBncmlkLXNwYW4oJFNwYW4sICRMb2NhdGlvbiwgJGdyaWQsICRndXR0ZXIsICdmbG9hdCcsICRndXR0ZXItc3R5bGUsICRPcHRpb25zKTtcblxuICAgIEBpZiAkcm93IHtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cbiAgfVxuICAvLyBXb3JraW5nIHdpdGggYW4gYXN5bW1ldHJpYyBncmlkLCBzaG91bGQgaGF2ZSBsb2NhdGlvbiBwcm92aWRlZFxuICBAZWxzZSBpZiB0eXBlLW9mKCRncmlkKSA9PSAnbGlzdCcgYW5kICRMb2NhdGlvbiAhPSBmYWxzZSB7XG4gICAgQGluY2x1ZGUgZ3JpZC1zcGFuKCRTcGFuLCAkTG9jYXRpb24sICRncmlkLCAkZ3V0dGVyLCAnZmxvYXQnLCAkZ3V0dGVyLXN0eWxlLCAkT3B0aW9ucyk7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEB3YXJuICdBc3ltbWV0cmljIEdyaWRzIG5lZWQgYSBMb2NhdGlvbiB2YWx1ZSBhcyB3ZWxsIGFzIGEgc3BhbiB2YWx1ZSBpbiBvcmRlciB0byBrbm93IHdoZXJlIG9uIHRoZSBncmlkIHlvdSBhcmUhIFBsZWFzZSBpbmNsdWRlIGEgbG9jYXRpb24gdmFsdWUhJztcbiAgfVxufVxuIiwiQGZ1bmN0aW9uIG91dHB1dC1pc29sYXRpb24oJFNwYW4tTWFwKSB7XG4gIC8vIFNldCB1cCBMZWZ0L1JpZ2h0IG1hcHNcbiAgJFJldHVybjogKCk7XG5cbiAgJFNwYW46IG1hcC1nZXQoJFNwYW4tTWFwLCAnc3BhbicpO1xuICAkTG9jYXRpb246IG1hcC1nZXQoJFNwYW4tTWFwLCAnbG9jYXRpb24nKTtcblxuICAkR3JpZDogbWFwLWdldCgkU3Bhbi1NYXAsICdncmlkJyk7XG4gICRHdXR0ZXI6IG1hcC1nZXQoJFNwYW4tTWFwLCAnZ3V0dGVyJyk7XG4gICRTdHlsZTogbWFwLWdldCgkU3Bhbi1NYXAsICdzdHlsZScpO1xuXG4gICRTdGFydC1Sb3c6IG1hcC1nZXQoJFNwYW4tTWFwLCAnc3RhcnQgcm93Jyk7XG4gICRFbmQtUm93OiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2VuZCByb3cnKTtcblxuICAkRml4ZWQtR3V0dGVyOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2ZpeGVkIGd1dHRlcicpO1xuICAkU3BsaXQtR3V0dGVyOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ3NwbGl0IGd1dHRlcicpO1xuICAkR3V0dGVyLVByb3BlcnR5OiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2d1dHRlciBwcm9wZXJ0eScpO1xuXG4gICREaXJlY3Rpb246IG1hcC1nZXQoJFNwYW4tTWFwLCAnZGlyZWN0aW9uJyk7XG4gICRPcHRpb25zOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ29wdGlvbnMnKTtcblxuICAkV2lkdGg6IGNvbHVtbi1zcGFuKCRTcGFuLCAkTG9jYXRpb24sICRHcmlkLCAkR3V0dGVyLCAkU3R5bGUpO1xuICAkTWFyZ2luLVNwYW46IGNvbHVtbi1zcGFuKCgkTG9jYXRpb24gLSAxKSwgMSwgJEdyaWQsICRHdXR0ZXIsICRTdHlsZSk7XG4gICRHdXR0ZXItU3BhbjogZ3V0dGVyLXNwYW4oJEd1dHRlciwgJEdyaWQpO1xuXG4gIC8vIEJhY2t3YXJkcyBDb21wYXRpYmlsaXR5IGZvciBPcHRpb25zXG4gIEBpZiB0eXBlLW9mKCRPcHRpb25zKSAhPSAnbWFwJyBhbmQgJE9wdGlvbnMgIT0gbnVsbCB7XG4gICAgJE9wdGlvbnM6ICgnY2xlYXInOiB1bnF1b3RlKG50aCgkT3B0aW9ucywgMSkpKTtcbiAgfVxuXG4gICREaXI6ICREaXJlY3Rpb247XG4gICRPcHA6IG9wcG9zaXRlLWRpcmVjdGlvbigkRGlyKTtcblxuICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCd3aWR0aCc6ICRXaWR0aCkpO1xuXG4gIEBpZiAoJEVuZC1Sb3cpIHtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdmbG9hdCc6ICRPcHApKTtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdtYXJnaW4tI3skRGlyfSc6IDApKTtcblxuICAgIEBpZiAkU3BsaXQtR3V0dGVyIGFuZCBub3QgJEZpeGVkLUd1dHRlciB7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JE9wcH0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJ21hcmdpbi0jeyRPcHB9JzogMCkpO1xuICAgIH1cbiAgfVxuICBAZWxzZSB7XG4gICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnZmxvYXQnOiAkRGlyKSk7XG4gICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JE9wcH0nOiAtMTAwJSkpO1xuXG4gICAgQGlmICRTdGFydC1Sb3cge1xuICAgICAgQGlmICRTcGxpdC1HdXR0ZXIgYW5kIG5vdCAkRml4ZWQtR3V0dGVyIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JERpcn0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgICB9XG4gICAgICBAZWxzZSBpZiBub3QgJEZpeGVkLUd1dHRlciB7XG4gICAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJ21hcmdpbi0jeyREaXJ9JzogMCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAaWYgJFNwbGl0LUd1dHRlciBhbmQgbm90ICRGaXhlZC1HdXR0ZXIge1xuICAgICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdtYXJnaW4tI3skRGlyfSc6ICRNYXJnaW4tU3BhbiArICRHdXR0ZXItU3BhbiArICRHdXR0ZXItU3BhbiAvIDIpKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIGlmIG5vdCAkRml4ZWQtR3V0dGVyIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JERpcn0nOiAkTWFyZ2luLVNwYW4gKyAkR3V0dGVyLVNwYW4pKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JERpcn0nOiAkTWFyZ2luLVNwYW4pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gSWYgb3B0aW9ucyBhcmUgc2V0LCB3ZSBtZXJnZSB0aGVtIGluIVxuICBAaWYgKCRPcHRpb25zKSB7XG4gICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICRPcHRpb25zKTtcbiAgfVxuXG4gIC8vIElmIENMZWFyIGlzbid0IGFscmVhZHkgYXZhaWxhYmxlLCBzZXQgaXQhXG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJFJldHVybiwgJ2NsZWFyJykge1xuICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJ2NsZWFyJzogbm9uZSkpO1xuICB9XG5cbiAgLy8gTGVmdCBGaXhlZCBHdXR0ZXJzXG4gIEBpZiAkRml4ZWQtR3V0dGVyIHtcbiAgICBAaWYgaW5kZXgoJFN0eWxlLCAnc3BsaXQnKSB7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JERpcn0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JE9wcH0nOiAkR3V0dGVyLVNwYW4gLyAyKSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIEBpZiBub3QgJEVuZC1Sb3cge1xuICAgICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCcjeyRHdXR0ZXItUHJvcGVydHl9LSN7JE9wcH0nOiAkR3V0dGVyLVNwYW4pKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnI3skR3V0dGVyLVByb3BlcnR5fS0jeyRPcHB9JzogMCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJFJldHVybjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIYXBweSBTeW50YXggZm9yIElzb2xhdGlvblxuLy9cbi8vIE1ha2VzIHdvcmtpbmcgd2l0aCBJc29sYXRpb24gZWFzaWVyLCBhcyBpdCBtb3ZlcyBDbGVhciB0byBhIDFzdCBjbGFzcyBjaXRpemVuIG9mIHRoZSBtaXhpbiwgYW5kIGF1dG9tYXRpY2FsbHkgYnVpbGRzIHRoZSB2ZXJib3NlIGdyaWQtc3BhbiBtaXhpbiBjYWxsXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBtaXhpbiBpc29sYXRpb24tc3BhbigkU3BhbiwgJExvY2F0aW9uLCAkY2xlYXI6IGZhbHNlLCAkZ3JpZDogZmFsc2UsICRndXR0ZXI6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSwgJGZyb206IGZhbHNlKSB7XG4gICRPcHRpb25zOiAoKTtcbiAgQGlmICRjbGVhciB7XG4gICAgJE9wdGlvbnM6IG1hcC1tZXJnZSgkT3B0aW9ucywgKCdjbGVhcic6IHVucXVvdGUoJGNsZWFyKSkpO1xuICB9XG4gIEBpZiAkZnJvbSB7XG4gICAgJE9wdGlvbnM6IG1hcC1tZXJnZSgkT3B0aW9ucywgKCdmcm9tJzogJGZyb20pKTtcbiAgfVxuXG4gICRPcHRpb25zOiBpZihsZW5ndGgoJE9wdGlvbnMpID4gMCwgJE9wdGlvbnMsIG51bGwpO1xuICBAaW5jbHVkZSBncmlkLXNwYW4oJFNwYW4sICRMb2NhdGlvbiwgJGdyaWQsICRndXR0ZXIsICdpc29sYXRpb24nLCAkZ3V0dGVyLXN0eWxlLCAkT3B0aW9ucyk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSGFwcHkgU3ludGF4IG9mIEFzeW1tZXRyaWMgR3JpZHNcbi8vXG4vLyBNYWtlcyB3b3JraW5nIHdpdGggYXN5bW1ldHJpYyBncmlkcyBlYXNpZXIhXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBtaXhpbiBhc3ltbWV0cmljLXNwYW4oJExvY2F0aW9uLCAkU3BhbjogZmFsc2UsICRncmlkOiBmYWxzZSwgJGd1dHRlcjogZmFsc2UsICRndXR0ZXItc3R5bGU6IGZhbHNlLCAkZnJvbTogZmFsc2UsICRvdXRwdXQtc3R5bGU6IGZhbHNlKSB7XG5cbiAgJFNwYW46IGlmKCRTcGFuICE9IGZhbHNlLCAkU3BhbiwgMSk7XG4gICRvdXRwdXQtc3R5bGU6IGlmKCRvdXRwdXQtc3R5bGUgIT0gZmFsc2UsICRvdXRwdXQtc3R5bGUsIHNncy1nZXQoJ2FzeW1tZXRyaWMgb3V0cHV0JykpO1xuXG4gICRPcHRpb25zOiAoKTtcbiAgQGlmICRmcm9tIHtcbiAgICAkT3B0aW9uczogbWFwLW1lcmdlKCRPcHRpb25zLCAoJ2Zyb20nOiAkZnJvbSkpO1xuICB9XG4gICRPcHRpb25zOiBpZihsZW5ndGgoJE9wdGlvbnMpID4gMCwgJE9wdGlvbnMsIG51bGwpO1xuXG4gIEBpbmNsdWRlIGdyaWQtc3BhbigkU3BhbiwgJExvY2F0aW9uLCAkZ3JpZCwgJGd1dHRlciwgJG91dHB1dC1zdHlsZSwgJGd1dHRlci1zdHlsZSwgJE9wdGlvbnMpO1xufSIsIkBmdW5jdGlvbiBvdXRwdXQtY2FsYygkU3Bhbi1NYXApIHtcbiAgLy8gU2V0IHVwIExlZnQvUmlnaHQgbWFwc1xuICAkUmV0dXJuOiAoKTtcblxuICAkU3BhbjogbWFwLWdldCgkU3Bhbi1NYXAsICdzcGFuJyk7XG4gICRMb2NhdGlvbjogbWFwLWdldCgkU3Bhbi1NYXAsICdsb2NhdGlvbicpO1xuXG4gICRHcmlkOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2dyaWQnKTtcbiAgJEd1dHRlcjogbWFwLWdldCgkU3Bhbi1NYXAsICdndXR0ZXInKTtcbiAgJFN0eWxlOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ3N0eWxlJyk7XG5cbiAgQGlmIHVuaXRsZXNzKCRHdXR0ZXIpIHtcbiAgICAkRVJST1ItTUVTU0FHRTogXCJDYWxjIG91dHB1dCBzdHlsZSB1c2VzIGZpeGVkIGd1dHRlcnMgKGd1dHRlcnMgd2l0aCB1bml0cykuIFBsZWFzZSBkZWZpbmUgZml4ZWQgZ3V0dGVycyB0byB1c2UgY2FsY1wiO1xuICAgIEBpZiBmZWF0dXJlLWV4aXN0cyhhdC1lcnJvcikge1xuICAgICAgQGVycm9yICRFUlJPUi1NRVNTQUdFO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAd2FybiAkRVJST1ItTUVTU0FHRTtcbiAgICB9XG4gICAgQHJldHVybiAkUmV0dXJuO1xuICB9XG5cbiAgQGlmIHR5cGUtb2YoJEdyaWQpID09ICdudW1iZXInIHtcbiAgICAkRVJST1ItTUVTU0FHRTogXCJDYWxjIG91dHB1dCBzdHlsZSBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIHdpdGggYXN5bW1ldHJpYyBncmlkcywgZXNwZWNpYWxseSB3aXRoIGEgbWl4IG9mIGZpeGVkIGFuZCBmbHVpZCBjb2x1bW5zLiBQbGVhc2UgZGVmaW5lIGFuIGFzeW1tZXRyaWMgZ3JpZCBvciB1c2UgYW5vdGhlciBvdXRwdXQgc3R5bGUuXCI7XG4gICAgQGlmIGZlYXR1cmUtZXhpc3RzKGF0LWVycm9yKSB7XG4gICAgICBAZXJyb3IgJEVSUk9SLU1FU1NBR0U7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIEB3YXJuICRFUlJPUi1NRVNTQUdFO1xuICAgIH1cbiAgICBAcmV0dXJuICRSZXR1cm47XG4gIH1cblxuICAkU3RhcnQtUm93OiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ3N0YXJ0IHJvdycpO1xuICAkRW5kLVJvdzogbWFwLWdldCgkU3Bhbi1NYXAsICdlbmQgcm93Jyk7XG5cbiAgJFNwbGl0LUd1dHRlcjogbWFwLWdldCgkU3Bhbi1NYXAsICdzcGxpdCBndXR0ZXInKTtcblxuICAkRGlyZWN0aW9uOiBtYXAtZ2V0KCRTcGFuLU1hcCwgJ2RpcmVjdGlvbicpO1xuICAkT3B0aW9uczogbWFwLWdldCgkU3Bhbi1NYXAsICdvcHRpb25zJyk7XG5cbiAgJERpcjogJERpcmVjdGlvbjtcbiAgJE9wcDogb3Bwb3NpdGUtZGlyZWN0aW9uKCREaXIpO1xuXG4gICRXaWR0aDogJyc7XG4gICRNYXJnaW46IG51bGw7XG4gICRNaW4tV2lkdGg6ICcoJztcblxuICAkRml4ZWQ6ICgpO1xuICAkRmx1aWQ6ICgpO1xuICAkRml4ZWQtVG90YWxzOiAoJ3B4JzogMCwgJ2VtJzogMCwgJyUnOiAwKTtcbiAgJEd1dHRlci1Ub3RhbHM6IGlmKHN0ci1pbmRleCgkU3R5bGUsICdzcGxpdCcpLCAkR3V0dGVyICogbGVuZ3RoKCRHcmlkKSwgJEd1dHRlciAqIChsZW5ndGgoJEdyaWQpIC0gMSkpO1xuICAkRmx1aWQtVG90YWxzOiAwO1xuICAkRmx1aWQtRml4ZWQtU3VtOiAnJztcbiAgJFNpbmdsZS1GbHVpZDogJyc7XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJEdyaWQpIHtcbiAgICAkSXRlbTogbnRoKCRHcmlkLCAkaSk7XG4gICAgQGlmIG5vdCB1bml0bGVzcygkSXRlbSkge1xuICAgICAgJEZpeGVkOiBtYXAtbWVyZ2UoJEZpeGVkLCAoJGk6ICRJdGVtKSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRGbHVpZDogbWFwLW1lcmdlKCRGbHVpZCwgKCRpOiAkSXRlbSkpO1xuICAgIH1cbiAgfVxuXG4gIEBlYWNoICRrLCAkdiBpbiAkRml4ZWQge1xuICAgICRVbml0OiB1bml0KCR2KTtcbiAgICAkUnVubmluZzogbWFwLWdldCgkRml4ZWQtVG90YWxzLCAkVW5pdCkgKyAkdjtcbiAgICAkRml4ZWQtVG90YWxzOiBtYXAtbWVyZ2UoJEZpeGVkLVRvdGFscywgKCRVbml0OiAkUnVubmluZykpO1xuICB9XG5cbiAgQGVhY2ggJGssICR2IGluICRGbHVpZCB7XG4gICAgJEZsdWlkLVRvdGFsczogJEZsdWlkLVRvdGFscyArICR2O1xuICB9XG5cbiAgQGVhY2ggJGssICR2IGluICRGaXhlZC1Ub3RhbHMge1xuXG4gICAgQGlmICR2ICE9IDAge1xuICAgICAgJEZsdWlkLUZpeGVkLVN1bTogJyN7JEZsdWlkLUZpeGVkLVN1bX0jeyR2fSArICc7XG4gICAgfVxuICB9XG5cbiAgLy8gV2lkdGggb2YgYSBzaW5nbGUgZmx1aWQgaXRlbSwgZm9yIGNhbGMoKVxuICAkU2luZ2xlLUZsdWlkOiAnKCgxMDAlIC0gKCN7JEZsdWlkLUZpeGVkLVN1bX0jeyRHdXR0ZXItVG90YWxzfSkpIC8gKCN7JEZsdWlkLVRvdGFsc30pKSc7XG5cbiAgLy8gTWFyZ2luIENhbGN1bGF0aW9uXG4gIEBpZiBub3QgJFN0YXJ0LVJvdyBvciBub3QgJEVuZC1Sb3cge1xuICAgIEBpZiAkU3BsaXQtR3V0dGVyIHtcbiAgICAgICRNYXJnaW46ICcjeyRHdXR0ZXIgLyAyfSArICc7XG4gICAgfVxuXG4gICAgQGZvciAkaSBmcm9tIDEgdG8gJExvY2F0aW9uIHtcbiAgICAgIEBpZiB1bml0bGVzcyhudGgoJEdyaWQsICRpKSkge1xuICAgICAgICAkTWFyZ2luOiAnI3skTWFyZ2lufSgjeyRTaW5nbGUtRmx1aWR9ICogI3tudGgoJEdyaWQsICRpKX0gKyAjeyRHdXR0ZXJ9KSArICc7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgICRNYXJnaW46ICcjeyRNYXJnaW59KCN7bnRoKCRHcmlkLCAkaSl9ICsgI3skR3V0dGVyfSkgKyAnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBAaWYgJE1hcmdpbiAhPSBudWxsIHtcbiAgICAkTWFyZ2luOiBzdHItc2xpY2UoJE1hcmdpbiwgMCwgLTQpO1xuICB9XG5cblxuICAvLyBXaWR0aCBDYWxjdWxhdGlvblxuICBAaWYgJFNwYW4gPT0gMSB7XG4gICAgQGlmIG1hcC1oYXMta2V5KCRGaXhlZCwgJExvY2F0aW9uKSB7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCd3aWR0aCc6IG1hcC1nZXQoJEZpeGVkLCAkTG9jYXRpb24pKSk7XG4gICAgfVxuICAgIEBlbHNlIGlmIG1hcC1oYXMta2V5KCRGbHVpZCwgJExvY2F0aW9uKSB7XG4gICAgICAkTWF0aDogJygjeyRTaW5nbGUtRmx1aWR9KSAqICN7bnRoKCRHcmlkLCAkTG9jYXRpb24pfSc7XG4gICAgICAkU3Bhbi1NYXA6ICgnd2lkdGgnOiAoJ3dlYmtpdCc6IC13ZWJraXQtY2FsYygje3VucXVvdGUoJE1hdGgpfSksICdzdGFuZGFyZCc6IGNhbGMoI3t1bnF1b3RlKCRNYXRoKX0pKSk7XG4gICAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgJFNwYW4tTWFwKTtcbiAgICB9XG4gIH1cbiAgQGVsc2Uge1xuICAgICRMb2NhdGlvbi1FbmQ6ICRMb2NhdGlvbiArICgkU3BhbiAtIDEpO1xuICAgICRGaXhlZC1Db3VudGVyOiAwO1xuICAgIEBmb3IgJGkgZnJvbSAkTG9jYXRpb24gdGhyb3VnaCAkTG9jYXRpb24tRW5kIHtcbiAgICAgIEBpZiB1bml0bGVzcyhudGgoJEdyaWQsICRpKSkge1xuICAgICAgICAkV2lkdGg6ICcjeyRXaWR0aH0oI3skU2luZ2xlLUZsdWlkfSAqICN7bnRoKCRHcmlkLCAkaSl9JztcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJEZpeGVkLUNvdW50ZXI6ICRGaXhlZC1Db3VudGVyICsgMTtcbiAgICAgICAgJE1pbi1XaWR0aDogJyN7JE1pbi1XaWR0aH0je250aCgkR3JpZCwgJGkpfSArICN7JEd1dHRlcn0gKyAnO1xuICAgICAgICAkV2lkdGg6ICcjeyRXaWR0aH0oI3tudGgoJEdyaWQsICRpKX0nO1xuICAgICAgfVxuXG5cbiAgICAgIEBpZiAkaSAhPSAkTG9jYXRpb24tRW5kIHtcbiAgICAgICAgJFdpZHRoOiAnI3skV2lkdGh9ICsgI3skR3V0dGVyfSkgKyAnO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICAkTWluLVdpZHRoOiBzdHItc2xpY2UoJE1pbi1XaWR0aCwgMCwgLTQpO1xuICAgICAgICBAaWYgJEZpeGVkLUNvdW50ZXIgPT0gMSB7XG4gICAgICAgICAgJE1pbi1XaWR0aDogJyN7JE1pbi1XaWR0aH0gLSAjeyRHdXR0ZXJ9JztcbiAgICAgICAgfVxuICAgICAgICAkTWluLVdpZHRoOiAnI3skTWluLVdpZHRofSknO1xuICAgICAgICAkV2lkdGg6ICcjeyRXaWR0aH0pJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaW4gd2lkdGggaGFuZGxpbmdcbiAgICBAaWYgJE1pbi1XaWR0aCAhPSAnKScge1xuICAgICAgJE1pbi1NYXA6ICgnbWluLXdpZHRoJzogKCd3ZWJraXQnIDogLXdlYmtpdC1jYWxjKCN7dW5xdW90ZSgkTWluLVdpZHRoKX0pLCAnc3RhbmRhcmQnOiBjYWxjKCN7dW5xdW90ZSgkTWluLVdpZHRoKX0pICkpO1xuXG4gICAgICBAaWYgc2dzLWdldCgnY2FsYyBpbmNsdWRlIG1pbi13aWR0aCcpIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICRNaW4tTWFwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkU3Bhbi1NYXA6ICgnd2lkdGgnOiAoJ3dlYmtpdCc6IC13ZWJraXQtY2FsYygje3VucXVvdGUoJFdpZHRoKX0pLCAnc3RhbmRhcmQnOiBjYWxjKCN7dW5xdW90ZSgkV2lkdGgpfSkgKSApO1xuICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAkU3Bhbi1NYXApO1xuICB9XG5cbiAgLy8gQnVpbGQgbWFyZ2lucyBhbmQgRmxvYXRzXG4gIEBpZiAoJEVuZC1Sb3cpIHtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdmbG9hdCc6ICRPcHApKTtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdtYXJnaW4tI3skRGlyfSc6IDApKTtcblxuICAgIEBpZiAkU3BsaXQtR3V0dGVyIHtcbiAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJ21hcmdpbi0jeyRPcHB9JzogJEd1dHRlciAvIDIpKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JE9wcH0nOiAwKSk7XG4gICAgfVxuICB9XG4gIEBlbHNlIHtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdmbG9hdCc6ICREaXIpKTtcbiAgICAkUmV0dXJuOiBtYXAtbWVyZ2UoJFJldHVybiwgKCdtYXJnaW4tI3skT3BwfSc6IC0xMDAlKSk7XG5cbiAgICBAaWYgJFN0YXJ0LVJvdyB7XG4gICAgICBAaWYgJFNwbGl0LUd1dHRlciB7XG4gICAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAoJ21hcmdpbi0jeyREaXJ9JzogJEd1dHRlciAvIDIpKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJFJldHVybjogbWFwLW1lcmdlKCRSZXR1cm4sICgnbWFyZ2luLSN7JERpcn0nOiAwKSk7XG4gICAgICB9XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRNYXJnaW4tTWFwOiAoJ21hcmdpbi0jeyREaXJ9JzogKCd3ZWJraXQnOiAtd2Via2l0LWNhbGMoI3t1bnF1b3RlKCRNYXJnaW4pfSksICdzdGFuZGFyZCc6IGNhbGMoI3t1bnF1b3RlKCRNYXJnaW4pfSkpKTtcbiAgICAgICRSZXR1cm46IG1hcC1tZXJnZSgkUmV0dXJuLCAkTWFyZ2luLU1hcCk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkUmV0dXJuO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIYXBweSBTeW50YXggZm9yIENhbGNcbi8vXG4vLyBNYWtlcyB3b3JraW5nIHdpdGggQ2FsYyBlYXNpZXIsIGFzIGl0IG1vdmVzIENsZWFyIHRvIGEgMXN0IGNsYXNzIGNpdGl6ZW4gb2YgdGhlIG1peGluLCBhbmQgYXV0b21hdGljYWxseSBidWlsZHMgdGhlIHZlcmJvc2UgZ3JpZC1zcGFuIG1peGluIGNhbGxcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQG1peGluIGNhbGMtc3BhbigkU3BhbiwgJExvY2F0aW9uLCAkY2xlYXI6IGZhbHNlLCAkZ3JpZDogZmFsc2UsICRndXR0ZXI6IGZhbHNlLCAkZ3V0dGVyLXN0eWxlOiBmYWxzZSwgJGZyb206IGZhbHNlKSB7XG5cbiAgQGlmICRndXR0ZXIgIT0gZmFsc2UgYW5kIHVuaXRsZXNzKCRndXR0ZXIpIHtcbiAgICBAd2FybiBcIkNhbGMgb3V0cHV0IHN0eWxlIHVzZXMgZml4ZWQgZ3V0dGVycyAoZ3V0dGVycyB3aXRoIHVuaXRzKS4gUGxlYXNlIGRlZmluZSBmaXhlZCBndXR0ZXJzIHRvIHVzZSBjYWxjXCI7XG4gIH1cblxuICBAaWYgJGdyaWQgIT0gZmFsc2UgYW5kIHR5cGUtb2YoJGdyaWQpID09ICdudW1iZXInIHtcbiAgICBAd2FybiBcIkNhbGMgb3V0cHV0IHN0eWxlIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCBhc3ltbWV0cmljIGdyaWRzLCBlc3BlY2lhbGx5IHdpdGggYSBtaXggb2YgZml4ZWQgYW5kIGZsdWlkIGNvbHVtbnMuIFBsZWFzZSBkZWZpbmUgYW4gYXN5bW1ldHJpYyBncmlkLlwiO1xuICB9XG5cbiAgJE9wdGlvbnM6ICgpO1xuICBAaWYgJGNsZWFyIHtcbiAgICAkT3B0aW9uczogbWFwLW1lcmdlKCRPcHRpb25zLCAoJ2NsZWFyJzogJGNsZWFyKSk7XG4gIH1cbiAgQGlmICRmcm9tIHtcbiAgICAkT3B0aW9uczogbWFwLW1lcmdlKCRPcHRpb25zLCAoJ2Zyb20nOiAkZnJvbSkpO1xuICB9XG5cbiAgJE9wdGlvbnM6IGlmKGxlbmd0aCgkT3B0aW9ucykgPiAwLCAkT3B0aW9ucywgbnVsbCk7XG4gIEBpbmNsdWRlIGdyaWQtc3BhbigkU3BhbiwgJExvY2F0aW9uLCAkZ3JpZCwgJGd1dHRlciwgJ2NhbGMnLCAkZ3V0dGVyLXN0eWxlLCAkT3B0aW9ucyk7XG59XG4iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERlZmF1bHQgVmFyaWFibGVzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiRCcmVha3BvaW50LVNldHRpbmdzOiAoXG4gICdkZWZhdWx0IG1lZGlhJzogYWxsLFxuICAnZGVmYXVsdCBmZWF0dXJlJzogbWluLXdpZHRoLFxuICAnZGVmYXVsdCBwYWlyJzogd2lkdGgsXG5cbiAgJ2ZvcmNlIGFsbCBtZWRpYSB0eXBlJzogZmFsc2UsXG4gICd0byBlbXMnOiBmYWxzZSxcbiAgJ3RyYW5zZm9ybSByZXNvbHV0aW9ucyc6IHRydWUsXG5cbiAgJ25vIHF1ZXJpZXMnOiBmYWxzZSxcbiAgJ25vIHF1ZXJ5IGZhbGxiYWNrcyc6IGZhbHNlLFxuXG4gICdiYXNlIGZvbnQgc2l6ZSc6IDE2cHgsXG5cbiAgJ2xlZ2FjeSBzeW50YXgnOiBmYWxzZVxuKTtcblxuJGJyZWFrcG9pbnQ6ICgpICFkZWZhdWx0O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEltcG9ydHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcImJyZWFrcG9pbnQvc2V0dGluZ3NcIjtcbkBpbXBvcnQgJ2JyZWFrcG9pbnQvY29udGV4dCc7XG5AaW1wb3J0ICdicmVha3BvaW50L2hlbHBlcnMnO1xuQGltcG9ydCAnYnJlYWtwb2ludC9wYXJzZXJzJztcbkBpbXBvcnQgJ2JyZWFrcG9pbnQvbm8tcXVlcnknO1xuXG5AaW1wb3J0ICdicmVha3BvaW50L3Jlc3BvbmQtdG8nO1xuXG5AaW1wb3J0IFwiYnJlYWtwb2ludC9sZWdhY3ktc2V0dGluZ3NcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBCcmVha3BvaW50IE1peGluXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuQG1peGluIGJyZWFrcG9pbnQoJHF1ZXJ5LCAkbm8tcXVlcnk6IGZhbHNlKSB7XG4gIEBpbmNsdWRlIGxlZ2FjeS1zZXR0aW5ncy13YXJuaW5nO1xuXG4gIC8vIFJlc2V0IGNvbnRleHRzXG4gIEBpbmNsdWRlIHByaXZhdGUtYnJlYWtwb2ludC1yZXNldC1jb250ZXh0cygpO1xuXG4gICRicmVha3BvaW50OiBicmVha3BvaW50KCRxdWVyeSwgZmFsc2UpO1xuXG4gICRxdWVyeS1zdHJpbmc6IG1hcC1nZXQoJGJyZWFrcG9pbnQsICdxdWVyeScpO1xuICAkcXVlcnktZmFsbGJhY2s6IG1hcC1nZXQoJGJyZWFrcG9pbnQsICdmYWxsYmFjaycpO1xuXG4gICRwcml2YXRlLWJyZWFrcG9pbnQtY29udGV4dC1ob2xkZXI6IG1hcC1nZXQoJGJyZWFrcG9pbnQsICdjb250ZXh0IGhvbGRlcicpICFnbG9iYWw7XG4gICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQ6IG1hcC1nZXQoJGJyZWFrcG9pbnQsICdxdWVyeSBjb3VudCcpICFnbG9iYWw7XG5cbiAgLy8gQWxsb3cgZm9yIGFuIGFzLW5lZWRlZCBvdmVycmlkZSBvciB1c2FnZSBvZiBubyBxdWVyeSBmYWxsYmFjay5cbiAgQGlmICRuby1xdWVyeSAhPSBmYWxzZSB7XG4gICAgJHF1ZXJ5LWZhbGxiYWNrOiAkbm8tcXVlcnk7XG4gIH1cblxuICBAaWYgJHF1ZXJ5LWZhbGxiYWNrICE9IGZhbHNlIHtcbiAgICAkY29udGV4dC1zZXR0ZXI6IHByaXZhdGUtYnJlYWtwb2ludC1zZXQtY29udGV4dCgnbm8tcXVlcnknLCAkcXVlcnktZmFsbGJhY2spO1xuICB9XG5cbiAgLy8gUHJpbnQgT3V0IFF1ZXJ5IFN0cmluZ1xuICBAaWYgbm90IGJyZWFrcG9pbnQtZ2V0KCdubyBxdWVyaWVzJykge1xuICAgIEBtZWRpYSAjeyRxdWVyeS1zdHJpbmd9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIEBpZiBicmVha3BvaW50LWdldCgnbm8gcXVlcnkgZmFsbGJhY2tzJykgIT0gZmFsc2Ugb3IgYnJlYWtwb2ludC1nZXQoJ25vIHF1ZXJpZXMnKSA9PSB0cnVlIHtcblxuICAgICR0eXBlOiB0eXBlLW9mKGJyZWFrcG9pbnQtZ2V0KCdubyBxdWVyeSBmYWxsYmFja3MnKSk7XG4gICAgJHByaW50OiBmYWxzZTtcblxuICAgIEBpZiAoJHR5cGUgPT0gJ2Jvb2wnKSB7XG4gICAgICAkcHJpbnQ6IHRydWU7XG4gICAgfVxuICAgIEBlbHNlIGlmICgkdHlwZSA9PSAnc3RyaW5nJykge1xuICAgICAgQGlmICRxdWVyeS1mYWxsYmFjayA9PSBicmVha3BvaW50LWdldCgnbm8gcXVlcnkgZmFsbGJhY2tzJykge1xuICAgICAgICAkcHJpbnQ6IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIEBlbHNlIGlmICgkdHlwZSA9PSAnbGlzdCcpIHtcbiAgICAgIEBlYWNoICR3cmFwcGVyIGluIGJyZWFrcG9pbnQtZ2V0KCdubyBxdWVyeSBmYWxsYmFja3MnKSB7XG4gICAgICAgIEBpZiAkcXVlcnktZmFsbGJhY2sgPT0gJHdyYXBwZXIge1xuICAgICAgICAgICRwcmludDogdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdyaXRlIEZhbGxiYWNrXG4gICAgQGlmICgkcXVlcnktZmFsbGJhY2sgIT0gZmFsc2UpIGFuZCAoJHByaW50ID09IHRydWUpIHtcbiAgICAgICR0eXBlLWZhbGxiYWNrOiB0eXBlLW9mKCRxdWVyeS1mYWxsYmFjayk7XG5cbiAgICAgIEBpZiAoJHR5cGUtZmFsbGJhY2sgIT0gJ2Jvb2wnKSB7XG4gICAgICAgICN7JHF1ZXJ5LWZhbGxiYWNrfSAmIHtcbiAgICAgICAgICBAY29udGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaW5jbHVkZSBwcml2YXRlLWJyZWFrcG9pbnQtcmVzZXQtY29udGV4dHMoKTtcbn1cblxuXG5AbWl4aW4gbXEoJHF1ZXJ5LCAkbm8tcXVlcnk6IGZhbHNlKSB7XG4gIEBpbmNsdWRlIGJyZWFrcG9pbnQoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIYXMgU2V0dGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1oYXMoJHNldHRpbmcpIHtcbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50LCAkc2V0dGluZykge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdldCBTZXR0aW5nc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1nZXQoJHNldHRpbmcpIHtcbiAgQGlmIGJyZWFrcG9pbnQtaGFzKCRzZXR0aW5nKSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRicmVha3BvaW50LCAkc2V0dGluZyk7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gbWFwLWdldCgkQnJlYWtwb2ludC1TZXR0aW5ncywgJHNldHRpbmcpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gU2V0IFNldHRpbmdzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBicmVha3BvaW50LXNldCgkc2V0dGluZywgJHZhbHVlKSB7XG4gIEBpZiAoc3RyLWluZGV4KCRzZXR0aW5nLCAnLScpIG9yIHN0ci1pbmRleCgkc2V0dGluZywgJ18nKSkgYW5kIHN0ci1pbmRleCgkc2V0dGluZywgJyAnKSA9PSBudWxsIHtcbiAgICBAd2FybiBcIldvcmRzIGluIEJyZWFrcG9pbnQgc2V0dGluZ3Mgc2hvdWxkIGJlIHNlcGFyYXRlZCBieSBzcGFjZXMsIG5vdCBkYXNoZXMgb3IgdW5kZXJzY29yZXMuIFBsZWFzZSByZXBsYWNlIGRhc2hlcyBhbmQgdW5kZXJzY29yZXMgYmV0d2VlbiB3b3JkcyB3aXRoIHNwYWNlcy4gU2V0dGluZ3Mgd2lsbCBub3Qgd29yayBhcyBleHBlY3RlZCB1bnRpbCBjaGFuZ2VkLlwiO1xuICB9XG4gICRicmVha3BvaW50OiBtYXAtbWVyZ2UoJGJyZWFrcG9pbnQsICgkc2V0dGluZzogJHZhbHVlKSkgIWdsb2JhbDtcbiAgQHJldHVybiB0cnVlO1xufVxuXG5AbWl4aW4gYnJlYWtwb2ludC1jaGFuZ2UoJHNldHRpbmcsICR2YWx1ZSkge1xuICAkYnJlYWtwb2ludC1jaGFuZ2U6IGJyZWFrcG9pbnQtc2V0KCRzZXR0aW5nLCAkdmFsdWUpO1xufVxuXG5AbWl4aW4gYnJlYWtwb2ludC1zZXQoJHNldHRpbmcsICR2YWx1ZSkge1xuICBAaW5jbHVkZSBicmVha3BvaW50LWNoYW5nZSgkc2V0dGluZywgJHZhbHVlKTtcbn1cblxuQG1peGluIGJrcHQtY2hhbmdlKCRzZXR0aW5nLCAkdmFsdWUpIHtcbiAgQGluY2x1ZGUgYnJlYWtwb2ludC1jaGFuZ2UoJHNldHRpbmcsICR2YWx1ZSk7XG59XG5AbWl4aW4gYmtwdC1zZXQoJHNldHRpbmcsICR2YWx1ZSkge1xuICBAaW5jbHVkZSBicmVha3BvaW50LWNoYW5nZSgkc2V0dGluZywgJHZhbHVlKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBSZW1vdmUgU2V0dGluZ1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1yZXNldCgkc2V0dGluZ3MuLi4pIHtcbiAgQGlmIGxlbmd0aCgkc2V0dGluZ3MpID09IDEge1xuICAgICRzZXR0aW5nczogbnRoKCRzZXR0aW5ncywgMSk7XG4gIH1cblxuICBAZWFjaCAkc2V0dGluZyBpbiAkc2V0dGluZ3Mge1xuICAgICRicmVha3BvaW50OiBtYXAtcmVtb3ZlKCRicmVha3BvaW50LCAkc2V0dGluZykgIWdsb2JhbDtcbiAgfVxuICBAcmV0dXJuIHRydWU7XG59XG5cbkBtaXhpbiBicmVha3BvaW50LXJlc2V0KCRzZXR0aW5ncy4uLikge1xuICAkYnJlYWtwb2ludC1yZXNldDogYnJlYWtwb2ludC1yZXNldCgkc2V0dGluZ3MpO1xufVxuXG5AbWl4aW4gYmtwdC1yZXNldCgkc2V0dGluZ3MuLi4pIHtcbiAgJGJyZWFrcG9pbnQtcmVzZXQ6IGJyZWFrcG9pbnQtcmVzZXQoJHNldHRpbmdzKTtcbn0iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFByaXZhdGUgQnJlYWtwb2ludCBWYXJpYWJsZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlcjogKCk7XG4kcHJpdmF0ZS1icmVha3BvaW50LXF1ZXJ5LWNvdW50OiAwICFkZWZhdWx0O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEJyZWFrcG9pbnQgSGFzIENvbnRleHRcbi8vIFJldHVybnMgd2hldGhlciBvciBub3QgeW91IGFyZSBpbnNpZGUgYSBCcmVha3BvaW50IHF1ZXJ5XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBicmVha3BvaW50LWhhcy1jb250ZXh0KCkge1xuICBAaWYgbGVuZ3RoKCRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQpIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBCcmVha3BvaW50IEdldCBDb250ZXh0XG4vLyAkZmVhdHVyZTogSW5wdXQgZmVhdHVyZSB0byBnZXQgaXQncyBjdXJyZW50IE1RIGNvbnRleHQuIFJldHVybnMgZmFsc2UgaWYgbm8gY29udGV4dFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1nZXQtY29udGV4dCgkZmVhdHVyZSkge1xuICBAaWYgbWFwLWhhcy1rZXkoJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlciwgJGZlYXR1cmUpIHtcbiAgICAkZ2V0OiBtYXAtZ2V0KCRwcml2YXRlLWJyZWFrcG9pbnQtY29udGV4dC1ob2xkZXIsICRmZWF0dXJlKTtcbiAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIG9mIG5vLXF1ZXJ5IGZyb20gZ2V0IHNpZGUgc28gL2ZhbHNlLyBwcmVwZW5kcyBhcmVuJ3QgcmV0dXJuZWRcbiAgICBAaWYgJGZlYXR1cmUgPT0gJ25vLXF1ZXJ5JyB7XG4gICAgICBAaWYgdHlwZS1vZigkZ2V0KSA9PSAnbGlzdCcgYW5kIGxlbmd0aCgkZ2V0KSA+IDEgYW5kIG50aCgkZ2V0LCAxKSA9PSBmYWxzZSB7XG4gICAgICAgICRnZXQ6IG50aCgkZ2V0LCBsZW5ndGgoJGdldCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBAcmV0dXJuICRnZXQ7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEBpZiBicmVha3BvaW50LWhhcy1jb250ZXh0KCkgYW5kICRmZWF0dXJlID09ICdtZWRpYScge1xuICAgICAgQHJldHVybiBicmVha3BvaW50LWdldCgnZGVmYXVsdCBtZWRpYScpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFByaXZhdGUgZnVuY3Rpb24gdG8gc2V0IGNvbnRleHRcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIHByaXZhdGUtYnJlYWtwb2ludC1zZXQtY29udGV4dCgkZmVhdHVyZSwgJHZhbHVlKSB7XG4gIEBpZiAkdmFsdWUgPT0gJ21vbm9jaHJvbWUnIHtcbiAgICAkZmVhdHVyZTogJ21vbm9jaHJvbWUnO1xuICB9XG5cbiAgJGN1cnJlbnQ6IG1hcC1nZXQoJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlciwgJGZlYXR1cmUpO1xuICBAaWYgJGN1cnJlbnQgYW5kIGxlbmd0aCgkY3VycmVudCkgPT0gJHByaXZhdGUtYnJlYWtwb2ludC1xdWVyeS1jb3VudCB7XG4gICAgQHdhcm4gXCJZb3UgaGF2ZSBhbHJlYWR5IHF1ZXJpZWQgYWdhaW5zdCBgI3skZmVhdHVyZX1gLiBVbmV4cGVjdGVkIHRoaW5ncyBtYXkgaGFwcGVuIGlmIHlvdSBxdWVyeSBhZ2FpbnN0IHRoZSBzYW1lIGZlYXR1cmUgbW9yZSB0aGFuIG9uY2UgaW4gdGhlIHNhbWUgYGFuZGAgcXVlcnkuIEJyZWFrcG9pbnQgaXMgb3ZlcndyaXRpbmcgdGhlIGN1cnJlbnQgY29udGV4dCB3aXRoIGAjeyR2YWx1ZX1gXCI7XG4gIH1cblxuICBAaWYgbm90IG1hcC1oYXMta2V5KCRwcml2YXRlLWJyZWFrcG9pbnQtY29udGV4dC1ob2xkZXIsICRmZWF0dXJlKSB7XG4gICAgJHYtaG9sZGVyOiAoKTtcbiAgICBAZm9yICRpIGZyb20gMSB0byAkcHJpdmF0ZS1icmVha3BvaW50LXF1ZXJ5LWNvdW50IHtcbiAgICAgIEBpZiAkZmVhdHVyZSA9PSAnbWVkaWEnIHtcbiAgICAgICAgJHYtaG9sZGVyOiBhcHBlbmQoJHYtaG9sZGVyLCBicmVha3BvaW50LWdldCgnZGVmYXVsdCBtZWRpYScpKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHYtaG9sZGVyOiBhcHBlbmQoJHYtaG9sZGVyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgICR2LWhvbGRlcjogYXBwZW5kKCR2LWhvbGRlciwgJHZhbHVlKTtcbiAgICAkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyOiBtYXAtbWVyZ2UoJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlciwgKCRmZWF0dXJlOiAkdi1ob2xkZXIpKSAhZ2xvYmFsO1xuICB9XG4gIEBlbHNlIHtcbiAgICAkdi1ob2xkZXI6IG1hcC1nZXQoJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlciwgJGZlYXR1cmUpO1xuICAgICRsZW5ndGg6IGxlbmd0aCgkdi1ob2xkZXIpO1xuICAgIEBmb3IgJGkgZnJvbSAkbGVuZ3RoIHRvICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQgLSAxIHtcbiAgICAgIEBpZiAkZmVhdHVyZSA9PSAnbWVkaWEnIHtcbiAgICAgICAgJHYtaG9sZGVyOiBhcHBlbmQoJHYtaG9sZGVyLCBicmVha3BvaW50LWdldCgnZGVmYXVsdCBtZWRpYScpKTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHYtaG9sZGVyOiBhcHBlbmQoJHYtaG9sZGVyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgICR2LWhvbGRlcjogYXBwZW5kKCR2LWhvbGRlciwgJHZhbHVlKTtcbiAgICAkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyOiBtYXAtbWVyZ2UoJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlciwgKCRmZWF0dXJlOiAkdi1ob2xkZXIpKSAhZ2xvYmFsO1xuICB9XG5cbiAgQHJldHVybiB0cnVlO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFByaXZhdGUgZnVuY3Rpb24gdG8gcmVzZXQgY29udGV4dFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AbWl4aW4gcHJpdmF0ZS1icmVha3BvaW50LXJlc2V0LWNvbnRleHRzIHtcbiAgJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlcjogKCkgIWdsb2JhbDtcbiAgJHByaXZhdGUtYnJlYWtwb2ludC1xdWVyeS1jb3VudDogMCAhZ2xvYmFsO1xufSIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ29udmVydHMgdGhlIGlucHV0IHZhbHVlIHRvIEJhc2UgRU1zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBmdW5jdGlvbiBicmVha3BvaW50LXRvLWJhc2UtZW0oJHZhbHVlKSB7XG4gICR2YWx1ZS11bml0OiB1bml0KCR2YWx1ZSk7XG5cbiAgLy8gV2lsbCBjb252ZXJ0IHJlbGF0aXZlIEVNcyBpbnRvIHJvb3QgRU1zLlxuICBAaWYgYnJlYWtwb2ludC1nZXQoJ2Jhc2UgZm9udCBzaXplJykgYW5kIHR5cGUtb2YoYnJlYWtwb2ludC1nZXQoJ2Jhc2UgZm9udCBzaXplJykpID09ICdudW1iZXInIGFuZCAkdmFsdWUtdW5pdCA9PSAnZW0nIHtcbiAgICAkYmFzZS11bml0OiB1bml0KGJyZWFrcG9pbnQtZ2V0KCdiYXNlIGZvbnQgc2l6ZScpKTtcblxuICAgIEBpZiAkYmFzZS11bml0ID09ICdweCcgb3IgJGJhc2UtdW5pdCA9PSAnJScgb3IgJGJhc2UtdW5pdCA9PSAnZW0nIG9yICRiYXNlLXVuaXQgPT0gJ3B0JyB7XG4gICAgICBAcmV0dXJuIGJhc2UtY29udmVyc2lvbigkdmFsdWUpIC8gYmFzZS1jb252ZXJzaW9uKGJyZWFrcG9pbnQtZ2V0KCdiYXNlIGZvbnQgc2l6ZScpKSAqIDFlbTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgQHdhcm4gJyN7YnJlYWtwb2ludC1nZXQoXFwnYmFzZSBmb250IHNpemVcXCcpfSBpcyBub3Qgc2V0IGluIHZhbGlkIHVuaXRzIGZvciBmb250IHNpemUhJztcbiAgICAgIEByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIEBlbHNlIHtcbiAgICBAcmV0dXJuIGJhc2UtY29udmVyc2lvbigkdmFsdWUpO1xuICB9XG59XG5cbkBmdW5jdGlvbiBiYXNlLWNvbnZlcnNpb24oJHZhbHVlKSB7XG4gICR1bml0OiB1bml0KCR2YWx1ZSk7XG5cbiAgQGlmICR1bml0ID09ICdweCcge1xuICAgIEByZXR1cm4gJHZhbHVlIC8gMTZweCAqIDFlbTtcbiAgfVxuICBAZWxzZSBpZiAkdW5pdCA9PSAnJScge1xuICAgIEByZXR1cm4gJHZhbHVlIC8gMTAwJSAqIDFlbTtcbiAgfVxuICBAZWxzZSBpZiAkdW5pdCA9PSAnZW0nIHtcbiAgICBAcmV0dXJuICR2YWx1ZTtcbiAgfVxuICBAZWxzZSBpZiAkdW5pdCA9PSAncHQnIHtcbiAgICBAcmV0dXJuICR2YWx1ZSAvIDEycHQgKiAxZW07XG4gIH1cbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gJHZhbHVlO1xuLy8gICAgQHdhcm4gJ0V2ZXJ5dGhpbmcgaXMgdGVycmlibGUhIFdoYXQgaGF2ZSB5b3UgZG9uZT8hJztcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFJldHVybnMgd2hldGhlciB0aGUgZmVhdHVyZSBjYW4gaGF2ZSBhIG1pbi9tYXggcGFpclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4kYnJlYWtwb2ludC1taW4tbWF4LWZlYXR1cmVzOiAnY29sb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yLWluZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhc3BlY3QtcmF0aW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZS1hc3BlY3QtcmF0aW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZS1oZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZS13aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtb25vY2hyb21lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXNvbHV0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc7XG5cbkBmdW5jdGlvbiBicmVha3BvaW50LW1pbi1tYXgoJGZlYXR1cmUpIHtcbiAgQGVhY2ggJGl0ZW0gaW4gJGJyZWFrcG9pbnQtbWluLW1heC1mZWF0dXJlcyB7XG4gICAgQGlmICRmZWF0dXJlID09ICRpdGVtIHtcbiAgICAgIEByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBSZXR1cm5zIHdoZXRoZXIgdGhlIGZlYXR1cmUgY2FuIGhhdmUgYSBzdHJpbmcgdmFsdWVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuJGJyZWFrcG9pbnQtc3RyaW5nLWZlYXR1cmVzOiAgJ29yaWVudGF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY2FuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb2xvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXNwZWN0LXJhdGlvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2UtYXNwZWN0LXJhdGlvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsdW1pbm9zaXR5JztcblxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtc3RyaW5nLXZhbHVlKCRmZWF0dXJlKSB7XG4gIEBlYWNoICRpdGVtIGluICRicmVha3BvaW50LXN0cmluZy1mZWF0dXJlcyB7XG4gICAgQGlmIGJyZWFrcG9pbnQtbWluLW1heCgkaXRlbSkge1xuICAgICAgQGlmICRmZWF0dXJlID09ICdtaW4tI3skaXRlbX0nIG9yICRmZWF0dXJlID09ICdtYXgtI3skaXRlbX0nIHtcbiAgICAgICAgQHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBAZWxzZSBpZiAkZmVhdHVyZSA9PSAkaXRlbSB7XG4gICAgICBAcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gUmV0dXJucyB3aGV0aGVyIHRoZSBmZWF0dXJlIGlzIGEgbWVkaWEgdHlwZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4kYnJlYWtwb2ludC1tZWRpYS10eXBlczogICdhbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnYnJhaWxsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdlbWJvc3NlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdoYW5kaGVsZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwcmludCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9qZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NjcmVlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdzcGVlY2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAndHR5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R2JztcblxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaXMtbWVkaWEoJGZlYXR1cmUpIHtcbiAgQGVhY2ggJG1lZGlhIGluICRicmVha3BvaW50LW1lZGlhLXR5cGVzIHtcbiAgICBAaWYgKCRmZWF0dXJlID09ICRtZWRpYSkgb3IgKCRmZWF0dXJlID09ICdub3QgI3skbWVkaWF9Jykgb3IgKCRmZWF0dXJlID09ICdvbmx5ICN7JG1lZGlhfScpIHtcbiAgICAgIEByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuIGZhbHNlO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFJldHVybnMgd2hldGhlciB0aGUgZmVhdHVyZSBjYW4gc3RhbmQgYWxvbmVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuJGJyZWFrcG9pbnQtc2luZ2xlLXN0cmluZy1mZWF0dXJlczogJ2NvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb2xvci1pbmRleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ3JpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbW9ub2Nocm9tZSc7XG5cbkBmdW5jdGlvbiBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcoJGZlYXR1cmUpIHtcbiAgQGVhY2ggJGl0ZW0gaW4gJGJyZWFrcG9pbnQtc2luZ2xlLXN0cmluZy1mZWF0dXJlcyB7XG4gICAgQGlmICRmZWF0dXJlID09ICRpdGVtIHtcbiAgICAgIEByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBSZXR1cm5zIHdoZXRoZXIgdGhlIGZlYXR1cmVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtaXMtcmVzb2x1dGlvbigkZmVhdHVyZSkge1xuICAkcmVzb2x1dGlvbnM6ICdkZXZpY2UtcGl4ZWwtcmF0aW8nLCAnZHByJztcblxuICBAaWYgYnJlYWtwb2ludC1nZXQoJ3RyYW5zZm9ybSByZXNvbHV0aW9ucycpIHtcbiAgICAkcmVzb2x1dGlvbnM6IGFwcGVuZCgkcmVzb2x1dGlvbnMsICdyZXNvbHV0aW9uJyk7XG4gIH1cblxuICBAZWFjaCAkcmVzbyBpbiAkcmVzb2x1dGlvbnMge1xuICAgIEBpZiBpbmRleCgkZmVhdHVyZSwgJHJlc28pIG9yIGluZGV4KCRmZWF0dXJlLCAnbWluLSN7JHJlc299Jykgb3IgaW5kZXgoJGZlYXR1cmUsICdtYXgtI3skcmVzb30nKSB7XG4gICAgICBAcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiBmYWxzZTtcbn1cbiIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW1wb3J0IFBhcnNlciBQaWVjZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGltcG9ydCBcInBhcnNlcnMvcXVlcnlcIjtcbkBpbXBvcnQgXCJwYXJzZXJzL3NpbmdsZVwiO1xuQGltcG9ydCBcInBhcnNlcnMvZG91YmxlXCI7XG5AaW1wb3J0IFwicGFyc2Vycy90cmlwbGVcIjtcbkBpbXBvcnQgXCJwYXJzZXJzL3Jlc29sdXRpb25cIjtcblxuJE1lbW8tRXhpc3RzOiBmdW5jdGlvbi1leGlzdHMobWVtby1nZXQpIGFuZCBmdW5jdGlvbi1leGlzdHMobWVtby1zZXQpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEJyZWFrcG9pbnQgRnVuY3Rpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGJyZWFrcG9pbnQoJHF1ZXJ5LCAkY29udGV4dHMuLi4pIHtcbiAgJHJ1bjogdHJ1ZTtcbiAgJHJldHVybjogKCk7XG5cbiAgLy8gR3JhYiB0aGUgTWVtbyBPdXRwdXQgaWYgTWVtb2l6YXRpb24gY2FuIGJlIGEgdGhpbmdcbiAgQGlmICRNZW1vLUV4aXN0cyB7XG4gICAgJHJldHVybjogbWVtby1nZXQoYnJlYWtwb2ludCwgYnJlYWtwb2ludCAkcXVlcnkgJGNvbnRleHRzKTtcblxuICAgIEBpZiAkcmV0dXJuICE9IG51bGwge1xuICAgICAgJHJ1bjogZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgQGlmIG5vdCAkTWVtby1FeGlzdHMgb3IgJHJ1biB7XG4gICAgLy8gSW50ZXJuYWwgVmFyaWFibGVzXG4gICAgJHF1ZXJ5LXN0cmluZzogJyc7XG4gICAgJHF1ZXJ5LWZhbGxiYWNrOiBmYWxzZTtcbiAgICAkcmV0dXJuOiAoKTtcblxuICAgIC8vIFJlc2VydmUgR2xvYmFsIFByaXZhdGUgQnJlYWtwb2ludCBDb250ZXh0XG4gICAgJGhvbGRlci1jb250ZXh0OiAkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyO1xuICAgICRob2xkZXItcXVlcnktY291bnQ6ICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQ7XG5cbiAgICAvLyBSZXNldCBHbG9iYWwgUHJpdmF0ZSBCcmVha3BvaW50IENvbnRleHRcbiAgICAkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyOiAoKSAhZ2xvYmFsO1xuICAgICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQ6IDAgIWdsb2JhbDtcblxuXG4gICAgLy8gVGVzdCB0byBzZWUgaWYgaXQncyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0XG4gICAgJG9yLWxpc3Q6IGlmKGxpc3Qtc2VwYXJhdG9yKCRxdWVyeSkgPT0gJ2NvbW1hJywgdHJ1ZSwgZmFsc2UpO1xuXG5cbiAgICBAaWYgKCRvci1saXN0ID09IGZhbHNlIGFuZCBicmVha3BvaW50LWdldCgnbGVnYWN5IHN5bnRheCcpID09IGZhbHNlKSB7XG4gICAgICAkcXVlcnktc3RyaW5nOiBicmVha3BvaW50LXBhcnNlKCRxdWVyeSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRsZW5ndGg6IGxlbmd0aCgkcXVlcnkpO1xuXG4gICAgICAkbGFzdDogbnRoKCRxdWVyeSwgJGxlbmd0aCk7XG4gICAgICAkcXVlcnktZmFsbGJhY2s6IGJyZWFrcG9pbnQtbm8tcXVlcnkoJGxhc3QpO1xuXG4gICAgICBAaWYgKCRxdWVyeS1mYWxsYmFjayAhPSBmYWxzZSkge1xuICAgICAgICAkbGVuZ3RoOiAkbGVuZ3RoIC0gMTtcbiAgICAgIH1cblxuICAgICAgQGlmIChicmVha3BvaW50LWdldCgnbGVnYWN5IHN5bnRheCcpID09IHRydWUpIHtcbiAgICAgICAgJG1xOiAoKTtcblxuICAgICAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRsZW5ndGgge1xuICAgICAgICAgICRtcTogYXBwZW5kKCRtcSwgbnRoKCRxdWVyeSwgJGkpLCBjb21tYSk7XG4gICAgICAgIH1cblxuICAgICAgICAkcXVlcnktc3RyaW5nOiBicmVha3BvaW50LXBhcnNlKCRtcSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgICRxdWVyeS1zdHJpbmc6ICcnO1xuICAgICAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRsZW5ndGgge1xuICAgICAgICAgICRxdWVyeS1zdHJpbmc6ICRxdWVyeS1zdHJpbmcgKyBpZigkaSA9PSAxLCAnJywgJywgJykgKyBicmVha3BvaW50LXBhcnNlKG50aCgkcXVlcnksICRpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcmV0dXJuOiAoJ3F1ZXJ5JzogJHF1ZXJ5LXN0cmluZyxcbiAgICAgICAgJ2ZhbGxiYWNrJzogJHF1ZXJ5LWZhbGxiYWNrLFxuICAgICAgICAnY29udGV4dCBob2xkZXInOiAkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyLFxuICAgICAgICAncXVlcnkgY291bnQnOiAkcHJpdmF0ZS1icmVha3BvaW50LXF1ZXJ5LWNvdW50XG4gICAgKTtcbiAgICBAaWYgbGVuZ3RoKCRjb250ZXh0cykgPiAwIGFuZCBudGgoJGNvbnRleHRzLCAxKSAhPSBmYWxzZSB7XG4gICAgICBAaWYgJHF1ZXJ5LWZhbGxiYWNrICE9IGZhbHNlIHtcbiAgICAgICAgJGNvbnRleHQtc2V0dGVyOiBwcml2YXRlLWJyZWFrcG9pbnQtc2V0LWNvbnRleHQoJ25vLXF1ZXJ5JywgJHF1ZXJ5LWZhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgICRjb250ZXh0LW1hcDogKCk7XG4gICAgICBAZWFjaCAkY29udGV4dCBpbiAkY29udGV4dHMge1xuICAgICAgICAkY29udGV4dC1tYXA6IG1hcC1tZXJnZSgkY29udGV4dC1tYXAsICgkY29udGV4dDogYnJlYWtwb2ludC1nZXQtY29udGV4dCgkY29udGV4dCkpKTtcbiAgICAgIH1cbiAgICAgICRyZXR1cm46IG1hcC1tZXJnZSgkcmV0dXJuLCAoY29udGV4dDogJGNvbnRleHQtbWFwKSk7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgR2xvYmFsIFByaXZhdGUgQnJlYWtwb2ludCBDb250ZXh0XG4gICAgJHByaXZhdGUtYnJlYWtwb2ludC1jb250ZXh0LWhvbGRlcjogKCkgIWdsb2JhbDtcbiAgICAkcHJpdmF0ZS1icmVha3BvaW50LXF1ZXJ5LWNvdW50OiAwICFnbG9iYWw7XG5cbiAgICBAaWYgJE1lbW8tRXhpc3RzIHtcbiAgICAgICRob2xkZXI6IG1lbW8tc2V0KGJyZWFrcG9pbnQsIGJyZWFrcG9pbnQgJHF1ZXJ5ICRjb250ZXh0cywgJHJldHVybik7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkcmV0dXJuO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEdlbmVyYWwgQnJlYWtwb2ludCBQYXJzZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtcGFyc2UoJHF1ZXJ5KSB7XG4gIC8vIEluY3JlYXNlIG51bWJlciBvZiAnYW5kJyBxdWVyaWVzXG4gICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQ6ICRwcml2YXRlLWJyZWFrcG9pbnQtcXVlcnktY291bnQgKyAxICFnbG9iYWw7XG5cbiAgLy8gU2V0IHVwIE1lZGlhIFR5cGVcbiAgJHF1ZXJ5LXByaW50OiAnJztcblxuICAkZm9yY2UtYWxsOiAoKGJyZWFrcG9pbnQtZ2V0KCdmb3JjZSBhbGwgbWVkaWEgdHlwZScpID09IHRydWUpIGFuZCAoYnJlYWtwb2ludC1nZXQoJ2RlZmF1bHQgbWVkaWEnKSA9PSAnYWxsJykpO1xuICAkZW1wdHktbWVkaWE6IHRydWU7XG4gIEBpZiAoJGZvcmNlLWFsbCA9PSB0cnVlKSBvciAoYnJlYWtwb2ludC1nZXQoJ2RlZmF1bHQgbWVkaWEnKSAhPSAnYWxsJykge1xuICAgIC8vIEZvcmNlIHRoZSBwcmludCBvZiB0aGUgZGVmYXVsdCBtZWRpYSB0eXBlIGlmIChmb3JjZSBhbGwgaXMgdHJ1ZSBhbmQgZGVmYXVsdCBtZWRpYSB0eXBlIGlzIGFsbCkgb3IgKGRlZmF1bHQgbWVkaWEgdHlwZSBpcyBub3QgYWxsKVxuICAgICRxdWVyeS1wcmludDogYnJlYWtwb2ludC1nZXQoJ2RlZmF1bHQgbWVkaWEnKTtcbiAgICAkZW1wdHktbWVkaWE6IGZhbHNlO1xuICB9XG5cblxuICAkcXVlcnktcmVzb2x1dGlvbjogZmFsc2U7XG5cbiAgJHF1ZXJ5LWhvbGRlcjogYnJlYWtwb2ludC1wYXJzZS1xdWVyeSgkcXVlcnkpO1xuXG5cblxuICAvLyBMb29wIG92ZXIgZWFjaCBwYXJzZWQgb3V0IHF1ZXJ5IGFuZCB3cml0ZSBpdCB0byAkcXVlcnktcHJpbnRcbiAgJGZpcnN0OiB0cnVlO1xuXG4gIEBlYWNoICRmZWF0dXJlIGluICRxdWVyeS1ob2xkZXIge1xuICAgICRsZW5ndGg6IGxlbmd0aCgkZmVhdHVyZSk7XG5cbiAgICAvLyBQYXJzZSBhIHNpbmdsZSBmZWF0dXJlXG4gICAgQGlmICgkbGVuZ3RoID09IDEpIHtcbiAgICAgIC8vIEZlYXR1cmUgaXMgY3VycmVudGx5IGEgbGlzdCwgZ3JhYiB0aGUgYWN0dWFsIHZhbHVlXG4gICAgICAkZmVhdHVyZTogbnRoKCRmZWF0dXJlLCAxKTtcblxuICAgICAgLy8gTWVkaWEgVHlwZSBtdXN0IGJ5IGNvbnZlbnRpb24gYmUgdGhlIGZpcnN0IGl0ZW0sIHNvIGl0J3Mgc2FmZSB0byBmbGF0IG92ZXJyaWRlICRxdWVyeS1wcmludCwgd2hpY2ggcmlnaHQgbm93IHNob3VsZCBvbmx5IGJlIHRoZSBkZWZhdWx0IG1lZGlhIHR5cGVcbiAgICAgIEBpZiAoYnJlYWtwb2ludC1pcy1tZWRpYSgkZmVhdHVyZSkpIHtcbiAgICAgICAgQGlmICgkZm9yY2UtYWxsID09IHRydWUpIG9yICgkZmVhdHVyZSAhPSAnYWxsJykge1xuICAgICAgICAgIC8vIEZvcmNlIHRoZSBwcmludCBvZiB0aGUgZGVmYXVsdCBtZWRpYSB0eXBlIGlmIChmb3JjZSBhbGwgaXMgdHJ1ZSBhbmQgZGVmYXVsdCBtZWRpYSB0eXBlIGlzIGFsbCkgb3IgKGRlZmF1bHQgbWVkaWEgdHlwZSBpcyBub3QgYWxsKVxuICAgICAgICAgICRxdWVyeS1wcmludDogJGZlYXR1cmU7XG4gICAgICAgICAgJGVtcHR5LW1lZGlhOiBmYWxzZTtcblxuICAgICAgICAgIC8vIFNldCBDb250ZXh0XG4gICAgICAgICAgJGNvbnRleHQtc2V0dGVyOiBwcml2YXRlLWJyZWFrcG9pbnQtc2V0LWNvbnRleHQobWVkaWEsICRxdWVyeS1wcmludCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHBhcnNlZDogYnJlYWtwb2ludC1wYXJzZS1zaW5nbGUoJGZlYXR1cmUsICRlbXB0eS1tZWRpYSwgJGZpcnN0KTtcbiAgICAgICAgJHF1ZXJ5LXByaW50OiAnI3skcXVlcnktcHJpbnR9ICN7JHBhcnNlZH0nO1xuICAgICAgICAkZmlyc3Q6IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQYXJzZSBhIGRvdWJsZSBmZWF0dXJlXG4gICAgQGVsc2UgaWYgKCRsZW5ndGggPT0gMikge1xuICAgICAgQGlmIChicmVha3BvaW50LWlzLXJlc29sdXRpb24oJGZlYXR1cmUpICE9IGZhbHNlKSB7XG4gICAgICAgICRxdWVyeS1yZXNvbHV0aW9uOiAkZmVhdHVyZTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHBhcnNlZDogbnVsbDtcbiAgICAgICAgLy8gSWYgaXQncyBhIHN0cmluZy9udW1iZXIgcGFpcixcbiAgICAgICAgLy8gd2UgY2hlY2sgdG8gc2VlIGlmIG9uZSBpcyBhIHNpbmdsZS1zdHJpbmcgdmFsdWUsXG4gICAgICAgIC8vIHRoZW4gd2UgcGFyc2UgaXQgYXMgYSBub3JtYWwgZG91YmxlXG4gICAgICAgICRhbHBoYTogbnRoKCRmZWF0dXJlLCAxKTtcbiAgICAgICAgJGJldGE6IG50aCgkZmVhdHVyZSwgMik7XG4gICAgICAgIEBpZiBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcoJGFscGhhKSBvciBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcoJGJldGEpIHtcbiAgICAgICAgICAkcGFyc2VkOiBicmVha3BvaW50LXBhcnNlLXNpbmdsZSgkYWxwaGEsICRlbXB0eS1tZWRpYSwgJGZpcnN0KTtcbiAgICAgICAgICAkcXVlcnktcHJpbnQ6ICcjeyRxdWVyeS1wcmludH0gI3skcGFyc2VkfSc7XG4gICAgICAgICAgJGZpcnN0OiBmYWxzZTtcbiAgICAgICAgICAkcGFyc2VkOiBicmVha3BvaW50LXBhcnNlLXNpbmdsZSgkYmV0YSwgJGVtcHR5LW1lZGlhLCAkZmlyc3QpO1xuICAgICAgICAgICRxdWVyeS1wcmludDogJyN7JHF1ZXJ5LXByaW50fSAjeyRwYXJzZWR9JztcbiAgICAgICAgfVxuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgJHBhcnNlZDogYnJlYWtwb2ludC1wYXJzZS1kb3VibGUoJGZlYXR1cmUsICRlbXB0eS1tZWRpYSwgJGZpcnN0KTtcbiAgICAgICAgICAkcXVlcnktcHJpbnQ6ICcjeyRxdWVyeS1wcmludH0gI3skcGFyc2VkfSc7XG4gICAgICAgICAgJGZpcnN0OiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBQYXJzZSBhIHRyaXBsZSBmZWF0dXJlXG4gICAgQGVsc2UgaWYgKCRsZW5ndGggPT0gMykge1xuICAgICAgJHBhcnNlZDogYnJlYWtwb2ludC1wYXJzZS10cmlwbGUoJGZlYXR1cmUsICRlbXB0eS1tZWRpYSwgJGZpcnN0KTtcbiAgICAgICRxdWVyeS1wcmludDogJyN7JHF1ZXJ5LXByaW50fSAjeyRwYXJzZWR9JztcbiAgICAgICRmaXJzdDogZmFsc2U7XG4gICAgfVxuXG4gIH1cblxuICBAaWYgKCRxdWVyeS1yZXNvbHV0aW9uICE9IGZhbHNlKSB7XG4gICAgJHF1ZXJ5LXByaW50OiBicmVha3BvaW50LWJ1aWxkLXJlc29sdXRpb24oJHF1ZXJ5LXByaW50LCAkcXVlcnktcmVzb2x1dGlvbiwgJGVtcHR5LW1lZGlhLCAkZmlyc3QpO1xuICB9XG5cbiAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggZmVhdHVyZSB0aGF0J3MgYmVlbiBkZXRlY3RlZCBzbyBmYXIgYW5kIGFwcGVuZCAnZmFsc2UnIHRvIHRoZSB0aGUgdmFsdWUgbGlzdCB0byBpbmNyZW1lbnQgdGhlaXIgY291bnRlcnNcbiAgQGVhY2ggJGYsICR2IGluICRwcml2YXRlLWJyZWFrcG9pbnQtY29udGV4dC1ob2xkZXIge1xuICAgICR2LWhvbGRlcjogJHY7XG4gICAgJGxlbmd0aDogbGVuZ3RoKCR2LWhvbGRlcik7XG4gICAgQGlmIGxlbmd0aCgkdi1ob2xkZXIpIDwgJHByaXZhdGUtYnJlYWtwb2ludC1xdWVyeS1jb3VudCB7XG4gICAgICBAZm9yICRpIGZyb20gJGxlbmd0aCB0byAkcHJpdmF0ZS1icmVha3BvaW50LXF1ZXJ5LWNvdW50IHtcbiAgICAgICAgQGlmICRmID09ICdtZWRpYScge1xuICAgICAgICAgICR2LWhvbGRlcjogYXBwZW5kKCR2LWhvbGRlciwgYnJlYWtwb2ludC1nZXQoJ2RlZmF1bHQgbWVkaWEnKSk7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICR2LWhvbGRlcjogYXBwZW5kKCR2LWhvbGRlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICRwcml2YXRlLWJyZWFrcG9pbnQtY29udGV4dC1ob2xkZXI6IG1hcC1tZXJnZSgkcHJpdmF0ZS1icmVha3BvaW50LWNvbnRleHQtaG9sZGVyLCAoJGY6ICR2LWhvbGRlcikpICFnbG9iYWw7XG4gIH1cblxuICBAcmV0dXJuICRxdWVyeS1wcmludDtcbn1cbiIsIkBmdW5jdGlvbiBicmVha3BvaW50LXBhcnNlLXF1ZXJ5KCRxdWVyeSkge1xuICAvLyBQYXJzZSBmZWF0dXJlcyBvdXQgb2YgYW4gaW5kaXZpZHVhbCBxdWVyeVxuICAkZmVhdHVyZS1ob2xkZXI6ICgpO1xuICAkcXVlcnktaG9sZGVyOiAoKTtcbiAgJGxlbmd0aDogbGVuZ3RoKCRxdWVyeSk7XG5cbiAgQGlmICRsZW5ndGggPT0gMiB7XG4gICAgLy8gSWYgd2UndmUgZ290IGEgc3RyaW5nL251bWJlciwgbnVtYmVyL3N0cmluZywgY2hlY2sgdG8gc2VlIGlmIGl0J3MgYSB2YWxpZCBzdHJpbmcvbnVtYmVyIHBhaXIgb3IgdHdvIHNpbmdsZXNcbiAgICBAaWYgKHR5cGUtb2YobnRoKCRxdWVyeSwgMSkpID09ICdzdHJpbmcnIGFuZCB0eXBlLW9mKG50aCgkcXVlcnksIDIpKSA9PSAnbnVtYmVyJykgb3IgKHR5cGUtb2YobnRoKCRxdWVyeSwgMSkpID09ICdudW1iZXInIGFuZCB0eXBlLW9mKG50aCgkcXVlcnksIDIpKSA9PSAnc3RyaW5nJykge1xuXG4gICAgICAkbnVtYmVyOiAnJztcbiAgICAgICR2YWx1ZTogJyc7XG5cbiAgICAgIEBpZiB0eXBlLW9mKG50aCgkcXVlcnksIDEpKSA9PSAnc3RyaW5nJyB7XG4gICAgICAgICRudW1iZXI6IG50aCgkcXVlcnksIDIpO1xuICAgICAgICAkdmFsdWU6IG50aCgkcXVlcnksIDEpO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICAkbnVtYmVyOiBudGgoJHF1ZXJ5LCAxKTtcbiAgICAgICAgJHZhbHVlOiBudGgoJHF1ZXJ5LCAyKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIHN0cmluZyB2YWx1ZSBjYW4gYmUgYSBzaW5nbGUgdmFsdWUsIGNoZWNrIHRvIHNlZSBpZiB0aGUgbnVtYmVyIHBhc3NlZCBpbiBpcyBhIHZhbGlkIGlucHV0IGZvciBzYWlkIHNpbmdsZSB2YWx1ZS4gRm9ydHVuYXRlbHksIGFsbCBjdXJyZW50IHNpbmdsZS12YWx1ZSBvcHRpb25zIG9ubHkgYWNjZXB0IHVuaXRsZXNzIG51bWJlcnMsIHNvIHRoaXMgY2hlY2sgaXMgZWFzeS5cbiAgICAgIEBpZiBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcoJHZhbHVlKSB7XG4gICAgICAgIEBpZiB1bml0bGVzcygkbnVtYmVyKSB7XG4gICAgICAgICAgJGZlYXR1cmUtaG9sZGVyOiBhcHBlbmQoJHZhbHVlLCAkbnVtYmVyLCBzcGFjZSk7XG4gICAgICAgICAgJHF1ZXJ5LWhvbGRlcjogYXBwZW5kKCRxdWVyeS1ob2xkZXIsICRmZWF0dXJlLWhvbGRlciwgY29tbWEpO1xuICAgICAgICAgIEByZXR1cm4gJHF1ZXJ5LWhvbGRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHN0cmluZyBpcyBhIG1lZGlhIHR5cGUsIHNwbGl0IHRoZSBxdWVyeVxuICAgICAgQGlmIGJyZWFrcG9pbnQtaXMtbWVkaWEoJHZhbHVlKSB7XG4gICAgICAgICRxdWVyeS1ob2xkZXI6IGFwcGVuZCgkcXVlcnktaG9sZGVyLCBudGgoJHF1ZXJ5LCAxKSk7XG4gICAgICAgICRxdWVyeS1ob2xkZXI6IGFwcGVuZCgkcXVlcnktaG9sZGVyLCBudGgoJHF1ZXJ5LCAyKSk7XG4gICAgICAgIEByZXR1cm4gJHF1ZXJ5LWhvbGRlcjtcbiAgICAgIH1cbiAgICAgIC8vIElmIGl0J3Mgbm90IGEgc2luZ2xlIGZlYXR1cmUsIHdlJ3JlIGp1c3QgZ29pbmcgdG8gYXNzdW1lIGl0J3MgYSBwcm9wZXIgc3RyaW5nL3ZhbHVlIHBhaXIsIGFuZCByb2xsIHdpdGggaXQuXG4gICAgICBAZWxzZSB7XG4gICAgICAgICRmZWF0dXJlLWhvbGRlcjogYXBwZW5kKCR2YWx1ZSwgJG51bWJlciwgc3BhY2UpO1xuICAgICAgICAkcXVlcnktaG9sZGVyOiBhcHBlbmQoJHF1ZXJ5LWhvbGRlciwgJGZlYXR1cmUtaG9sZGVyLCBjb21tYSk7XG4gICAgICAgIEByZXR1cm4gJHF1ZXJ5LWhvbGRlcjtcbiAgICAgIH1cblxuICAgIH1cbiAgICAvLyBJZiB0aGV5J3JlIGJvdGggbnVtYmVycywgd2UgYXNzdW1lIGl0J3MgYSBkb3VibGUgYW5kIHJvbGwgd2l0aCB0aGF0XG4gICAgQGVsc2UgaWYgKHR5cGUtb2YobnRoKCRxdWVyeSwgMSkpID09ICdudW1iZXInIGFuZCB0eXBlLW9mKG50aCgkcXVlcnksIDIpKSA9PSAnbnVtYmVyJykge1xuICAgICAgJGZlYXR1cmUtaG9sZGVyOiBhcHBlbmQobnRoKCRxdWVyeSwgMSksIG50aCgkcXVlcnksIDIpLCBzcGFjZSk7XG4gICAgICAkcXVlcnktaG9sZGVyOiBhcHBlbmQoJHF1ZXJ5LWhvbGRlciwgJGZlYXR1cmUtaG9sZGVyLCBjb21tYSk7XG4gICAgICBAcmV0dXJuICRxdWVyeS1ob2xkZXI7XG4gICAgfVxuICAgIC8vIElmIHRoZXkncmUgYm90aCBzdHJpbmdzIGFuZCBuZWl0aGVyIGFyZSBzaW5nbGVzLCB3ZSByb2xsIHdpdGggdGhhdC5cbiAgICBAZWxzZSBpZiAodHlwZS1vZihudGgoJHF1ZXJ5LCAxKSkgPT0gJ3N0cmluZycgYW5kIHR5cGUtb2YobnRoKCRxdWVyeSwgMikpID09ICdzdHJpbmcnKSB7XG4gICAgICBAaWYgbm90IGJyZWFrcG9pbnQtc2luZ2xlLXN0cmluZyhudGgoJHF1ZXJ5LCAxKSkgYW5kIG5vdCBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcobnRoKCRxdWVyeSwgMikpIHtcbiAgICAgICAgJGZlYXR1cmUtaG9sZGVyOiBhcHBlbmQobnRoKCRxdWVyeSwgMSksIG50aCgkcXVlcnksIDIpLCBzcGFjZSk7XG4gICAgICAgICRxdWVyeS1ob2xkZXI6IGFwcGVuZCgkcXVlcnktaG9sZGVyLCAkZmVhdHVyZS1ob2xkZXIsIGNvbW1hKTtcbiAgICAgICAgQHJldHVybiAkcXVlcnktaG9sZGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkbGVuZ3RoID09IDMge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCB0aHJlZSBpdGVtcyBhbmQgbm9uZSBpcyBhIGxpc3QsIHdlIGNoZWNrIHRvIHNlZVxuICAgIEBpZiB0eXBlLW9mKG50aCgkcXVlcnksIDEpKSAhPSAnbGlzdCcgYW5kIHR5cGUtb2YobnRoKCRxdWVyeSwgMikpICE9ICdsaXN0JyBhbmQgdHlwZS1vZihudGgoJHF1ZXJ5LCAzKSkgIT0gJ2xpc3QnIHtcbiAgICAgIC8vIElmIG5vbmUgb2YgdGhlIGl0ZW1zIGFyZSBzaW5nbGUgc3RyaW5nIHZhbHVlcyBhbmQgbm9uZSBvZiB0aGUgdmFsdWVzIGFyZSBtZWRpYSB2YWx1ZXMsIHdlJ3JlIGdvb2QuXG4gICAgICBAaWYgKG5vdCBicmVha3BvaW50LXNpbmdsZS1zdHJpbmcobnRoKCRxdWVyeSwgMSkpIGFuZCBub3QgYnJlYWtwb2ludC1zaW5nbGUtc3RyaW5nKG50aCgkcXVlcnksIDIpKSBhbmQgbm90IGJyZWFrcG9pbnQtc2luZ2xlLXN0cmluZyhudGgoJHF1ZXJ5LCAzKSkpIGFuZCAgKChub3QgYnJlYWtwb2ludC1pcy1tZWRpYShudGgoJHF1ZXJ5LCAxKSkgYW5kIG5vdCBicmVha3BvaW50LWlzLW1lZGlhKG50aCgkcXVlcnksIDIpKSBhbmQgbm90IGJyZWFrcG9pbnQtaXMtbWVkaWEobnRoKCRxdWVyeSwgMykpKSkge1xuICAgICAgICAkZmVhdHVyZS1ob2xkZXI6IGFwcGVuZChudGgoJHF1ZXJ5LCAxKSwgbnRoKCRxdWVyeSwgMiksIHNwYWNlKTtcbiAgICAgICAgJGZlYXR1cmUtaG9sZGVyOiBhcHBlbmQoJGZlYXR1cmUtaG9sZGVyLCBudGgoJHF1ZXJ5LCAzKSwgc3BhY2UpO1xuICAgICAgICAkcXVlcnktaG9sZGVyOiBhcHBlbmQoJHF1ZXJ5LWhvbGRlciwgJGZlYXR1cmUtaG9sZGVyLCBjb21tYSk7XG4gICAgICAgIEByZXR1cm4gJHF1ZXJ5LWhvbGRlcjtcbiAgICAgIH1cbiAgICAgIC8vIGxldCdzIGNoZWNrIHRvIHNlZSBpZiB0aGUgZmlyc3QgaXRlbSBpcyBhIG1lZGlhIHR5cGVcbiAgICAgIEBlbHNlIGlmIGJyZWFrcG9pbnQtaXMtbWVkaWEobnRoKCRxdWVyeSwgMSkpIHtcbiAgICAgICAgJHF1ZXJ5LWhvbGRlcjogYXBwZW5kKCRxdWVyeS1ob2xkZXIsIG50aCgkcXVlcnksIDEpKTtcbiAgICAgICAgJGZlYXR1cmUtaG9sZGVyOiBhcHBlbmQobnRoKCRxdWVyeSwgMiksIG50aCgkcXVlcnksIDMpLCBzcGFjZSk7XG4gICAgICAgICRxdWVyeS1ob2xkZXI6IGFwcGVuZCgkcXVlcnktaG9sZGVyLCAkZmVhdHVyZS1ob2xkZXIpO1xuICAgICAgICBAcmV0dXJuICRxdWVyeS1ob2xkZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgaXQncyBhIHNpbmdsZSBpdGVtLCBvciBpZiBpdCdzIG5vdCBhIHNwZWNpYWwgY2FzZSBkb3VibGUgb3IgdHJpcGxlLCB3ZSBjYW4gc2ltcGx5IHJldHVybiB0aGUgcXVlcnkuXG4gIEByZXR1cm4gJHF1ZXJ5O1xufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJbXBvcnQgUGllY2VzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBpbXBvcnQgXCJzaW5nbGUvZGVmYXVsdFwiO1xuXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1wYXJzZS1zaW5nbGUoJGZlYXR1cmUsICRlbXB0eS1tZWRpYSwgJGZpcnN0KSB7XG4gICRwYXJzZWQ6ICcnO1xuICAkbGVhZGVyOiAnJztcbiAgLy8gSWYgd2UncmUgZm9yY2luZ1xuICBAaWYgbm90ICgkZW1wdHktbWVkaWEpIG9yIG5vdCAoJGZpcnN0KSB7XG4gICAgJGxlYWRlcjogJ2FuZCAnO1xuICB9XG5cbiAgLy8gSWYgaXQncyBhIHNpbmdsZSBmZWF0dXJlIHRoYXQgY2FuIHN0YW5kIGFsb25lLCB3ZSBsZXQgaXRcbiAgQGlmIChicmVha3BvaW50LXNpbmdsZS1zdHJpbmcoJGZlYXR1cmUpKSB7XG4gICAgJHBhcnNlZDogJGZlYXR1cmU7XG4gICAgLy8gU2V0IENvbnRleHRcbiAgICAkY29udGV4dC1zZXR0ZXI6IHByaXZhdGUtYnJlYWtwb2ludC1zZXQtY29udGV4dCgkZmVhdHVyZSwgJGZlYXR1cmUpO1xuICB9XG4gIC8vIElmIGl0J3Mgbm90IGEgc3RhbmQgYWxvbmUgZmVhdHVyZSwgd2UgcGFzcyBpdCBvZmYgdG8gdGhlIGRlZmF1bHQgaGFuZGxlci5cbiAgQGVsc2Uge1xuICAgICRwYXJzZWQ6IGJyZWFrcG9pbnQtcGFyc2UtZGVmYXVsdCgkZmVhdHVyZSk7XG4gIH1cblxuICBAcmV0dXJuICRsZWFkZXIgKyAnKCcgKyAkcGFyc2VkICsgJyknO1xufVxuIiwiQGZ1bmN0aW9uIGJyZWFrcG9pbnQtcGFyc2UtZGVmYXVsdCgkZmVhdHVyZSkge1xuICAkZGVmYXVsdDogYnJlYWtwb2ludC1nZXQoJ2RlZmF1bHQgZmVhdHVyZScpO1xuXG4gIC8vIFNldCBDb250ZXh0XG4gICRjb250ZXh0LXNldHRlcjogcHJpdmF0ZS1icmVha3BvaW50LXNldC1jb250ZXh0KCRkZWZhdWx0LCAkZmVhdHVyZSk7XG5cbiAgQGlmIChicmVha3BvaW50LWdldCgndG8gZW1zJykgPT0gdHJ1ZSkgYW5kICh0eXBlLW9mKCRmZWF0dXJlKSA9PSAnbnVtYmVyJykge1xuICAgIEByZXR1cm4gJyN7JGRlZmF1bHR9OiAje2JyZWFrcG9pbnQtdG8tYmFzZS1lbSgkZmVhdHVyZSl9JztcbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiAnI3skZGVmYXVsdH06ICN7JGZlYXR1cmV9JztcbiAgfVxufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBJbXBvcnQgUGllY2VzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbkBpbXBvcnQgXCJkb3VibGUvZGVmYXVsdC1wYWlyXCI7XG5AaW1wb3J0IFwiZG91YmxlL2RvdWJsZS1zdHJpbmdcIjtcbkBpbXBvcnQgXCJkb3VibGUvZGVmYXVsdFwiO1xuXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1wYXJzZS1kb3VibGUoJGZlYXR1cmUsICRlbXB0eS1tZWRpYSwgJGZpcnN0KSB7XG4gICRwYXJzZWQ6ICcnO1xuICAkbGVhZGVyOiAnJztcbiAgLy8gSWYgd2UncmUgZm9yY2luZ1xuICBAaWYgbm90ICgkZW1wdHktbWVkaWEpIG9yIG5vdCAoJGZpcnN0KSB7XG4gICAgJGxlYWRlcjogJ2FuZCAnO1xuICB9XG5cbiAgJGZpcnN0OiBudGgoJGZlYXR1cmUsIDEpO1xuICAkc2Vjb25kOiBudGgoJGZlYXR1cmUsIDIpO1xuXG4gIC8vIElmIHdlJ3ZlIGdvdCB0d28gbnVtYmVycywgd2Uga25vdyB3ZSBuZWVkIHRvIHVzZSB0aGUgZGVmYXVsdCBwYWlyIGJlY2F1c2UgdGhlcmUgYXJlIG5vIG1lZGlhIHF1ZXJpZXMgdGhhdCBoYXMgYSBtZWRpYSBmZWF0dXJlIHRoYXQgaXMgYSBudW1iZXJcbiAgQGlmIHR5cGUtb2YoJGZpcnN0KSA9PSAnbnVtYmVyJyBhbmQgdHlwZS1vZigkc2Vjb25kKSA9PSAnbnVtYmVyJyB7XG4gICAgJHBhcnNlZDogYnJlYWtwb2ludC1wYXJzZS1kZWZhdWx0LXBhaXIoJGZpcnN0LCAkc2Vjb25kKTtcbiAgfVxuICAvLyBJZiB0aGV5IGFyZSBib3RoIHN0cmluZ3MsIHdlIHNlbmQgaXQgdGhyb3VnaCB0aGUgc3RyaW5nIHBhcnNlclxuICBAZWxzZSBpZiB0eXBlLW9mKCRmaXJzdCkgPT0gJ3N0cmluZycgYW5kIHR5cGUtb2YoJHNlY29uZCkgPT0gJ3N0cmluZycge1xuICAgICRwYXJzZWQ6IGJyZWFrcG9pbnQtcGFyc2UtZG91YmxlLXN0cmluZygkZmlyc3QsICRzZWNvbmQpO1xuICB9XG4gIC8vIElmIGl0J3MgYSBzdHJpbmcvbnVtYmVyIHBhaXIsIHdlIHBhcnNlIGl0IGFzIGEgbm9ybWFsIGRvdWJsZVxuICBAZWxzZSB7XG4gICAgJHBhcnNlZDogYnJlYWtwb2ludC1wYXJzZS1kb3VibGUtZGVmYXVsdCgkZmlyc3QsICRzZWNvbmQpO1xuICB9XG5cbiAgQHJldHVybiAkbGVhZGVyICsgJHBhcnNlZDtcbn1cbiIsIkBmdW5jdGlvbiBicmVha3BvaW50LXBhcnNlLWRlZmF1bHQtcGFpcigkZmlyc3QsICRzZWNvbmQpIHtcbiAgJGRlZmF1bHQ6IGJyZWFrcG9pbnQtZ2V0KCdkZWZhdWx0IHBhaXInKTtcbiAgJG1pbjogJyc7XG4gICRtYXg6ICcnO1xuXG4gIC8vIFNvcnQgaW50byBtaW4gYW5kIG1heFxuICAkbWluOiBtaW4oJGZpcnN0LCAkc2Vjb25kKTtcbiAgJG1heDogbWF4KCRmaXJzdCwgJHNlY29uZCk7XG5cbiAgLy8gU2V0IENvbnRleHRcbiAgJGNvbnRleHQtc2V0dGVyOiBwcml2YXRlLWJyZWFrcG9pbnQtc2V0LWNvbnRleHQobWluLSN7JGRlZmF1bHR9LCAkbWluKTtcbiAgJGNvbnRleHQtc2V0dGVyOiBwcml2YXRlLWJyZWFrcG9pbnQtc2V0LWNvbnRleHQobWF4LSN7JGRlZmF1bHR9LCAkbWF4KTtcblxuICAvLyBNYWtlIHRoZW0gRU1zIGlmIG5lZWQgYmVcbiAgQGlmIChicmVha3BvaW50LWdldCgndG8gZW1zJykgPT0gdHJ1ZSkge1xuICAgICRtaW46IGJyZWFrcG9pbnQtdG8tYmFzZS1lbSgkbWluKTtcbiAgICAkbWF4OiBicmVha3BvaW50LXRvLWJhc2UtZW0oJG1heCk7XG4gIH1cblxuICBAcmV0dXJuICcobWluLSN7JGRlZmF1bHR9OiAjeyRtaW59KSBhbmQgKG1heC0jeyRkZWZhdWx0fTogI3skbWF4fSknO1xufVxuIiwiQGZ1bmN0aW9uIGJyZWFrcG9pbnQtcGFyc2UtZG91YmxlLXN0cmluZygkZmlyc3QsICRzZWNvbmQpIHtcbiAgJGZlYXR1cmU6ICcnO1xuICAkdmFsdWU6ICcnO1xuXG4gIC8vIFRlc3QgdG8gc2VlIHdoaWNoIGlzIHRoZSBmZWF0dXJlIGFuZCB3aGljaCBpcyB0aGUgdmFsdWVcbiAgQGlmIChicmVha3BvaW50LXN0cmluZy12YWx1ZSgkZmlyc3QpID09IHRydWUpIHtcbiAgICAkZmVhdHVyZTogJGZpcnN0O1xuICAgICR2YWx1ZTogJHNlY29uZDtcbiAgfVxuICBAZWxzZSBpZiAoYnJlYWtwb2ludC1zdHJpbmctdmFsdWUoJHNlY29uZCkgPT0gdHJ1ZSkge1xuICAgICRmZWF0dXJlOiAkc2Vjb25kO1xuICAgICR2YWx1ZTogJGZpcnN0O1xuICB9XG4gIEBlbHNlIHtcbiAgICBAd2FybiBcIk5laXRoZXIgI3skZmlyc3R9IG5vciAjeyRzZWNvbmR9IGlzIGEgdmFsaWQgbWVkaWEgcXVlcnkgbmFtZS5cIjtcbiAgfVxuXG4gIC8vIFNldCBDb250ZXh0XG4gICRjb250ZXh0LXNldHRlcjogcHJpdmF0ZS1icmVha3BvaW50LXNldC1jb250ZXh0KCRmZWF0dXJlLCAkdmFsdWUpO1xuXG4gIEByZXR1cm4gJygjeyRmZWF0dXJlfTogI3skdmFsdWV9KSc7XG59IiwiQGZ1bmN0aW9uIGJyZWFrcG9pbnQtcGFyc2UtZG91YmxlLWRlZmF1bHQoJGZpcnN0LCAkc2Vjb25kKSB7XG4gICRmZWF0dXJlOiAnJztcbiAgJHZhbHVlOiAnJztcblxuICBAaWYgdHlwZS1vZigkZmlyc3QpID09ICdzdHJpbmcnIHtcbiAgICAkZmVhdHVyZTogJGZpcnN0O1xuICAgICR2YWx1ZTogJHNlY29uZDtcbiAgfVxuICBAZWxzZSB7XG4gICAgJGZlYXR1cmU6ICRzZWNvbmQ7XG4gICAgJHZhbHVlOiAkZmlyc3Q7XG4gIH1cblxuICAvLyBTZXQgQ29udGV4dFxuICAkY29udGV4dC1zZXR0ZXI6IHByaXZhdGUtYnJlYWtwb2ludC1zZXQtY29udGV4dCgkZmVhdHVyZSwgJHZhbHVlKTtcblxuICBAaWYgKGJyZWFrcG9pbnQtZ2V0KCd0byBlbXMnKSA9PSB0cnVlKSB7XG4gICAgJHZhbHVlOiBicmVha3BvaW50LXRvLWJhc2UtZW0oJHZhbHVlKTtcbiAgfVxuXG4gIEByZXR1cm4gJygjeyRmZWF0dXJlfTogI3skdmFsdWV9KSdcbn1cbiIsIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW1wb3J0IFBpZWNlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AaW1wb3J0IFwidHJpcGxlL2RlZmF1bHRcIjtcblxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtcGFyc2UtdHJpcGxlKCRmZWF0dXJlLCAkZW1wdHktbWVkaWEsICRmaXJzdCkge1xuICAkcGFyc2VkOiAnJztcbiAgJGxlYWRlcjogJyc7XG5cbiAgLy8gSWYgd2UncmUgZm9yY2luZ1xuICBAaWYgbm90ICgkZW1wdHktbWVkaWEpIG9yIG5vdCAoJGZpcnN0KSB7XG4gICAgJGxlYWRlcjogJ2FuZCAnO1xuICB9XG5cbiAgLy8gc2VwYXJhdGUgdGhlIHN0cmluZyBmZWF0dXJlcyBmcm9tIHRoZSB2YWx1ZSBudW1iZXJzXG4gICRzdHJpbmc6IG51bGw7XG4gICRudW1iZXJzOiBudWxsO1xuICBAZWFjaCAkdmFsIGluICRmZWF0dXJlIHtcbiAgICBAaWYgdHlwZS1vZigkdmFsKSA9PSBzdHJpbmcge1xuICAgICAgJHN0cmluZzogJHZhbDtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgQGlmIHR5cGUtb2YoJG51bWJlcnMpID09ICdudWxsJyB7XG4gICAgICAgICRudW1iZXJzOiAkdmFsO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICAkbnVtYmVyczogYXBwZW5kKCRudW1iZXJzLCAkdmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAkcGFyc2VkOiBicmVha3BvaW50LXBhcnNlLXRyaXBsZS1kZWZhdWx0KCRzdHJpbmcsIG50aCgkbnVtYmVycywgMSksIG50aCgkbnVtYmVycywgMikpO1xuXG4gIEByZXR1cm4gJGxlYWRlciArICRwYXJzZWQ7XG5cbn1cbiIsIkBmdW5jdGlvbiBicmVha3BvaW50LXBhcnNlLXRyaXBsZS1kZWZhdWx0KCRmZWF0dXJlLCAkZmlyc3QsICRzZWNvbmQpIHtcblxuICAvLyBTb3J0IGludG8gbWluIGFuZCBtYXhcbiAgJG1pbjogbWluKCRmaXJzdCwgJHNlY29uZCk7XG4gICRtYXg6IG1heCgkZmlyc3QsICRzZWNvbmQpO1xuXG4gIC8vIFNldCBDb250ZXh0XG4gICRjb250ZXh0LXNldHRlcjogcHJpdmF0ZS1icmVha3BvaW50LXNldC1jb250ZXh0KG1pbi0jeyRmZWF0dXJlfSwgJG1pbik7XG4gICRjb250ZXh0LXNldHRlcjogcHJpdmF0ZS1icmVha3BvaW50LXNldC1jb250ZXh0KG1heC0jeyRmZWF0dXJlfSwgJG1heCk7XG5cbiAgLy8gTWFrZSB0aGVtIEVNcyBpZiBuZWVkIGJlXG4gIEBpZiAoYnJlYWtwb2ludC1nZXQoJ3RvIGVtcycpID09IHRydWUpIHtcbiAgICAkbWluOiBicmVha3BvaW50LXRvLWJhc2UtZW0oJG1pbik7XG4gICAgJG1heDogYnJlYWtwb2ludC10by1iYXNlLWVtKCRtYXgpO1xuICB9XG5cbiAgQHJldHVybiAnKG1pbi0jeyRmZWF0dXJlfTogI3skbWlufSkgYW5kIChtYXgtI3skZmVhdHVyZX06ICN7JG1heH0pJztcbn1cbiIsIkBpbXBvcnQgXCJyZXNvbHV0aW9uL3Jlc29sdXRpb25cIjtcblxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtYnVpbGQtcmVzb2x1dGlvbigkcXVlcnktcHJpbnQsICRxdWVyeS1yZXNvbHV0aW9uLCAkZW1wdHktbWVkaWEsICRmaXJzdCkge1xuICAkbGVhZGVyOiAnJztcbiAgLy8gSWYgd2UncmUgZm9yY2luZ1xuICBAaWYgbm90ICgkZW1wdHktbWVkaWEpIG9yIG5vdCAoJGZpcnN0KSB7XG4gICAgJGxlYWRlcjogJ2FuZCAnO1xuICB9XG5cbiAgQGlmIGJyZWFrcG9pbnQtZ2V0KCd0cmFuc2Zvcm0gcmVzb2x1dGlvbnMnKSBhbmQgJHF1ZXJ5LXJlc29sdXRpb24ge1xuICAgICRyZXNvbHV0aW9uczogYnJlYWtwb2ludC1tYWtlLXJlc29sdXRpb25zKCRxdWVyeS1yZXNvbHV0aW9uKTtcbiAgICAkbGVuZ3RoOiBsZW5ndGgoJHJlc29sdXRpb25zKTtcbiAgICAkcXVlcnktaG9sZGVyOiAnJztcblxuICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGxlbmd0aCB7XG4gICAgICAkcXVlcnk6ICcjeyRxdWVyeS1wcmludH0gI3skbGVhZGVyfSN7bnRoKCRyZXNvbHV0aW9ucywgJGkpfSc7XG4gICAgICBAaWYgJGkgPT0gMSB7XG4gICAgICAgICRxdWVyeS1ob2xkZXI6ICRxdWVyeTtcbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgJHF1ZXJ5LWhvbGRlcjogJyN7JHF1ZXJ5LWhvbGRlcn0sICN7JHF1ZXJ5fSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQHJldHVybiAkcXVlcnktaG9sZGVyO1xuICB9XG4gIEBlbHNlIHtcbiAgICAvLyBSZXR1cm4gd2l0aCBhdHRhY2hlZCByZXNvbHV0aW9uXG4gICAgQHJldHVybiAkcXVlcnktcHJpbnQ7XG4gIH1cbn1cbiIsIkBmdW5jdGlvbiBicmVha3BvaW50LW1ha2UtcmVzb2x1dGlvbnMoJHJlc29sdXRpb24pIHtcbiAgJGxlbmd0aDogbGVuZ3RoKCRyZXNvbHV0aW9uKTtcblxuICAkb3V0cHV0OiAoKTtcblxuICBAaWYgJGxlbmd0aCA9PSAyIHtcbiAgICAkZmVhdHVyZTogJyc7XG4gICAgJHZhbHVlOiAnJztcblxuICAgIC8vIEZpbmQgd2hpY2ggaXMgbnVtYmVyXG4gICAgQGlmIHR5cGUtb2YobnRoKCRyZXNvbHV0aW9uLCAxKSkgPT0gJ251bWJlcicge1xuICAgICAgJHZhbHVlOiBudGgoJHJlc29sdXRpb24sIDEpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAkdmFsdWU6IG50aCgkcmVzb2x1dGlvbiwgMik7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIG1pbi9tYXgvc3RhbmRhcmRcbiAgICBAaWYgaW5kZXgoJHJlc29sdXRpb24sICdtaW4tcmVzb2x1dGlvbicpIHtcbiAgICAgICRmZWF0dXJlOiAnbWluLSc7XG4gICAgfVxuICAgIEBlbHNlIGlmIGluZGV4KCRyZXNvbHV0aW9uLCAnbWF4LXJlc29sdXRpb24nKSB7XG4gICAgICAkZmVhdHVyZTogJ21heC0nO1xuICAgIH1cblxuICAgICRzdGFuZGFyZDogJygjeyRmZWF0dXJlfXJlc29sdXRpb246ICN7JHZhbHVlfSknO1xuXG4gICAgLy8gSWYgd2UncmUgbm90IGRlYWxpbmcgd2l0aCBkcHB4LFxuICAgIEBpZiB1bml0KCR2YWx1ZSkgIT0gJ2RwcHgnIHtcbiAgICAgICRiYXNlOiA5NmRwaTtcbiAgICAgIEBpZiB1bml0KCR2YWx1ZSkgPT0gJ2RwY20nIHtcbiAgICAgICAgJGJhc2U6IDI0My44NGRwY207XG4gICAgICB9XG4gICAgICAvLyBXcml0ZSBvdXQgZmVhdHVyZSB0ZXN0c1xuICAgICAgJHdlYmtpdDogJyc7XG4gICAgICAkbW96OiAnJztcbiAgICAgICR3ZWJraXQ6ICcoLXdlYmtpdC0jeyRmZWF0dXJlfWRldmljZS1waXhlbC1yYXRpbzogI3skdmFsdWUgLyAkYmFzZX0pJztcbiAgICAgICRtb3o6ICcoI3skZmVhdHVyZX0tbW96LWRldmljZS1waXhlbC1yYXRpbzogI3skdmFsdWUgLyAkYmFzZX0pJztcbiAgICAgIC8vIEFwcGVuZCB0byBvdXRwdXRcbiAgICAgICRvdXRwdXQ6IGFwcGVuZCgkb3V0cHV0LCAkc3RhbmRhcmQsIHNwYWNlKTtcbiAgICAgICRvdXRwdXQ6IGFwcGVuZCgkb3V0cHV0LCAkd2Via2l0LCBzcGFjZSk7XG4gICAgICAkb3V0cHV0OiBhcHBlbmQoJG91dHB1dCwgJG1veiwgc3BhY2UpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICAkd2Via2l0OiAnJztcbiAgICAgICRtb3o6ICcnO1xuICAgICAgJHdlYmtpdDogJygtd2Via2l0LSN7JGZlYXR1cmV9ZGV2aWNlLXBpeGVsLXJhdGlvOiAjeyR2YWx1ZSAvIDFkcHB4fSknO1xuICAgICAgJG1vejogJygjeyRmZWF0dXJlfS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAjeyR2YWx1ZSAvIDFkcHB4fSknO1xuICAgICAgJGZhbGxiYWNrOiAnKCN7JGZlYXR1cmV9cmVzb2x1dGlvbjogI3skdmFsdWUgLyAxZHBweCAqIDk2ZHBpfSknO1xuICAgICAgLy8gQXBwZW5kIHRvIG91dHB1dFxuICAgICAgJG91dHB1dDogYXBwZW5kKCRvdXRwdXQsICRzdGFuZGFyZCwgc3BhY2UpO1xuICAgICAgJG91dHB1dDogYXBwZW5kKCRvdXRwdXQsICR3ZWJraXQsIHNwYWNlKTtcbiAgICAgICRvdXRwdXQ6IGFwcGVuZCgkb3V0cHV0LCAkbW96LCBzcGFjZSk7XG4gICAgICAkb3V0cHV0OiBhcHBlbmQoJG91dHB1dCwgJGZhbGxiYWNrLCBzcGFjZSk7XG4gICAgfVxuXG4gIH1cblxuICBAcmV0dXJuICRvdXRwdXQ7XG59XG4iLCJAZnVuY3Rpb24gYnJlYWtwb2ludC1uby1xdWVyeSgkcXVlcnkpIHtcbiAgQGlmIHR5cGUtb2YoJHF1ZXJ5KSA9PSAnbGlzdCcge1xuICAgICRrZXl3b3JkOiBudGgoJHF1ZXJ5LCAxKTtcblxuICAgIEBpZiB0eXBlLW9mKCRrZXl3b3JkKSA9PSAnc3RyaW5nJyBhbmQgKCRrZXl3b3JkID09ICduby1xdWVyeScgb3IgJGtleXdvcmQgPT0gJ25vIHF1ZXJ5JyBvciAka2V5d29yZCA9PSAnZmFsbGJhY2snKSB7XG4gICAgICBAcmV0dXJuIG50aCgkcXVlcnksIDIpO1xuICAgIH1cbiAgICBAZWxzZSB7XG4gICAgICBAcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEZWZhdWx0IHRoZSBCcmVha3BvaW50cyB2YXJpYWJsZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4kYnJlYWtwb2ludHM6ICgpICFkZWZhdWx0O1xuJEJSRUFLUE9JTlRTOiAoKSAhZGVmYXVsdDtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBSZXNwb25kLXRvIEFQSSBNaXhpblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5AbWl4aW4gcmVzcG9uZC10bygkY29udGV4dCwgJG5vLXF1ZXJ5OiBmYWxzZSkge1xuICBAaWYgbGVuZ3RoKCRicmVha3BvaW50cykgPiAwIGFuZCBsZW5ndGgoJEJSRUFLUE9JTlRTKSA9PSAwIHtcbiAgICBAd2FybiBcIkluIG9yZGVyIHRvIGF2b2lkIHZhcmlhYmxlIG5hbWVzcGFjZSBjb2xsaXNpb25zLCB3ZSBoYXZlIHVwZGF0ZWQgdGhlIHdheSB0byBhZGQgYnJlYWtwb2ludHMgZm9yIHJlc3BvbmQtdG8uIFBsZWFzZSBjaGFuZ2UgYWxsIGluc3RhbmNlcyBvZiBgJGJyZWFrcG9pbnRzOiBhZGQtYnJlYWtwb2ludCgpYCB0byBgQGluY2x1ZGUgYWRkLWJyZWFrcG9pbnQoKWAuIFRoZSBgYWRkLWJyZWFrcG9pbnQoKWAgZnVuY3Rpb24gd2lsbCBiZSBkZXByZWNhdGVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXCI7XG4gICAgJEJSRUFLUE9JTlRTOiAkYnJlYWtwb2ludHMgIWdsb2JhbDtcbiAgICAkYnJlYWtwb2ludHM6ICgpICFnbG9iYWw7XG4gIH1cblxuICBAaWYgdHlwZS1vZigkQlJFQUtQT0lOVFMpICE9ICdtYXAnIHtcbiAgICAvLyBKdXN0IGluIGNhc2Ugc29tZW9uZSB3cml0ZXMgZ2liYmVyaXNoIHRvIHRoZSAkYnJlYWtwb2ludHMgdmFyaWFibGUuXG4gICAgQHdhcm4gXCJZb3VyIGJyZWFrcG9pbnRzIGFyZW4ndCBhIG1hcCEgYHJlc3BvbmQtdG9gIGV4cGVjdHMgYSBtYXAuIFBsZWFzZSBjaGVjayB0aGUgdmFsdWUgb2YgJEJSRUFLUE9JTlRTIHZhcmlhYmxlLlwiO1xuICAgIEBjb250ZW50O1xuICB9XG4gIEBlbHNlIGlmIG1hcC1oYXMta2V5KCRCUkVBS1BPSU5UUywgJGNvbnRleHQpIHtcbiAgICBAaW5jbHVkZSBicmVha3BvaW50KG1hcC1nZXQoJEJSRUFLUE9JTlRTLCAkY29udGV4dCksICRuby1xdWVyeSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmIG5vdCBtYXAtaGFzLWtleSgkQlJFQUtQT0lOVFMsICRjb250ZXh0KSB7XG4gICAgQHdhcm4gXCJgI3skY29udGV4dH1gIGlzbid0IGEgZGVmaW5lZCBicmVha3BvaW50ISBQbGVhc2UgYWRkIGl0IHVzaW5nIGAkYnJlYWtwb2ludHM6IGFkZC1icmVha3BvaW50KGAjeyRjb250ZXh0fWAsICR2YWx1ZSk7YFwiO1xuICAgIEBjb250ZW50O1xuICB9XG4gIEBlbHNlIHtcbiAgICBAd2FybiBcIllvdSBoYXZlbid0IGNyZWF0ZWQgYW55IGJyZWFrcG9pbnRzIHlldCEgTWFrZSBzb21lIGFscmVhZHkhIGBAaW5jbHVkZSBhZGQtYnJlYWtwb2ludCgkbmFtZSwgJGJrcHQpYFwiO1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQWRkIEJyZWFrcG9pbnQgdG8gQnJlYWtwb2ludHNcbi8vIFRPRE86IFJlbW92ZSBmdW5jdGlvbiBpbiBuZXh0IHJlbGVhc2Vcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQGZ1bmN0aW9uIGFkZC1icmVha3BvaW50KCRuYW1lLCAkYmtwdCwgJG92ZXJ3cml0ZTogZmFsc2UpIHtcbiAgJG91dHB1dDogKCRuYW1lOiAkYmtwdCk7XG5cbiAgQGlmIGxlbmd0aCgkYnJlYWtwb2ludHMpID09IDAge1xuICAgIEByZXR1cm4gJG91dHB1dDtcbiAgfVxuICBAZWxzZSB7XG4gICAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJG5hbWUpIGFuZCAkb3ZlcndyaXRlICE9IHRydWUge1xuICAgICAgQHdhcm4gXCJZb3UgYWxyZWFkeSBoYXZlIGEgYnJlYWtwb2ludCBuYW1lZCBgI3skbmFtZX1gLCBwbGVhc2UgY2hvb3NlIGFub3RoZXIgYnJlYWtwb2ludCBuYW1lLCBvciBwYXNzIGluIGAkb3ZlcndyaXRlOiB0cnVlYCB0byBvdmVyd3JpdGUgdGhlIHByZXZpb3VzIGJyZWFrcG9pbnQuXCI7XG4gICAgICBAcmV0dXJuICRicmVha3BvaW50cztcbiAgICB9XG4gICAgQGVsc2UgaWYgbm90IG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJG5hbWUpIG9yICRvdmVyd3JpdGUgPT0gdHJ1ZSB7XG4gICAgICBAcmV0dXJuIG1hcC1tZXJnZSgkYnJlYWtwb2ludHMsICRvdXRwdXQpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYWRkLWJyZWFrcG9pbnQoJG5hbWUsICRia3B0LCAkb3ZlcndyaXRlOiBmYWxzZSkge1xuICAkb3V0cHV0OiAoJG5hbWU6ICRia3B0KTtcblxuICBAaWYgbGVuZ3RoKCRCUkVBS1BPSU5UUykgPT0gMCB7XG4gICAgJEJSRUFLUE9JTlRTOiAkb3V0cHV0ICFnbG9iYWw7XG4gIH1cbiAgQGVsc2Uge1xuICAgIEBpZiBtYXAtaGFzLWtleSgkQlJFQUtQT0lOVFMsICRuYW1lKSBhbmQgJG92ZXJ3cml0ZSAhPSB0cnVlIHtcbiAgICAgIEB3YXJuIFwiWW91IGFscmVhZHkgaGF2ZSBhIGJyZWFrcG9pbnQgbmFtZWQgYCN7JG5hbWV9YCwgcGxlYXNlIGNob29zZSBhbm90aGVyIGJyZWFrcG9pbnQgbmFtZSwgb3IgcGFzcyBpbiBgJG92ZXJ3cml0ZTogdHJ1ZWAgdG8gb3ZlcndyaXRlIHRoZSBwcmV2aW91cyBicmVha3BvaW50LlwiO1xuICAgICAgJEJSRUFLUE9JTlRTOiAkQlJFQUtQT0lOVFMgIWdsb2JhbDtcbiAgICB9XG4gICAgQGVsc2UgaWYgbm90IG1hcC1oYXMta2V5KCRCUkVBS1BPSU5UUywgJG5hbWUpIG9yICRvdmVyd3JpdGUgPT0gdHJ1ZSB7XG4gICAgICAkQlJFQUtQT0lOVFM6IG1hcC1tZXJnZSgkQlJFQUtQT0lOVFMsICRvdXRwdXQpICFnbG9iYWw7XG4gICAgfVxuICB9XG59XG5cbkBmdW5jdGlvbiBnZXQtYnJlYWtwb2ludCgkbmFtZTogZmFsc2UpIHtcbiAgQGlmICRuYW1lID09IGZhbHNlIHtcbiAgICBAcmV0dXJuICRCUkVBS1BPSU5UUztcbiAgfVxuICBAZWxzZSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRCUkVBS1BPSU5UUywgJG5hbWUpO1xuICB9XG59XG4iLCJAbWl4aW4gbGVnYWN5LXNldHRpbmdzLXdhcm5pbmcge1xuICAkbGVnYWN5VmFyczogKFxuICAgICdkZWZhdWx0LW1lZGlhJzogJ2RlZmF1bHQgbWVkaWEnLFxuICAgICdkZWZhdWx0LWZlYXR1cmUnOiAnZGVmYXVsdCBmZWF0dXJlJyxcbiAgICAnZm9yY2UtbWVkaWEtYWxsJzogJ2ZvcmNlIGFsbCBtZWRpYSB0eXBlJyxcbiAgICAndG8tZW1zJzogJ3RvIGVtcycsXG4gICAgJ3Jlc29sdXRpb25zJzogJ3RyYW5zZm9ybSByZXNvbHV0aW9ucycsXG4gICAgJ25vLXF1ZXJpZXMnOiAnbm8gcXVlcmllcycsXG4gICAgJ25vLXF1ZXJ5LWZhbGxiYWNrcyc6ICdubyBxdWVyeSBmYWxsYmFja3MnLFxuICAgICdiYXNlLWZvbnQtc2l6ZSc6ICdiYXNlIGZvbnQgc2l6ZScsXG4gICAgJ2xlZ2FjeS1zeW50YXgnOiAnbGVnYWN5IHN5bnRheCdcbiAgKTtcblxuICBAZWFjaCAkbGVnYWN5LCAkbmV3IGluICRsZWdhY3lWYXJzIHtcbiAgICBAaWYgZ2xvYmFsLXZhcmlhYmxlLWV4aXN0cygnYnJlYWtwb2ludC0nICsgJGxlZ2FjeSkge1xuICAgICAgQHdhcm4gXCJJbiBvcmRlciB0byBhdm9pZCB2YXJpYWJsZSBuYW1zcGFjZSBjb2xsaXNpb25zLCB3ZSBoYXZlIHVwZGF0ZWQgdGhlIHdheSB0byBjaGFuZ2Ugc2V0dGluZ3MgZm9yIEJyZWFrcG9pbnQuIFBsZWFzZSBjaGFuZ2UgYWxsIGluc3RhbmNlcyBvZiBgJGJyZWFrcG9pbnQtI3skbGVnYWN5fToge3tzZXR0aW5nfX1gIHRvIGBAaW5jbHVkZSBicmVha3BvaW50LXNldCgnI3skbmV3fScsIHt7c2V0dGluZ319KWAuIFZhcmlhYmxlIHNldHRpbmdzLCBhcyB3ZWxsIGFzIHRoaXMgd2FybmluZyB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIlxuICAgIH1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gSGFuZCBjb3JyZWN0IGVhY2ggc2V0dGluZ1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoJ2JyZWFrcG9pbnQtZGVmYXVsdC1tZWRpYScpIGFuZCAkYnJlYWtwb2ludC1kZWZhdWx0LW1lZGlhICE9IGJyZWFrcG9pbnQtZ2V0KCdkZWZhdWx0IG1lZGlhJykge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQtc2V0KCdkZWZhdWx0IG1lZGlhJywgJGJyZWFrcG9pbnQtZGVmYXVsdC1tZWRpYSk7XG4gIH1cbiAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoJ2JyZWFrcG9pbnQtZGVmYXVsdC1mZWF0dXJlJykgYW5kICRicmVha3BvaW50LWRlZmF1bHQtZmVhdHVyZSAhPSBicmVha3BvaW50LWdldCgnZGVmYXVsdCBmZWF0dXJlJykge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQtc2V0KCdkZWZhdWx0IGZlYXR1cmUnLCAkYnJlYWtwb2ludC1kZWZhdWx0LWZlYXR1cmUpO1xuICB9XG4gIEBpZiBnbG9iYWwtdmFyaWFibGUtZXhpc3RzKCdicmVha3BvaW50LWZvcmNlLW1lZGlhLWFsbCcpIGFuZCAkYnJlYWtwb2ludC1mb3JjZS1tZWRpYS1hbGwgIT0gYnJlYWtwb2ludC1nZXQoJ2ZvcmNlIGFsbCBtZWRpYSB0eXBlJykge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQtc2V0KCdmb3JjZSBhbGwgbWVkaWEgdHlwZScsICRicmVha3BvaW50LWZvcmNlLW1lZGlhLWFsbCk7XG4gIH1cbiAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoJ2JyZWFrcG9pbnQtdG8tZW1zJykgYW5kICRicmVha3BvaW50LXRvLWVtcyAhPSBicmVha3BvaW50LWdldCgndG8gZW1zJykge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQtc2V0KCd0byBlbXMnLCAkYnJlYWtwb2ludC10by1lbXMpO1xuICB9XG4gIEBpZiBnbG9iYWwtdmFyaWFibGUtZXhpc3RzKCdicmVha3BvaW50LXJlc29sdXRpb25zJykgYW5kICRicmVha3BvaW50LXJlc29sdXRpb25zICE9IGJyZWFrcG9pbnQtZ2V0KCd0cmFuc2Zvcm0gcmVzb2x1dGlvbnMnKSB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ3RyYW5zZm9ybSByZXNvbHV0aW9ucycsICRicmVha3BvaW50LXJlc29sdXRpb25zKTtcbiAgfVxuICBAaWYgZ2xvYmFsLXZhcmlhYmxlLWV4aXN0cygnYnJlYWtwb2ludC1uby1xdWVyaWVzJykgYW5kICRicmVha3BvaW50LW5vLXF1ZXJpZXMgIT0gYnJlYWtwb2ludC1nZXQoJ25vIHF1ZXJpZXMnKSB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ25vIHF1ZXJpZXMnLCAkYnJlYWtwb2ludC1uby1xdWVyaWVzKTtcbiAgfVxuICBAaWYgZ2xvYmFsLXZhcmlhYmxlLWV4aXN0cygnYnJlYWtwb2ludC1uby1xdWVyeS1mYWxsYmFja3MnKSBhbmQgJGJyZWFrcG9pbnQtbm8tcXVlcnktZmFsbGJhY2tzICE9IGJyZWFrcG9pbnQtZ2V0KCdubyBxdWVyeSBmYWxsYmFja3MnKSB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ25vIHF1ZXJ5IGZhbGxiYWNrcycsICRicmVha3BvaW50LW5vLXF1ZXJ5LWZhbGxiYWNrcyk7XG4gIH1cbiAgQGlmIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoJ2JyZWFrcG9pbnQtYmFzZS1mb250LXNpemUnKSBhbmQgJGJyZWFrcG9pbnQtYmFzZS1mb250LXNpemUgIT0gYnJlYWtwb2ludC1nZXQoJ2Jhc2UgZm9udCBzaXplJykge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQtc2V0KCdiYXNlIGZvbnQgc2l6ZScsICRicmVha3BvaW50LWJhc2UtZm9udC1zaXplKTtcbiAgfVxuICBAaWYgZ2xvYmFsLXZhcmlhYmxlLWV4aXN0cygnYnJlYWtwb2ludC1sZWdhY3ktc3ludGF4JykgYW5kICRicmVha3BvaW50LWxlZ2FjeS1zeW50YXggIT0gYnJlYWtwb2ludC1nZXQoJ2xlZ2FjeSBzeW50YXgnKSB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ2xlZ2FjeSBzeW50YXgnLCAkYnJlYWtwb2ludC1sZWdhY3ktc3ludGF4KTtcbiAgfVxufSIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5jb3JlLnNjc3NcbiAqL1xuXG4vLyBCcmVha3BvaW50cy5cbiRzaGlsYS1zLWJyZWFrOiA1MjVweCAhZGVmYXVsdDtcbiRzaGlsYS1tLWJyZWFrOiA4MDFweCAhZGVmYXVsdDtcbiRzaGlsYS1sLWJyZWFrOiAxMDI1cHggIWRlZmF1bHQ7XG4kc2hpbGEtYnJlYWtwb2ludHM6IChcbiAgJ3MnOiAgJHNoaWxhLXMtYnJlYWssXG4gICdtJzogICRzaGlsYS1tLWJyZWFrLFxuICAnbCc6ICAkc2hpbGEtbC1icmVhayxcbikgIWRlZmF1bHQ7XG5cbi8vIFRoZSB4cyBicmVha3BvaW50IGlzIHVzZWQgdG8gdGFyZ2V0IHhzIG9ubHkuXG4kc2hpbGEteHMtYnJlYWs6IG1heC13aWR0aCA1MjRweCAhZGVmYXVsdDtcblxuLy8gRGVmYXVsdCBiYXNlIGZvbnQgc2l6ZS5cbiRzaGlsYS1iYXNlLWZvbnQtc2l6ZTogMTZweCAhZGVmYXVsdDtcblxuLy8gQmFzZSBmb250IHNpemVzIGZvciBkaWZmZXJlbnQgYnJlYWtwb2ludHMuXG4kc2hpbGEtcy1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG4kc2hpbGEtbS1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG4kc2hpbGEtbC1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG4kc2hpbGEtYnJlYWtwb2ludC1mb250LXNpemVzOiAoXG4gICdzJzogICRzaGlsYS1zLWZvbnQtc2l6ZSxcbiAgJ20nOiAgJHNoaWxhLW0tZm9udC1zaXplLFxuICAnbCc6ICAkc2hpbGEtbC1mb250LXNpemUsXG4pICFkZWZhdWx0O1xuXG4vLyBCYXNlIGxpbmUgaGVpZ2h0LiBUbyBrZWVwIHRoaW5ncyBzaW1wbGUgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBicmVha3BvaW50cy5cbiRzaGlsYS1iYXNlLWxpbmUtaGVpZ2h0OiAxLjMgIWRlZmF1bHQ7XG5cbi8vIExpbmUgaGVpZ2h0IGJhc2VkIHNwYWNpbmcuXG4kc2hpbGEtYmFzZS1zcGFjaW5nOiAkc2hpbGEtYmFzZS1saW5lLWhlaWdodCAqIDFyZW0gIWRlZmF1bHQ7XG5cbiRzaGlsYS10aW55LXNwYWNpbmctZmFjdG9yOiAuMjUgIWRlZmF1bHQ7XG4kc2hpbGEtc21hbGwtc3BhY2luZy1mYWN0b3I6IC41ICFkZWZhdWx0O1xuJHNoaWxhLWxhcmdlLXNwYWNpbmctZmFjdG9yOiAyICFkZWZhdWx0O1xuJHNoaWxhLWh1Z2Utc3BhY2luZy1mYWN0b3I6IDQgIWRlZmF1bHQ7XG5cbiRzaGlsYS10aW55LXNwYWNpbmc6ICRzaGlsYS1iYXNlLXNwYWNpbmcgKiAkc2hpbGEtdGlueS1zcGFjaW5nLWZhY3RvcjtcbiRzaGlsYS1zbWFsbC1zcGFjaW5nOiAkc2hpbGEtYmFzZS1zcGFjaW5nICogJHNoaWxhLXNtYWxsLXNwYWNpbmctZmFjdG9yO1xuJHNoaWxhLWxhcmdlLXNwYWNpbmc6ICRzaGlsYS1iYXNlLXNwYWNpbmcgKiAkc2hpbGEtbGFyZ2Utc3BhY2luZy1mYWN0b3I7XG4kc2hpbGEtaHVnZS1zcGFjaW5nOiAkc2hpbGEtYmFzZS1zcGFjaW5nICogJHNoaWxhLWh1Z2Utc3BhY2luZy1mYWN0b3I7XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy9zZXR0aW5ncy9fc2V0dGluZ3MuYW5pbWF0aW9ucy5zY3NzXG4gKi9cblxuLy8gQW5pbWF0aW9uc1xuJHNoaWxhLWJhc2UtZHVyYXRpb246IDE1MG1zICFkZWZhdWx0O1xuJHNoaWxhLWJhc2UtdGltaW5nOiBlYXNlICFkZWZhdWx0O1xuIiwiLyoqXG4gKiBAZmlsZVxuICogcGFydGlhbHMvc2V0dGluZ3MvX3NldHRpbmdzLmNvbG9ycy5zY3NzXG4gKi9cblxuLy8gQ29sb3JzXG4kc2hpbGEtYmx1ZTogIzE1NjVjMCAhZGVmYXVsdDtcbiRzaGlsYS13aGl0ZTogaHNsKDAsIDAlLCAxMDAlKSAhZGVmYXVsdDtcbiRzaGlsYS1saWdodGVzdC1ncmF5OiBoc2woMCwgMCUsIDg3LjUlKSAhZGVmYXVsdDtcbiRzaGlsYS1saWdodGVyLWdyYXk6IGhzbCgwLCAwJSwgNzUlKSAhZGVmYXVsdDtcbiRzaGlsYS1saWdodC1ncmF5OiBoc2woMCwgMCUsIDYyLjUlKSAhZGVmYXVsdDtcbiRzaGlsYS1tZWRpdW0tZ3JheTogaHNsKDAsIDAlLCA1MCUpICFkZWZhdWx0O1xuJHNoaWxhLWRhcmstZ3JheTogaHNsKDAsIDAlLCAzNy41JSkgIWRlZmF1bHQ7XG4kc2hpbGEtZGFya2VyLWdyYXk6IGhzbCgwLCAwJSwgMjUlKSAhZGVmYXVsdDtcbiRzaGlsYS1kYXJrZXN0LWdyYXk6IGhzbCgwLCAwJSwgMTIuNSUpICFkZWZhdWx0O1xuJHNoaWxhLWJsYWNrOiBoc2woMCwgMCUsIDAlKSAhZGVmYXVsdDtcblxuLy8gRm9udCBDb2xvcnNcbiRzaGlsYS1iYXNlLWZvbnQtY29sb3I6ICRzaGlsYS1kYXJrZXN0LWdyYXkgIWRlZmF1bHQ7XG4kc2hpbGEtYWN0aW9uLWNvbG9yOiAkc2hpbGEtYmx1ZSAhZGVmYXVsdDtcblxuLy8gQm9yZGVyIENvbG9yXG4kc2hpbGEtYmFzZS1ib3JkZXItY29sb3I6ICRzaGlsYS1saWdodGVzdC1ncmF5ICFkZWZhdWx0O1xuJHNoaWxhLWJhc2UtYm9yZGVyOiAxcHggc29saWQgJHNoaWxhLWJhc2UtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuXG4vLyBCYWNrZ3JvdW5kIENvbG9yc1xuJHNoaWxhLWJhc2UtYmFja2dyb3VuZC1jb2xvcjogJHNoaWxhLXdoaXRlICFkZWZhdWx0O1xuJHNoaWxhLWNvbnRlbnQtYmFja2dyb3VuZC1jb2xvcjogJHNoaWxhLWJhc2UtYmFja2dyb3VuZC1jb2xvciAhZGVmYXVsdDtcbiIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3NldHRpbmdzL19zZXR0aW5ncy5mb3Jtcy5zY3NzXG4gKi9cblxuLy8gRm9ybXNcbiRzaGlsYS1mb3JtLWJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDNweCByZ2JhKCMwMDAsIDAuMDYpICFkZWZhdWx0O1xuJHNoaWxhLWZvcm0tYm94LXNoYWRvdy1mb2N1czogJHNoaWxhLWZvcm0tYm94LXNoYWRvdywgMCAwIDVweCBhZGp1c3QtY29sb3IoJHNoaWxhLWFjdGlvbi1jb2xvciwgJGxpZ2h0bmVzczogLTUlLCAkYWxwaGE6IC0wLjMpICFkZWZhdWx0O1xuJHNoaWxhLWFsbC10ZXh0LWlucHV0czogKFxuICBcImlucHV0W3R5cGU9J2NvbG9yJ11cIixcbiAgXCJpbnB1dFt0eXBlPSdkYXRlJ11cIixcbiAgXCJpbnB1dFt0eXBlPSdkYXRldGltZSddXCIsXG4gIFwiaW5wdXRbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXVwiLFxuICBcImlucHV0W3R5cGU9J2VtYWlsJ11cIixcbiAgXCJpbnB1dFt0eXBlPSdtb250aCddXCIsXG4gIFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11cIixcbiAgXCJpbnB1dFt0eXBlPSdwYXNzd29yZCddXCIsXG4gIFwiaW5wdXRbdHlwZT0nc2VhcmNoJ11cIixcbiAgXCJpbnB1dFt0eXBlPSd0ZWwnXVwiLFxuICBcImlucHV0W3R5cGU9J3RleHQnXVwiLFxuICBcImlucHV0W3R5cGU9J3RpbWUnXVwiLFxuICBcImlucHV0W3R5cGU9J3VybCddXCIsXG4gIFwiaW5wdXRbdHlwZT0nd2VlayddXCIsXG4gIFwiaW5wdXQ6bm90KFt0eXBlXSlcIixcbiAgXCJ0ZXh0YXJlYVwiLFxuKSAhZGVmYXVsdDtcblxuLy8gQnV0dG9uc1xuJHNoaWxhLWFsbC1idXR0b25zOiAoXG4gIFwiYnV0dG9uXCIsXG4gIFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11cIixcbiAgXCJpbnB1dFt0eXBlPSdyZXNldCddXCIsXG4gIFwiaW5wdXRbdHlwZT0nc3VibWl0J11cIixcbikgIWRlZmF1bHQ7XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy9zZXR0aW5ncy9fc2V0dGluZ3MudHlwb2dyYXBoeS5zY3NzXG4gKi9cblxuLy8gVHlwb2dyYXBoeVxuXG4kc2hpbGEtZm9udC1zdGFjay1oZWx2ZXRpY2E6IChcbiAgXCJIZWx2ZXRpY2EgTmV1ZVwiLFxuICBcIkhlbHZldGljYVwiLFxuICBcIkFyaWFsXCIsXG4gIHNhbnMtc2VyaWYsXG4pICFkZWZhdWx0O1xuJHNoaWxhLWZvbnQtc3RhY2stZ2VvcmdpYTogKFxuICBcIkdlb3JnaWFcIixcbiAgXCJUaW1lc1wiLFxuICBcIlRpbWVzIE5ldyBSb21hblwiLFxuICBzZXJpZixcbikgIWRlZmF1bHQ7XG5cbiRzaGlsYS1iYXNlLWZvbnQtZmFtaWx5OiAkc2hpbGEtZm9udC1zdGFjay1oZWx2ZXRpY2EgIWRlZmF1bHQ7XG4kc2hpbGEtaGVhZGluZy1mb250LWZhbWlseTogJHNoaWxhLWJhc2UtZm9udC1mYW1pbHkgIWRlZmF1bHQ7XG5cbi8vIEZvbnQgU2l6ZXNcblxuJHNoaWxhLWgxLWZvbnQtc2l6ZTogMnJlbSAhZGVmYXVsdDtcbiRzaGlsYS1oMi1mb250LXNpemU6IDEuNXJlbSAhZGVmYXVsdDtcbiRzaGlsYS1oMy1mb250LXNpemU6IDEuMTdyZW0gIWRlZmF1bHQ7XG4kc2hpbGEtaDQtZm9udC1zaXplOiAxcmVtICFkZWZhdWx0O1xuJHNoaWxhLWg1LWZvbnQtc2l6ZTogLjgzcmVtICFkZWZhdWx0O1xuJHNoaWxhLWg2LWZvbnQtc2l6ZTogLjY3cmVtICFkZWZhdWx0O1xuXG4kc2hpbGEtaGVhZGluZy1saW5lLWhlaWdodDogMS4yICFkZWZhdWx0O1xuIiwiLyoqXG4gKiBAZmlsZVxuICogcGFydGlhbHMvc2V0dGluZ3MvX3NldHRpbmdzLmxheW91dC5zY3NzXG4gKi9cblxuLy8gRGVmYXVsdCBncmlkIHNldHRpbmdzXG4kc2hpbGEtYmFzZS1jb2x1bW5zOiA0ICFkZWZhdWx0O1xuJHNoaWxhLXMtY29sdW1uczogIDggIWRlZmF1bHQ7XG4kc2hpbGEtbS1jb2x1bW5zOiAxMiAhZGVmYXVsdDtcbiRzaGlsYS1sLWNvbHVtbnM6IDE2ICFkZWZhdWx0O1xuJHNoaWxhLWJyZWFrcG9pbnQtY29sdW1uczogKFxuICAncyc6ICAkc2hpbGEtcy1jb2x1bW5zLFxuICAnbSc6ICAkc2hpbGEtbS1jb2x1bW5zLFxuICAnbCc6ICAkc2hpbGEtbC1jb2x1bW5zLFxuKSAhZGVmYXVsdDtcbiRzaGlsYS1ndXR0ZXI6IDEgLyAzICFkZWZhdWx0O1xuJHNoaWxhLWRlYnVnLWdyaWQ6IGZhbHNlICFkZWZhdWx0O1xuJHNoaWxhLWJhY2tncm91bmQtZ3JpZC1jb2xvcjogJHNoaWxhLWxpZ2h0LWdyYXkgIWRlZmF1bHQ7XG5cbi8vIFNldCB1cCBkZWZhdWx0IFNpbmd1bGFyaXR5IGdyaWRcbkBpbmNsdWRlIGFkZC1ncmlkKCRzaGlsYS1iYXNlLWNvbHVtbnMpO1xuQGVhY2ggJGJyZWFrcG9pbnQta2V5LCAkY29sdW1ucyBpbiAkc2hpbGEtYnJlYWtwb2ludC1jb2x1bW5zIHtcbiAgQGluY2x1ZGUgYWRkLWdyaWQoJGNvbHVtbnMgYXQgbWFwLWdldCgkc2hpbGEtYnJlYWtwb2ludHMsICRicmVha3BvaW50LWtleSkpO1xufVxuQGluY2x1ZGUgYWRkLWd1dHRlcigkc2hpbGEtZ3V0dGVyKTtcbkBpbmNsdWRlIHNncy1jaGFuZ2UoJ2RlYnVnJywgJHNoaWxhLWRlYnVnLWdyaWQpO1xuXG4vLyBIb3Jpem9udGFsIGxheW91dFxuJHNoaWxhLW1heC13aWR0aDogMTIwMHB4ICFkZWZhdWx0O1xuJHNoaWxhLWJhc2Utc2lkZS1zcGFjaW5nOiA1JSAhZGVmYXVsdDtcbiRzaGlsYS1icmVha3BvaW50LXNpZGUtc3BhY2luZ3M6IChcbiAgJ3MnOiAkc2hpbGEtYmFzZS1zcGFjaW5nLFxuKSAhZGVmYXVsdDtcblxuLy8gT3RoZXIgU2l6ZXNcbiRzaGlsYS1iYXNlLWJvcmRlci1yYWRpdXM6IDNweCAhZGVmYXVsdDtcbiRzaGlsYS1iYXNlLXotaW5kZXg6IDAgIWRlZmF1bHQ7XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy90b29scy9fdG9vbHMuY29yZS5zY3NzXG4gKi9cblxuQGZ1bmN0aW9uIHNoaWxhLWJyZWFrcG9pbnQoJGJyZWFrcG9pbnQta2V5KSB7XG4gIEByZXR1cm4gbWFwLWdldCgkc2hpbGEtYnJlYWtwb2ludHMsICRicmVha3BvaW50LWtleSk7XG59XG5cbkBmdW5jdGlvbiBzaGlsYS1iYXNlLWZvbnQtc2l6ZSgkYnJlYWtwb2ludC1rZXk6IG51bGwpIHtcbiAgQGlmICRicmVha3BvaW50LWtleSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRzaGlsYS1icmVha3BvaW50LWZvbnQtc2l6ZXMsICRicmVha3BvaW50LWtleSk7XG4gIH1cbiAgQHJldHVybiAkc2hpbGEtYmFzZS1mb250LXNpemU7XG59XG5cbi8vIENhbGN1bGF0ZSBhIHBpeGVsLWJhc2VkIGxpbmUtaGVpZ2h0LlxuQGZ1bmN0aW9uIHNoaWxhLXBpeGVsLWxpbmUtaGVpZ2h0KCRicmVha3BvaW50LWtleTogbnVsbCkge1xuICBAaWYgYnJlYWtwb2ludC1rZXkge1xuICAgIEByZXR1cm4gcm91bmQoc2hpbGEtYmFzZS1mb250LXNpemUoJGJyZWFrcG9pbnQta2V5KSAqICRzaGlsYS1iYXNlLWxpbmUtaGVpZ2h0KTtcbiAgfVxuICBAcmV0dXJuIHJvdW5kKCRzaGlsYS1iYXNlLWZvbnQtc2l6ZSAqICRzaGlsYS1iYXNlLWxpbmUtaGVpZ2h0KTtcbn1cblxuQGZ1bmN0aW9uIHNoaWxhLWNvbHVtbnMoJGJyZWFrcG9pbnQta2V5OiBudWxsKSB7XG4gIEBpZiAkYnJlYWtwb2ludC1rZXkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkc2hpbGEtYnJlYWtwb2ludC1jb2x1bW5zLCAkYnJlYWtwb2ludC1rZXkpO1xuICB9XG4gIEByZXR1cm4gJHNoaWxhLWJhc2UtY29sdW1ucztcbn1cbiIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3Rvb2xzL190b29scy5jbGVhcmZpeC5zY3NzXG4gKi9cblxuQG1peGluIHNoaWxhLWNsZWFyZml4IHtcbiAgJjo6YWZ0ZXIge1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IHRhYmxlO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy90b29scy9fdG9vbHMuY29sb3JzLnNjc3NcbiAqL1xuXG4vLy8gQ2hlY2tzIGZvciBhIHZhbGlkIENTUyBjb2xvci5cbi8vL1xuLy8vIEBhcmd1bWVudCB7c3RyaW5nfSAkY29sb3Jcbi8vL1xuLy8vIEByZXR1cm4ge2Jvb2xlYW59XG4vLy9cbi8vLyBAYWNjZXNzIHByaXZhdGVcblxuQGZ1bmN0aW9uIF9zaGlsYS1pcy1jb2xvcigkY29sb3IpIHtcbiAgQHJldHVybiAodHlwZS1vZigkY29sb3IpID09IGNvbG9yKSBvciAoJGNvbG9yID09IFwiY3VycmVudENvbG9yXCIpO1xufVxuXG4vLy8gTWl4ZXMgYSBjb2xvciB3aXRoIGJsYWNrLlxuLy8vXG4vLy8gQGFyZ3VtZW50IHtjb2xvcn0gJGNvbG9yXG4vLy9cbi8vLyBAYXJndW1lbnQge251bWJlciAocGVyY2VudGFnZSl9ICRwZXJjZW50XG4vLy8gICBUaGUgYW1vdW50IG9mIGJsYWNrIHRvIGJlIG1peGVkIGluLlxuLy8vXG4vLy8gQHJldHVybiB7Y29sb3J9XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGJhY2tncm91bmQtY29sb3I6IHNoYWRlKCNmZmJiNTIsIDYwJSk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogIzY2NGEyMDtcbi8vLyAgIH1cblxuQGZ1bmN0aW9uIHNoaWxhLXNoYWRlKFxuICAkY29sb3IsXG4gICRwZXJjZW50XG4pIHtcblxuICBAaWYgbm90IF9zaGlsYS1pcy1jb2xvcigkY29sb3IpIHtcbiAgICBAZXJyb3IgXCJgI3skY29sb3J9YCBpcyBub3QgYSB2YWxpZCBjb2xvciBmb3IgdGhlIGAkY29sb3JgIGFyZ3VtZW50IGluIFwiICtcbiAgICAgICAgICAgXCJ0aGUgYHNoYWRlYCBtaXhpbi5cIjtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBtaXgoIzAwMCwgJGNvbG9yLCAkcGVyY2VudCk7XG4gIH1cbn1cblxuLy8vIE1peGVzIGEgY29sb3Igd2l0aCB3aGl0ZS5cbi8vL1xuLy8vIEBhcmd1bWVudCB7Y29sb3J9ICRjb2xvclxuLy8vXG4vLy8gQGFyZ3VtZW50IHtudW1iZXIgKHBlcmNlbnRhZ2UpfSAkcGVyY2VudFxuLy8vICAgVGhlIGFtb3VudCBvZiB3aGl0ZSB0byBiZSBtaXhlZCBpbi5cbi8vL1xuLy8vIEByZXR1cm4ge2NvbG9yfVxuLy8vXG4vLy8gQGV4YW1wbGUgc2Nzc1xuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0aW50KCM2ZWNhYTYsIDQwJSk7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC8vIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgYmFja2dyb3VuZC1jb2xvcjogI2E4ZGZjOTtcbi8vLyAgIH1cblxuQGZ1bmN0aW9uIHNoaWxhLXRpbnQoXG4gICRjb2xvcixcbiAgJHBlcmNlbnRcbikge1xuXG4gIEBpZiBub3QgX3NoaWxhLWlzLWNvbG9yKCRjb2xvcikge1xuICAgIEBlcnJvciBcImAjeyRjb2xvcn1gIGlzIG5vdCBhIHZhbGlkIGNvbG9yIGZvciB0aGUgYCRjb2xvcmAgYXJndW1lbnQgaW4gXCIgK1xuICAgICAgICAgICBcInRoZSBgdGludGAgbWl4aW4uXCI7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gbWl4KCNmZmYsICRjb2xvciwgJHBlcmNlbnQpO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy90b29scy9fdG9vbHMuY29uc3RhbnRzLnNjc3NcbiAqL1xuXG4vLyBSZXR1cm5zIHRoZSBvcHBvc2l0aW9uIHBvc2l0aW9uIGZvciB0aGUgcG9zaXRpb24gZ2l2ZW4uXG5AZnVuY3Rpb24gc2hpbGEtb3Bwb3NpdGUtcG9zaXRpb24oJGZyb20pIHtcbiAgQGlmICgkZnJvbSA9PSB0b3ApIHtcbiAgICBAcmV0dXJuIGJvdHRvbTtcbiAgfSBAZWxzZSBpZiAoJGZyb20gPT0gYm90dG9tKSB7XG4gICAgQHJldHVybiB0b3A7XG4gIH0gQGVsc2UgaWYgKCRmcm9tID09IGxlZnQpIHtcbiAgICBAcmV0dXJuIHJpZ2h0O1xuICB9IEBlbHNlIGlmICgkZnJvbSA9PSByaWdodCkge1xuICAgIEByZXR1cm4gbGVmdDtcbiAgfSBAZWxzZSBpZiAoJGZyb20gPT0gY2VudGVyKSB7XG4gICAgQHJldHVybiBjZW50ZXI7XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3Rvb2xzL190b29scy5mb250LXNpemUuc2Nzc1xuICovXG5cbi8vIENhbGN1bGF0ZSBhIHVuaXRsZXNzIGxpbmUgaGVpZ2h0IGZvciB0aGUgZ2l2ZW4gZm9udCBzaXplLlxuQGZ1bmN0aW9uIHNoaWxhLWxpbmUtaGVpZ2h0KCRmb250LXNpemUsICRicmVha3BvaW50LWtleTogbnVsbCkge1xuICBAcmV0dXJuIGNlaWwoJGZvbnQtc2l6ZSAvIHNoaWxhLXBpeGVsLWxpbmUtaGVpZ2h0KCRicmVha3BvaW50LWtleSkpICogKHNoaWxhLXBpeGVsLWxpbmUtaGVpZ2h0KCRicmVha3BvaW50LWtleSkgLyAkZm9udC1zaXplKTtcbn1cblxuLy8gR2VuZXJhdGUgYSBmb250LXNpemUgYW5kIGJhc2VsaW5lLWNvbXBhdGlibGUgbGluZS1oZWlnaHQuXG5AbWl4aW4gc2hpbGEtZm9udC1zaXplKCRmb250LXNpemUsICRicmVha3BvaW50LWtleTogbnVsbCwgJGxpbmUtaGVpZ2h0OiBhdXRvLCAkaW1wb3J0YW50OiBmYWxzZSkge1xuXG4gIEBpZiAodHlwZS1vZigkZm9udC1zaXplKSA9PSBudW1iZXIpIHtcbiAgICBAaWYgKHVuaXQoJGZvbnQtc2l6ZSkgIT0gXCJweFwiKSB7XG4gICAgICBAZXJyb3IgXCJgI3skZm9udC1zaXplfWAgbmVlZHMgdG8gYmUgYSBwaXhlbCB2YWx1ZS5cIjtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciBcImAjeyRmb250LXNpemV9YCBuZWVkcyB0byBiZSBhIG51bWJlci5cIjtcbiAgfVxuXG4gIEBpZiAoJGltcG9ydGFudCA9PSB0cnVlKSB7XG4gICAgJGltcG9ydGFudDogIWltcG9ydGFudDtcbiAgfSBAZWxzZWlmICgkaW1wb3J0YW50ID09IGZhbHNlKSB7XG4gICAgJGltcG9ydGFudDogbnVsbDtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiYCN7JGltcG9ydGFudH1gIG5lZWRzIHRvIGJlIGB0cnVlYCBvciBgZmFsc2VgLlwiXG4gIH1cblxuICAvLyBXZSBwcm92aWRlIGEgYHB4YCBmYWxsYmFjayBmb3Igb2xkIElFcyBub3Qgc3VwcG9ydGluZyBgcmVtYCB2YWx1ZXMuXG4gIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZSAkaW1wb3J0YW50O1xuICBmb250LXNpemU6ICgkZm9udC1zaXplIC8gc2hpbGEtYmFzZS1mb250LXNpemUoJGJyZWFrcG9pbnQta2V5KSkgKiAxcmVtICRpbXBvcnRhbnQ7XG5cbiAgQGlmICgkbGluZS1oZWlnaHQgPT0gJ2F1dG8nKSB7XG4gICAgbGluZS1oZWlnaHQ6IHNoaWxhLWxpbmUtaGVpZ2h0KCRmb250LXNpemUsICRicmVha3BvaW50LWtleSkgJGltcG9ydGFudDtcbiAgfVxuXG4gIEBlbHNlIHtcblxuICAgIEBpZiAodHlwZS1vZigkbGluZS1oZWlnaHQpID09IG51bWJlciBvciAkbGluZS1oZWlnaHQgPT0gJ2luaGVyaXQnIG9yICRsaW5lLWhlaWdodCA9PSAnbm9ybWFsJykge1xuICAgICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodCAkaW1wb3J0YW50O1xuICAgIH1cblxuICAgIEBlbHNlaWYgKCRsaW5lLWhlaWdodCAhPSAnbm9uZScgYW5kICRsaW5lLWhlaWdodCAhPSBmYWxzZSkge1xuICAgICAgQGVycm9yIFwiROKAmW9oISBgI3skbGluZS1oZWlnaHR9YCBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3IgYCRsaW5lLWhlaWdodGAuXCJcbiAgICB9XG5cbiAgfVxuXG59XG5cbkBtaXhpbiBzaGlsYS1icmVha3BvaW50LWZvbnQtc2l6ZXMoJGJhc2UtZm9udC1zaXplLCAkYnJlYWtwb2ludC1mb250LXNpemVzOiAoKSwgJGxpbmUtaGVpZ2h0OiBhdXRvLCAkaW1wb3J0YW50OiBmYWxzZSkge1xuICBAaW5jbHVkZSBzaGlsYS1mb250LXNpemUoJGJhc2UtZm9udC1zaXplLCBudWxsLCAkbGluZS1oZWlnaHQsICRpbXBvcnRhbnQpO1xuICAkbGFzdC1mb250LXNpemU6ICRiYXNlLWZvbnQtc2l6ZTtcbiAgQGVhY2ggJGJyZWFrcG9pbnQta2V5LCAkYmFzZS1mb250LXNpemUgaW4gJHNoaWxhLWJyZWFrcG9pbnQtZm9udC1zaXplcyB7XG4gICAgQGlmIChtYXAtaGFzLWtleSgkYnJlYWtwb2ludC1mb250LXNpemVzLCAkYnJlYWtwb2ludC1rZXkpKSB7XG4gICAgICAkbGFzdC1mb250LXNpemU6IG1hcC1nZXQoJGJyZWFrcG9pbnQtZm9udC1zaXplcywgJGJyZWFrcG9pbnQta2V5KTtcbiAgICB9XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludChzaGlsYS1icmVha3BvaW50KCRicmVha3BvaW50LWtleSkpIHtcbiAgICAgIEBpbmNsdWRlIHNoaWxhLWZvbnQtc2l6ZSgkbGFzdC1mb250LXNpemUsICRicmVha3BvaW50LWtleSwgJGxpbmUtaGVpZ2h0LCAkaW1wb3J0YW50KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3Rvb2xzL190b29scy5oaWRkZW4uc2Nzc1xuICovXG5cbi8vIEhpZGVzIHRleHQgaW4gYW4gZWxlbWVudCBzbyB5b3UgY2FuIHNlZSB0aGUgYmFja2dyb3VuZC5cbkBtaXhpbiBzaGlsYS1oaWRlLXRleHQge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LWluZGVudDogMTAxJTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn1cbiIsIi8qKlxuICogQGZpbGVcbiAqIHBhcnRpYWxzL3Rvb2xzL190b29scy5sYXlvdXQuc2Nzc1xuICovXG5cbi8vIFJlc2V0IHRoZSBib3ggbW9kZWwgbWVhc3VyZW1lbnRzLlxuQG1peGluIHNoaWxhLXJlc2V0LWJveC1tb2RlbCB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xufVxuXG5AbWl4aW4gc2hpbGEtb3V0ZXItY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiAkc2hpbGEtbWF4LXdpZHRoO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufVxuXG5AbWl4aW4gc2hpbGEtc2lkZS1tYXJnaW5zIHtcbiAgbWFyZ2luLWxlZnQ6ICRzaGlsYS1iYXNlLXNpZGUtc3BhY2luZztcbiAgbWFyZ2luLXJpZ2h0OiAkc2hpbGEtYmFzZS1zaWRlLXNwYWNpbmc7XG4gIEBlYWNoICRicmVha3BvaW50LWtleSwgJHNpZGUtc3BhY2luZyBpbiAkc2hpbGEtYnJlYWtwb2ludC1zaWRlLXNwYWNpbmdzIHtcbiAgICBAaW5jbHVkZSBicmVha3BvaW50KHNoaWxhLWJyZWFrcG9pbnQoJGJyZWFrcG9pbnQta2V5KSkge1xuICAgICAgbWFyZ2luLWxlZnQ6ICRzaWRlLXNwYWNpbmc7XG4gICAgICBtYXJnaW4tcmlnaHQ6ICRzaWRlLXNwYWNpbmc7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy90b29scy9fdG9vbHMubGlzdHMuc2Nzc1xuICovXG5cbi8vIFR1cm4gb2ZmIHRoZSBidWxsZXQgZm9yIGFuIGVsZW1lbnQgb2YgYSBsaXN0XG5AbWl4aW4gc2hpbGEtbm8tYnVsbGV0IHtcbiAgbGlzdC1zdHlsZS1pbWFnZTogbm9uZTtcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICBtYXJnaW4tbGVmdDogMDtcbn1cblxuLy8gdHVybnMgb2ZmIHRoZSBidWxsZXRzIGZvciBhbiBlbnRpcmUgbGlzdFxuQG1peGluIHNoaWxhLW5vLWJ1bGxldHMge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBsaSB7XG4gICAgQGluY2x1ZGUgc2hpbGEtbm8tYnVsbGV0O1xuICB9XG59XG5cbi8vIEEgbGlzdChvbCx1bCkgdGhhdCBpcyBsYXllZCBvdXQgc3VjaCB0aGF0IHRoZSBlbGVtZW50cyBhcmUgZmxvYXRlZCBsZWZ0IGFuZCB3b24ndCB3cmFwLlxuLy8gVGhpcyBpcyBub3QgYW4gaW5saW5lIGxpc3QuXG4vL1xuLy8gU2V0dGluZyBgJHBhZGRpbmdgIHRvIGBmYWxzZWAgZGlzYWJsZXMgdGhlIHBhZGRpbmcgYmV0d2VlbiBsaXN0IGVsZW1lbnRzXG5AbWl4aW4gc2hpbGEtaG9yaXpvbnRhbC1saXN0KCRwYWRkaW5nOiA0cHgsICRkaXJlY3Rpb246IGxlZnQpIHtcbiAgQGluY2x1ZGUgc2hpbGEtcmVzZXQtYm94LW1vZGVsO1xuICBAaW5jbHVkZSBzaGlsYS1jbGVhcmZpeDtcbiAgbGkge1xuICAgIEBpbmNsdWRlIHNoaWxhLW5vLWJ1bGxldDtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIGZsb2F0OiAkZGlyZWN0aW9uO1xuICAgIEBpZiAkcGFkZGluZyB7XG4gICAgICBwYWRkaW5nOiB7XG4gICAgICAgIGxlZnQ6ICRwYWRkaW5nO1xuICAgICAgICByaWdodDogJHBhZGRpbmc7XG4gICAgICB9XG4gICAgICAmOmZpcnN0LWNoaWxkLFxuICAgICAgJi5maXJzdCB7XG4gICAgICAgIHBhZGRpbmctI3skZGlyZWN0aW9ufTogMDtcbiAgICAgIH1cbiAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIHBhZGRpbmctI3tzaGlsYS1vcHBvc2l0ZS1wb3NpdGlvbigkZGlyZWN0aW9uKX06IDA7XG4gICAgICB9XG4gICAgICAmLmxhc3Qge1xuICAgICAgICBwYWRkaW5nLSN7c2hpbGEtb3Bwb3NpdGUtcG9zaXRpb24oJGRpcmVjdGlvbil9OiAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gc2hpbGEtaG9yaXpvbnRhbC1uYXYoXG4gICRzcGFjaW5nOiAkc2hpbGEtc21hbGwtc3BhY2luZyxcbiAgJGNvbG9yOiAkc2hpbGEtbWVkaXVtLWdyYXksXG4gICRhY3RpdmUtY29sb3I6ICRzaGlsYS1kYXJrLWdyYXlcbikge1xuICBAaW5jbHVkZSBzaGlsYS1yZXNldC1ib3gtbW9kZWw7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbGkge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfVxuICBsaSArIGxpIHtcbiAgICBwYWRkaW5nLWxlZnQ6ICRzcGFjaW5nO1xuICB9XG4gIGEge1xuICAgIGNvbG9yOiAkY29sb3I7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIHRyYW5zaXRpb246IGNvbG9yICRzaGlsYS1iYXNlLWR1cmF0aW9uICRzaGlsYS1iYXNlLXRpbWluZztcbiAgICAmOmFjdGl2ZSxcbiAgICAmOmZvY3VzLFxuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6ICRhY3RpdmUtY29sb3I7XG4gICAgfVxuICB9XG4gIC5pcy1hY3RpdmUge1xuICAgIGNvbG9yOiAkYWN0aXZlLWNvbG9yO1xuICB9XG59XG4iLCIvKipcbiAqIEBmaWxlXG4gKiBwYXJ0aWFscy90b29scy9fdG9vbHMubXVsdGljb2wtbGF5b3V0LnNjc3NcbiAqL1xuXG5AbWl4aW4gc2hpbGEtZG8tbXVsdGljb2wtbGF5b3V0KCRpbm5lci1jb2x1bW5zOiAxLCAkc2VsZWN0b3I6ICYpIHtcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkaW5uZXItY29sdW1ucyB7XG4gICAgI3skc2VsZWN0b3J9Om50aC1jaGlsZCgjeyRpbm5lci1jb2x1bW5zfW4rI3skaX0pIHtcbiAgICAgIEBpZiAoJGkgPT0gMSkge1xuICAgICAgICBAaW5jbHVkZSBpc29sYXRpb24tc3BhbigxLCAkaSwgYm90aCk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgQGluY2x1ZGUgaXNvbGF0aW9uLXNwYW4oMSwgJGksIG5vbmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy8gTXVsdGktY29sdW1uIGxheW91dC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkaW5uZXItY29sdW1uc1xuLy8vICAgTnVtYmVyIG9mIGlubmVyIGNvbHVtbnMuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvdXRlci1jb2x1bW5zXG4vLy8gICBOdW1iZXIgb2YgY29sdW1ucyBpbiBwYXJlbnQgZWxlbWVudC5cbi8vLyBAcGFyYW0gJHNlbGVjdG9yIFsmXVxuLy8vICAgU2VsZWN0b3IgdG8gdXNlIGlmIG5vdCB0YXJnZXRpbmcgY3VycmVudCBwYXJlbnQgc2VsZWN0b3IuXG4vLy8gQHBhcmFtICRndXR0ZXIgWyRzaGlsYS1ndXR0ZXJdXG4vLy8gICBHdXR0ZXIgc2l6ZSBvZiBwYXJlbnQgZWxlbWVudC5cbkBtaXhpbiBzaGlsYS1tdWx0aWNvbC1sYXlvdXQoXG4gICRpbm5lci1jb2x1bW5zOiAxLFxuICAkb3V0ZXItY29sdW1uczogJHNoaWxhLWJhc2UtY29sdW1ucyxcbiAgJHNlbGVjdG9yOiAmLFxuICAkZ3V0dGVyOiAkc2hpbGEtZ3V0dGVyXG4pIHtcbiAgJHNjYWxlZC1ndXR0ZXI6ICRndXR0ZXIgLyAoJG91dGVyLWNvbHVtbnMgLyAkaW5uZXItY29sdW1ucyk7XG4gIEBpbmNsdWRlIGxheW91dCgkaW5uZXItY29sdW1ucywgJHNjYWxlZC1ndXR0ZXIpIHtcbiAgICBAaW5jbHVkZSBzaGlsYS1kby1tdWx0aWNvbC1sYXlvdXQoJGlubmVyLWNvbHVtbnMsICRzZWxlY3Rvcik7XG4gIH1cbn1cblxuLy8vIE11bHRpLWNvbHVtbiBsYXlvdXQgd2l0aCBicmVha3BvaW50cy5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYmFzZS1pbm5lci1jb2x1bW5zXG4vLy8gICBOdW1iZXIgb2YgaW5uZXIgY29sdW1ucyBbMV1cbi8vLyBAcGFyYW0ge01hcH0gJGJyZWFrcG9pbnQtaW5uZXItY29sdW1ucyBbKCdzJzogMiwgJ20nOiAzLCAnbCc6IDQpXVxuLy8vICAgTnVtYmVyIG9mIGlubmVyIGNvbHVtbnMgZm9yIHNwZWNpZmllZCBicmVha3BvaW50cy5cbi8vLyBAcGFyYW0ge051bWJlcn0gJGJhc2Utb3V0ZXItY29sdW1ucyBbJHNoaWxhLWJhc2UtY29sdW1uc11cbi8vLyAgIE51bWJlciBvZiBjb2x1bW5zIGluIHBhcmVudCBlbGVtZW50LlxuLy8vIEBwYXJhbSB7TWFwfSAkYnJlYWtwb2ludC1vdXRlci1jb2x1bW5zIFskc2hpbGEtYnJlYWtwb2ludC1jb2x1bW5zXVxuLy8vICAgTnVtYmVyIG9mIGNvbHVtbnMgaW4gcGFyZW50IGVsZW1lbnQgZm9yIHNwZWNpZmllZCBicmVha3BvaW50cy5cbi8vLyAgIE11c3QgY29udGFpbiBhbGwgdGhlIGtleXMgdGhhdCBhcmUgaW4gJGJyZWFrcG9pbnQtaW5uZXItY29sdW1ucy5cbi8vLyBAcGFyYW0gJHNlbGVjdG9yIFsmXVxuLy8vICAgU2VsZWN0b3IgdG8gdXNlIGlmIG5vdCB0YXJnZXRpbmcgY3VycmVudCBwYXJlbnQgc2VsZWN0b3IuXG4vLy8gQHBhcmFtICRndXR0ZXIgWyRzaGlsYS1ndXR0ZXJdXG4vLy8gICBHdXR0ZXIgc2l6ZSBvZiBwYXJlbnQgZWxlbWVudC5cbkBtaXhpbiBzaGlsYS1tdWx0aWNvbC1icmVha3BvaW50LWxheW91dChcbiAgJGJhc2UtaW5uZXItY29sdW1uczogMSxcbiAgJGJyZWFrcG9pbnQtaW5uZXItY29sdW1uczogKCdzJzogMiwgJ20nOiAzLCAnbCc6IDQpLFxuICAkYmFzZS1vdXRlci1jb2x1bW5zOiAkc2hpbGEtYmFzZS1jb2x1bW5zLFxuICAkYnJlYWtwb2ludC1vdXRlci1jb2x1bW5zOiAkc2hpbGEtYnJlYWtwb2ludC1jb2x1bW5zLFxuICAkc2VsZWN0b3I6ICYsXG4gICRndXR0ZXI6ICRzaGlsYS1ndXR0ZXJcbikge1xuICBAaW5jbHVkZSBzaGlsYS1tdWx0aWNvbC1sYXlvdXQoXG4gICAgJGJhc2UtaW5uZXItY29sdW1ucywgJGJhc2Utb3V0ZXItY29sdW1ucywgJHNlbGVjdG9yLCAkZ3V0dGVyXG4gICk7XG4gIEBlYWNoICRicmVha3BvaW50LWtleSwgJGlubmVyLWNvbHVtbnMgaW4gJGJyZWFrcG9pbnQtaW5uZXItY29sdW1ucyB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludChzaGlsYS1icmVha3BvaW50KCRicmVha3BvaW50LWtleSkpIHtcbiAgICAgIEBpbmNsdWRlIHNoaWxhLW11bHRpY29sLWxheW91dChcbiAgICAgICAgJGlubmVyLWNvbHVtbnMsXG4gICAgICAgIG1hcC1nZXQoJGJyZWFrcG9pbnQtb3V0ZXItY29sdW1ucywgJGJyZWFrcG9pbnQta2V5KSxcbiAgICAgICAgJHNlbGVjdG9yLFxuICAgICAgICAkZ3V0dGVyXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAZmlsZVxuICogcGFydGlhbHMvdG9vbHMvX3Rvb2xzLnNhc3MtbGlzdHMuc2Nzc1xuICovXG5cbi8vIGh0dHA6Ly9odWdvZ2lyYXVkZWwuY29tLzIwMTMvMDgvMDgvYWR2YW5jZWQtc2Fzcy1saXN0LWZ1bmN0aW9ucy9cbkBmdW5jdGlvbiBzaGlsYS1maXJzdCgkbGlzdCkge1xuICBAcmV0dXJuIG50aCgkbGlzdCwgMSk7XG59XG5AZnVuY3Rpb24gc2hpbGEtbGFzdCgkbGlzdCkge1xuICBAcmV0dXJuIG50aCgkbGlzdCwgbGVuZ3RoKCRsaXN0KSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUNMSDs7Ozs7OztHQU9HO0FzRFBIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRztBQ0hIOzs7R0FHRyJ9 */
